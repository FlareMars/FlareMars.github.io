function nativeObjectReleaseFunc(objPtr) {
	if (nativeObjectsInTableMap.has(objPtr)) {
		let object = nativeObjectsInTableMap.get(objPtr);
		object.onDeleteThis();
		nativeObjectsInTableMap.delete(objPtr);
	}
}

function Callback0Generator(func) {
	return function() {
		if (func){
			return func();
		}
	}
}

function Callback1Generator(func) {
	return function(strBuf, value) {
		if (func){
			var str = Module.UTF8ToString(strBuf);
			return func(str, value);
		}
	}
}

function Callback2Generator(func) {
	return function(strBuf, param1Buf, param2) {
		if (func) {
			var str = Module.UTF8ToString(strBuf);
			var param1 = Module.UTF8ToString(param1Buf);
			return func(str, param1, param2);
		}
	}
}

function CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new Node(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0);
		}
	}
}

function CustomCallback_bae6d381a6ad75e2a7fe59136b2593e6_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new SequenceFrameAnimationPlayer(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0);
		}
	}
}

function CustomCallback_a1224f19c6d6ae242400dcf1e1f87d32_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new SequenceFrameAnimationPlayer(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0, param1);
		}
	}
}

function CustomCallback_f6e6c898e8311ce6fab5bba18b1fa134_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			return func(param0);
		}
	}
}

function CustomCallback_752ad5da4bcd6f54ac3aa7af7fc1eb3c_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var strParam0= Module.UTF8ToString(param1);
			return func(strParam0);
		}
	}
}

function CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new Node2D(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0);
		}
	}
}

function CustomCallback_31c0b288af0a2a61715fa69c5e211735_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var strParam0= Module.UTF8ToString(param1);
			var jsParam1 = null;
			if (!nativeObjectsInTableMap.has(param1)) {
				jsParam1 = new GObject(param1);
			}
			else {
				jsParam1 = nativeObjectsInTableMap.get(param1);
			}
			return func(strParam0, jsParam1);
		}
	}
}

function CustomCallback_92a8729d8dafee2b8fc27949c89d0ecc_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var strParam0= Module.UTF8ToString(param1);
			return func(strParam0);
		}
	}
}

function CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(func) {
	return function(param0, param1, param2, param3) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new Node2D(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1, param2, param3);
		}
	}
}

function CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(func) {
	return function(param0, param1, param2) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new Node2D(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0, param1, param2);
		}
	}
}

function CustomCallback_5735589223114756a5d6e84a179726ab_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UICheckBox(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			return func(jsParam0, param1);
		}
	}
}

function CustomCallback_7fbb5eccf4558f42da151688f94e4c24_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UICombo(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_8f6c347d622cf67468c9bf27a8d54d69_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UIListView(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_6b4e34afb9836cd3532afb00db2eb47e_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UIScrollView(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_6ff3fdd3c74a86562a087baab3d50b55_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UIRadioButtonGroup(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_e58aef4fee68d42c330b0998c52fde05_wasm_Generator(func) {
	return function(param0, param1, param2) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new UISlider(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			var strParam2= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1, strParam2);
		}
	}
}

function CustomCallback_5b1a613d69b45b68f864b652e0f1db78_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new CheckBox(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_4670d14005585364472a348373b4fd6b_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new ListView(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_8364b577fc9cbf6a85be4cfa0effd4fb_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new ScrollView(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_6e156f4e5fd29996fd8ec20ed14289b8_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new RadioButton(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_e925499cf9eb6c5a6d862d0d0e1f36e1_wasm_Generator(func) {
	return function(param0, param1) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new RadioButton(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1);
		}
	}
}

function CustomCallback_3f7c6c81aeb512b7a4d0d1f6099537a3_wasm_Generator(func) {
	return function(param0, param1, param2) {
		if (func) {
			var jsParam0 = null;
			if (!nativeObjectsInTableMap.has(param0)) {
				jsParam0 = new Slider(param0);
			}
			else {
				jsParam0 = nativeObjectsInTableMap.get(param0);
			}
			var strParam1= Module.UTF8ToString(param1);
			var strParam2= Module.UTF8ToString(param1);
			return func(jsParam0, strParam1, strParam2);
		}
	}
}

function CustomCallback_7b3c9760e9ab300756dafecf08e97995_wasm_Generator(func) {
	return function(param0) {
		if (func) {
			var strParam0= Module.UTF8ToString(param1);
			return func(strParam0);
		}
	}
}


class AtlasNode {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._AtlasNode_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(filename, tileWidth, tileHeight, itemsToRender) {
		const filenameBuffer = Module._malloc(filename.length+1);
		Module.stringToUTF8(filename, filenameBuffer, filename.length+1);
		var __result = Module._AtlasNode_create(filenameBuffer, tileWidth, tileHeight, itemsToRender);
		Module._free(filenameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new AtlasNode(__result);
		}
	}

	getTexture() {
		var __result = Module._AtlasNode_getTexture(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture2D(__result);
		}
	}

	setTexture(texture) {
		Module._AtlasNode_setTexture(this.nativePtr, texture.nativePtr);
	}

	setOpacityModifyRGB(isOpacityModifyRGB) {
		Module._AtlasNode_setOpacityModifyRGB(this.nativePtr, isOpacityModifyRGB);
	}

	getColor() {
		Module._AtlasNode_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._AtlasNode_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	setOpacity(opacity) {
		Module._AtlasNode_setOpacity(this.nativePtr, opacity);
	}

	setScaleX(scaleX) {
		Module._AtlasNode_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._AtlasNode_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._AtlasNode_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._AtlasNode_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._AtlasNode_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._AtlasNode_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._AtlasNode_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._AtlasNode_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._AtlasNode_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._AtlasNode_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._AtlasNode_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._AtlasNode_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._AtlasNode_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._AtlasNode_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._AtlasNode_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._AtlasNode_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._AtlasNode_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._AtlasNode_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._AtlasNode_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._AtlasNode_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._AtlasNode_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._AtlasNode_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._AtlasNode_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._AtlasNode_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._AtlasNode_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._AtlasNode_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._AtlasNode_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._AtlasNode_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._AtlasNode_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._AtlasNode_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._AtlasNode_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._AtlasNode_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._AtlasNode_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._AtlasNode_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._AtlasNode_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._AtlasNode_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._AtlasNode_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._AtlasNode_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._AtlasNode_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._AtlasNode_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._AtlasNode_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._AtlasNode_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._AtlasNode_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._AtlasNode_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._AtlasNode_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._AtlasNode_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._AtlasNode_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._AtlasNode_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._AtlasNode_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._AtlasNode_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._AtlasNode_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._AtlasNode_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._AtlasNode_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._AtlasNode_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._AtlasNode_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._AtlasNode_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._AtlasNode_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._AtlasNode_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._AtlasNode_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._AtlasNode_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._AtlasNode_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._AtlasNode_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._AtlasNode_getOpacity(this.nativePtr);
		return __result;
	}

	isCascadeOpacityEnabled() {
		var __result = Module._AtlasNode_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._AtlasNode_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._AtlasNode_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._AtlasNode_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._AtlasNode_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._AtlasNode_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._AtlasNode_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._AtlasNode_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._AtlasNode_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._AtlasNode_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._AtlasNode_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._AtlasNode_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._AtlasNode_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._AtlasNode_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._AtlasNode_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._AtlasNode_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._AtlasNode_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._AtlasNode_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._AtlasNode_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._AtlasNode_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._AtlasNode_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._AtlasNode_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._AtlasNode_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._AtlasNode_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._AtlasNode_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._AtlasNode_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._AtlasNode_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._AtlasNode_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._AtlasNode_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._AtlasNode_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._AtlasNode_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._AtlasNode_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._AtlasNode_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._AtlasNode_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._AtlasNode_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._AtlasNode_activate(this.nativePtr);
	}

	deactivate() {
		Module._AtlasNode_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._AtlasNode_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class AutoBatchNode {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._AutoBatchNode_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._AutoBatchNode_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new AutoBatchNode(__result);
		}
	}

	enableSort(flag) {
		Module._AutoBatchNode_enableSort(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._AutoBatchNode_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._AutoBatchNode_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._AutoBatchNode_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._AutoBatchNode_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._AutoBatchNode_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._AutoBatchNode_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._AutoBatchNode_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._AutoBatchNode_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._AutoBatchNode_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._AutoBatchNode_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._AutoBatchNode_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._AutoBatchNode_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._AutoBatchNode_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._AutoBatchNode_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._AutoBatchNode_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._AutoBatchNode_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._AutoBatchNode_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._AutoBatchNode_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._AutoBatchNode_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._AutoBatchNode_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._AutoBatchNode_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._AutoBatchNode_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._AutoBatchNode_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._AutoBatchNode_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._AutoBatchNode_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._AutoBatchNode_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._AutoBatchNode_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._AutoBatchNode_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._AutoBatchNode_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._AutoBatchNode_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._AutoBatchNode_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._AutoBatchNode_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._AutoBatchNode_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._AutoBatchNode_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._AutoBatchNode_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._AutoBatchNode_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._AutoBatchNode_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._AutoBatchNode_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._AutoBatchNode_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._AutoBatchNode_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._AutoBatchNode_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._AutoBatchNode_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._AutoBatchNode_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._AutoBatchNode_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._AutoBatchNode_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._AutoBatchNode_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._AutoBatchNode_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._AutoBatchNode_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._AutoBatchNode_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._AutoBatchNode_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._AutoBatchNode_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._AutoBatchNode_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._AutoBatchNode_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._AutoBatchNode_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._AutoBatchNode_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._AutoBatchNode_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._AutoBatchNode_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._AutoBatchNode_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._AutoBatchNode_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._AutoBatchNode_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._AutoBatchNode_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._AutoBatchNode_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._AutoBatchNode_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._AutoBatchNode_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._AutoBatchNode_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._AutoBatchNode_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._AutoBatchNode_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._AutoBatchNode_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._AutoBatchNode_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._AutoBatchNode_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._AutoBatchNode_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._AutoBatchNode_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._AutoBatchNode_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._AutoBatchNode_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._AutoBatchNode_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._AutoBatchNode_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._AutoBatchNode_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._AutoBatchNode_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._AutoBatchNode_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._AutoBatchNode_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._AutoBatchNode_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._AutoBatchNode_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._AutoBatchNode_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._AutoBatchNode_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._AutoBatchNode_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._AutoBatchNode_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._AutoBatchNode_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._AutoBatchNode_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._AutoBatchNode_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._AutoBatchNode_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._AutoBatchNode_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._AutoBatchNode_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._AutoBatchNode_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._AutoBatchNode_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._AutoBatchNode_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._AutoBatchNode_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._AutoBatchNode_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._AutoBatchNode_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._AutoBatchNode_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._AutoBatchNode_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._AutoBatchNode_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._AutoBatchNode_activate(this.nativePtr);
	}

	deactivate() {
		Module._AutoBatchNode_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._AutoBatchNode_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class BK2DGameModule {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._BK2DGameModule_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._BK2DGameModule_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._BK2DGameModule_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._BK2DGameModule_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._BK2DGameModule_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._BK2DGameModule_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._BK2DGameModule_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._BK2DGameModule_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._BK2DGameModule_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._BK2DGameModule_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._BK2DGameModule_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._BK2DGameModule_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._BK2DGameModule_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._BK2DGameModule_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._BK2DGameModule_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._BK2DGameModule_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._BK2DGameModule_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._BK2DGameModule_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._BK2DGameModule_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._BK2DGameModule_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._BK2DGameModule_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._BK2DGameModule_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._BK2DGameModule_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._BK2DGameModule_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._BK2DGameModule_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._BK2DGameModule_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._BK2DGameModule_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._BK2DGameModule_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._BK2DGameModule_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._BK2DGameModule_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._BK2DGameModule_activate(this.nativePtr);
	}

	deactivate() {
		Module._BK2DGameModule_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._BK2DGameModule_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Director {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Director_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Director_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Director(__result);
		}
	}

	getRunningScene() {
		var __result = Module._Director_getRunningScene(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scene(__result);
		}
	}

	runWithScene(scene) {
		Module._Director_runWithScene(this.nativePtr, scene.nativePtr);
	}

	pushScene(scene) {
		Module._Director_pushScene(this.nativePtr, scene.nativePtr);
	}

	popScene() {
		Module._Director_popScene(this.nativePtr);
	}

	popToRootScene() {
		Module._Director_popToRootScene(this.nativePtr);
	}

	popToSceneStackLevel(level) {
		Module._Director_popToSceneStackLevel(this.nativePtr, level);
	}

	replaceScene(scene) {
		Module._Director_replaceScene(this.nativePtr, scene.nativePtr);
	}

	setVisibleSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._Director_setVisibleSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getVisibleSize() {
		Module._Director_getVisibleSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getVisibleWidth() {
		var __result = Module._Director_getVisibleWidth(this.nativePtr);
		return __result;
	}

	getVisibleHeight() {
		var __result = Module._Director_getVisibleHeight(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Director_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Director_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Director_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Director_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Director_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Director_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Director_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Director_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Director_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Director_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Director_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Director_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Director_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Director_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Director_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Director_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Director_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Director_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Director_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Director_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Director_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Director_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Director_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Director_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Director_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Director_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Director_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Director_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Director_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Director_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Director_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Director_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Director_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Director_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Director_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Director_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Director_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Director_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Director_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Director_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Director_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Director_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Director_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Director_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Director_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Director_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Director_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Director_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Director_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Director_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Director_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Director_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Director_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Director_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Director_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Director_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Director_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Director_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Director_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Director_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Director_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Director_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Director_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Director_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Director_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Director_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Director_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Director_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Director_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Director_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Director_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Director_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Director_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Director_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Director_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Director_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Director_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Director_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Director_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Director_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Director_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Director_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Director_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Director_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Director_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Director_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Director_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Director_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Director_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Director_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Director_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Director_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Director_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Director_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Director_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Director_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Director_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Director_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Director_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Director_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Director_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Director_activate(this.nativePtr);
	}

	deactivate() {
		Module._Director_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Director_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class DrawNode {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._DrawNode_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._DrawNode_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	clear() {
		Module._DrawNode_clear(this.nativePtr);
	}

	setLineWidth(lineWidth) {
		Module._DrawNode_setLineWidth(this.nativePtr, lineWidth);
	}

	getLineWidth() {
		var __result = Module._DrawNode_getLineWidth(this.nativePtr);
		return __result;
	}

	setIsolated(isolated) {
		Module._DrawNode_setIsolated(this.nativePtr, isolated);
	}

	isIsolated() {
		var __result = Module._DrawNode_isIsolated(this.nativePtr);
		return __result;
	}

	drawLine(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawLine(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRect(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawRect(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRectWithCorners(p1, p2, p3, p4, color) {
		var pbp1 = PBVector2.create();
		pbp1.x = p1.x;
		pbp1.y = p1.y;
		const p1Buffer = PBVector2.buffer(pbp1);
		var pbp2 = PBVector2.create();
		pbp2.x = p2.x;
		pbp2.y = p2.y;
		const p2Buffer = PBVector2.buffer(pbp2);
		var pbp3 = PBVector2.create();
		pbp3.x = p3.x;
		pbp3.y = p3.y;
		const p3Buffer = PBVector2.buffer(pbp3);
		var pbp4 = PBVector2.create();
		pbp4.x = p4.x;
		pbp4.y = p4.y;
		const p4Buffer = PBVector2.buffer(pbp4);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawRectWithCorners(this.nativePtr, p1Buffer, p2Buffer, p3Buffer, p4Buffer, colorBuffer);
		PBVector2.freeBuffer(p1Buffer);
		PBVector2.freeBuffer(p2Buffer);
		PBVector2.freeBuffer(p3Buffer);
		PBVector2.freeBuffer(p4Buffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidRect(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawSolidRect(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidRoundedRect(origin, destination, radius, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawSolidRoundedRect(this.nativePtr, originBuffer, destinationBuffer, radius, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRoundedRect(origin, destination, radius, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawRoundedRect(this.nativePtr, originBuffer, destinationBuffer, radius, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawCircle(center, radius, angle, segments, drawLineToCenter, color) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawCircle(this.nativePtr, centerBuffer, radius, angle, segments, drawLineToCenter, colorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidCircle(center, radius, angle, segments, color) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawSolidCircle(this.nativePtr, centerBuffer, radius, angle, segments, colorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawQuadBezier(origin, control, destination, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbcontrol = PBVector2.create();
		pbcontrol.x = control.x;
		pbcontrol.y = control.y;
		const controlBuffer = PBVector2.buffer(pbcontrol);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawQuadBezier(this.nativePtr, originBuffer, controlBuffer, destinationBuffer, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(controlBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawCubicBezier(origin, control1, control2, destination, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbcontrol1 = PBVector2.create();
		pbcontrol1.x = control1.x;
		pbcontrol1.y = control1.y;
		const control1Buffer = PBVector2.buffer(pbcontrol1);
		var pbcontrol2 = PBVector2.create();
		pbcontrol2.x = control2.x;
		pbcontrol2.y = control2.y;
		const control2Buffer = PBVector2.buffer(pbcontrol2);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawCubicBezier(this.nativePtr, originBuffer, control1Buffer, control2Buffer, destinationBuffer, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(control1Buffer);
		PBVector2.freeBuffer(control2Buffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawDot(pos, radius, color) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawDot(this.nativePtr, posBuffer, radius, colorBuffer);
		PBVector2.freeBuffer(posBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSegment(from, to, radius, color) {
		var pbfrom = PBVector2.create();
		pbfrom.x = from.x;
		pbfrom.y = from.y;
		const fromBuffer = PBVector2.buffer(pbfrom);
		var pbto = PBVector2.create();
		pbto.x = to.x;
		pbto.y = to.y;
		const toBuffer = PBVector2.buffer(pbto);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawSegment(this.nativePtr, fromBuffer, toBuffer, radius, colorBuffer);
		PBVector2.freeBuffer(fromBuffer);
		PBVector2.freeBuffer(toBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawTriangle(p1, p2, p3, color) {
		var pbp1 = PBVector2.create();
		pbp1.x = p1.x;
		pbp1.y = p1.y;
		const p1Buffer = PBVector2.buffer(pbp1);
		var pbp2 = PBVector2.create();
		pbp2.x = p2.x;
		pbp2.y = p2.y;
		const p2Buffer = PBVector2.buffer(pbp2);
		var pbp3 = PBVector2.create();
		pbp3.x = p3.x;
		pbp3.y = p3.y;
		const p3Buffer = PBVector2.buffer(pbp3);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._DrawNode_drawTriangle(this.nativePtr, p1Buffer, p2Buffer, p3Buffer, colorBuffer);
		PBVector2.freeBuffer(p1Buffer);
		PBVector2.freeBuffer(p2Buffer);
		PBVector2.freeBuffer(p3Buffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	setScaleX(scaleX) {
		Module._DrawNode_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._DrawNode_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._DrawNode_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._DrawNode_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._DrawNode_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._DrawNode_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._DrawNode_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._DrawNode_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._DrawNode_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._DrawNode_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._DrawNode_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._DrawNode_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._DrawNode_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._DrawNode_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._DrawNode_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._DrawNode_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._DrawNode_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._DrawNode_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._DrawNode_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._DrawNode_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._DrawNode_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._DrawNode_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._DrawNode_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._DrawNode_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._DrawNode_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._DrawNode_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._DrawNode_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._DrawNode_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._DrawNode_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._DrawNode_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._DrawNode_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._DrawNode_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._DrawNode_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._DrawNode_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._DrawNode_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._DrawNode_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._DrawNode_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._DrawNode_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._DrawNode_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._DrawNode_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._DrawNode_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._DrawNode_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._DrawNode_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._DrawNode_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._DrawNode_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._DrawNode_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._DrawNode_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._DrawNode_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._DrawNode_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._DrawNode_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._DrawNode_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._DrawNode_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._DrawNode_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._DrawNode_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._DrawNode_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._DrawNode_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._DrawNode_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._DrawNode_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._DrawNode_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._DrawNode_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._DrawNode_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._DrawNode_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._DrawNode_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._DrawNode_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._DrawNode_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._DrawNode_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._DrawNode_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._DrawNode_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._DrawNode_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._DrawNode_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._DrawNode_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._DrawNode_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._DrawNode_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._DrawNode_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._DrawNode_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._DrawNode_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._DrawNode_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._DrawNode_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._DrawNode_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._DrawNode_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._DrawNode_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._DrawNode_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._DrawNode_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._DrawNode_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._DrawNode_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._DrawNode_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._DrawNode_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._DrawNode_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._DrawNode_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._DrawNode_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._DrawNode_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._DrawNode_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._DrawNode_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._DrawNode_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._DrawNode_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._DrawNode_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._DrawNode_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._DrawNode_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._DrawNode_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._DrawNode_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._DrawNode_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._DrawNode_activate(this.nativePtr);
	}

	deactivate() {
		Module._DrawNode_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._DrawNode_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Label {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Label_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Label_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithSystemFont(text, font, fontSize, dimensions, hAlignment, vAlignment) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontBuffer = Module._malloc(font.length+1);
		Module.stringToUTF8(font, fontBuffer, font.length+1);
		var pbdimensions = PBBKSizeF.create();
		pbdimensions.width = dimensions.width;
		pbdimensions.height = dimensions.height;
		const dimensionsBuffer = PBBKSizeF.buffer(pbdimensions);
		var __result = Module._Label_createWithSystemFont(textBuffer, fontBuffer, fontSize, dimensionsBuffer, hAlignment, vAlignment);
		Module._free(textBuffer);
		Module._free(fontBuffer);
		PBBKSizeF.freeBuffer(dimensionsBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithTTF(text, fontFilePath, fontSize, dimensions, hAlignment, vAlignment) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		var pbdimensions = PBBKSizeF.create();
		pbdimensions.width = dimensions.width;
		pbdimensions.height = dimensions.height;
		const dimensionsBuffer = PBBKSizeF.buffer(pbdimensions);
		var __result = Module._Label_createWithTTF(textBuffer, fontFilePathBuffer, fontSize, dimensionsBuffer, hAlignment, vAlignment);
		Module._free(textBuffer);
		Module._free(fontFilePathBuffer);
		PBBKSizeF.freeBuffer(dimensionsBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithTTFAndBackground(text, fontFilePath, fontSize, dimensions, hAlignment, vAlignment, bgImagePath, bgImageCapInset) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		var pbdimensions = PBBKSizeF.create();
		pbdimensions.width = dimensions.width;
		pbdimensions.height = dimensions.height;
		const dimensionsBuffer = PBBKSizeF.buffer(pbdimensions);
		const bgImagePathBuffer = Module._malloc(bgImagePath.length+1);
		Module.stringToUTF8(bgImagePath, bgImagePathBuffer, bgImagePath.length+1);
		var pbbgImageCapInset = PBBKRectF.create();
		pbbgImageCapInset.left = bgImageCapInset.left;
		pbbgImageCapInset.top = bgImageCapInset.top;
		pbbgImageCapInset.width = bgImageCapInset.width;
		pbbgImageCapInset.height = bgImageCapInset.height;
		const bgImageCapInsetBuffer = PBBKRectF.buffer(pbbgImageCapInset);
		var __result = Module._Label_createWithTTFAndBackground(textBuffer, fontFilePathBuffer, fontSize, dimensionsBuffer, hAlignment, vAlignment, bgImagePathBuffer, bgImageCapInsetBuffer);
		Module._free(textBuffer);
		Module._free(fontFilePathBuffer);
		PBBKSizeF.freeBuffer(dimensionsBuffer);
		Module._free(bgImagePathBuffer);
		PBBKRectF.freeBuffer(bgImageCapInsetBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithTTFAndEmoji(text, fontFilePath, emojiFilePath, fontSize, dimensions, hAlignment, vAlignment) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		const emojiFilePathBuffer = Module._malloc(emojiFilePath.length+1);
		Module.stringToUTF8(emojiFilePath, emojiFilePathBuffer, emojiFilePath.length+1);
		var pbdimensions = PBBKSizeF.create();
		pbdimensions.width = dimensions.width;
		pbdimensions.height = dimensions.height;
		const dimensionsBuffer = PBBKSizeF.buffer(pbdimensions);
		var __result = Module._Label_createWithTTFAndEmoji(textBuffer, fontFilePathBuffer, emojiFilePathBuffer, fontSize, dimensionsBuffer, hAlignment, vAlignment);
		Module._free(textBuffer);
		Module._free(fontFilePathBuffer);
		Module._free(emojiFilePathBuffer);
		PBBKSizeF.freeBuffer(dimensionsBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithBMFont(bmfontPath, text, hAlignment) {
		const bmfontPathBuffer = Module._malloc(bmfontPath.length+1);
		Module.stringToUTF8(bmfontPath, bmfontPathBuffer, bmfontPath.length+1);
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		var __result = Module._Label_createWithBMFont(bmfontPathBuffer, textBuffer, hAlignment);
		Module._free(bmfontPathBuffer);
		Module._free(textBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	static createWithCharMap(texture, itemWidth, itemHeight, startCharMap) {
		var __result = Module._Label_createWithCharMap(texture.nativePtr, itemWidth, itemHeight, startCharMap);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Label(__result);
		}
	}

	initWithTTF(fontFilePath, fontSize) {
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		var __result = Module._Label_initWithTTF(this.nativePtr, fontFilePathBuffer, fontSize);
		Module._free(fontFilePathBuffer);
		return __result;
	}

	initWithTTFAndEmoji(fontFilePath, emojiFilePath, fontSize) {
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		const emojiFilePathBuffer = Module._malloc(emojiFilePath.length+1);
		Module.stringToUTF8(emojiFilePath, emojiFilePathBuffer, emojiFilePath.length+1);
		var __result = Module._Label_initWithTTFAndEmoji(this.nativePtr, fontFilePathBuffer, emojiFilePathBuffer, fontSize);
		Module._free(fontFilePathBuffer);
		Module._free(emojiFilePathBuffer);
		return __result;
	}

	isOpacityModifyRGB() {
		var __result = Module._Label_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setOpacityModifyRGB(isOpacityModifyRGB) {
		Module._Label_setOpacityModifyRGB(this.nativePtr, isOpacityModifyRGB);
	}

	setWidth(width) {
		Module._Label_setWidth(this.nativePtr, width);
	}

	getWidth() {
		var __result = Module._Label_getWidth(this.nativePtr);
		return __result;
	}

	setHeight(height) {
		Module._Label_setHeight(this.nativePtr, height);
	}

	getHeight() {
		var __result = Module._Label_getHeight(this.nativePtr);
		return __result;
	}

	setDimensions(width, height) {
		Module._Label_setDimensions(this.nativePtr, width, height);
	}

	getDimensions() {
		Module._Label_getDimensions(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getLetter(lettetIndex) {
		var __result = Module._Label_getLetter(this.nativePtr, lettetIndex);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setString(text) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		Module._Label_setString(this.nativePtr, textBuffer);
		Module._free(textBuffer);
	}

	getString() {
		var __result = Module._Label_getString(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTextColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._Label_setTextColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getTextColor() {
		Module._Label_getTextColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setHorizontalAlignment(hAlignment) {
		Module._Label_setHorizontalAlignment(this.nativePtr, hAlignment);
	}

	getHorizontalAlignment() {
		var __result = Module._Label_getHorizontalAlignment(this.nativePtr);
		return __result;
	}

	setVerticalAlignment(vAlignment) {
		Module._Label_setVerticalAlignment(this.nativePtr, vAlignment);
	}

	getVerticalAlignment() {
		var __result = Module._Label_getVerticalAlignment(this.nativePtr);
		return __result;
	}

	setAlignment(hAlignment, vAlignment) {
		Module._Label_setAlignment(this.nativePtr, hAlignment, vAlignment);
	}

	getRenderingFontSize() {
		var __result = Module._Label_getRenderingFontSize(this.nativePtr);
		return __result;
	}

	setAdditionalKerning(space) {
		Module._Label_setAdditionalKerning(this.nativePtr, space);
	}

	getAdditionalKerning() {
		var __result = Module._Label_getAdditionalKerning(this.nativePtr);
		return __result;
	}

	setLineHeight(height) {
		Module._Label_setLineHeight(this.nativePtr, height);
	}

	getLineHeight() {
		var __result = Module._Label_getLineHeight(this.nativePtr);
		return __result;
	}

	setLineSpacing(spacing) {
		Module._Label_setLineSpacing(this.nativePtr, spacing);
	}

	getLineSpacing() {
		var __result = Module._Label_getLineSpacing(this.nativePtr);
		return __result;
	}

	setLineBreakWithoutSpace(breakWithoutSpace) {
		Module._Label_setLineBreakWithoutSpace(this.nativePtr, breakWithoutSpace);
	}

	setMaxLineWidth(maxLineWidth) {
		Module._Label_setMaxLineWidth(this.nativePtr, maxLineWidth);
	}

	getMaxLineWidth() {
		var __result = Module._Label_getMaxLineWidth(this.nativePtr);
		return __result;
	}

	enableWrap(enable) {
		Module._Label_enableWrap(this.nativePtr, enable);
	}

	isWrapEnabled() {
		var __result = Module._Label_isWrapEnabled(this.nativePtr);
		return __result;
	}

	setOverflow(overflow) {
		Module._Label_setOverflow(this.nativePtr, overflow);
	}

	getOverflow() {
		var __result = Module._Label_getOverflow(this.nativePtr);
		return __result;
	}

	enableShadow(shadowColor, offset, blurRadius) {
		var pbshadowColor = PBColor4B.create();
		pbshadowColor.r = shadowColor.r;
		pbshadowColor.g = shadowColor.g;
		pbshadowColor.b = shadowColor.b;
		pbshadowColor.a = shadowColor.a;
		const shadowColorBuffer = PBColor4B.buffer(pbshadowColor);
		var pboffset = PBBKSizeF.create();
		pboffset.width = offset.width;
		pboffset.height = offset.height;
		const offsetBuffer = PBBKSizeF.buffer(pboffset);
		Module._Label_enableShadow(this.nativePtr, shadowColorBuffer, offsetBuffer, blurRadius);
		PBColor4B.freeBuffer(shadowColorBuffer);
		PBBKSizeF.freeBuffer(offsetBuffer);
	}

	enableOutline(outlineColor, outlineSize) {
		var pboutlineColor = PBColor4B.create();
		pboutlineColor.r = outlineColor.r;
		pboutlineColor.g = outlineColor.g;
		pboutlineColor.b = outlineColor.b;
		pboutlineColor.a = outlineColor.a;
		const outlineColorBuffer = PBColor4B.buffer(pboutlineColor);
		Module._Label_enableOutline(this.nativePtr, outlineColorBuffer, outlineSize);
		PBColor4B.freeBuffer(outlineColorBuffer);
	}

	enableGlow(glowColor) {
		var pbglowColor = PBColor4B.create();
		pbglowColor.r = glowColor.r;
		pbglowColor.g = glowColor.g;
		pbglowColor.b = glowColor.b;
		pbglowColor.a = glowColor.a;
		const glowColorBuffer = PBColor4B.buffer(pbglowColor);
		Module._Label_enableGlow(this.nativePtr, glowColorBuffer);
		PBColor4B.freeBuffer(glowColorBuffer);
	}

	enableItalics() {
		Module._Label_enableItalics(this.nativePtr);
	}

	enableBold() {
		Module._Label_enableBold(this.nativePtr);
	}

	enableEllipsis(enable) {
		Module._Label_enableEllipsis(this.nativePtr, enable);
	}

	isElllipsisEnabled() {
		var __result = Module._Label_isElllipsisEnabled(this.nativePtr);
		return __result;
	}

	enableUnderline() {
		Module._Label_enableUnderline(this.nativePtr);
	}

	enableStrikethrough() {
		Module._Label_enableStrikethrough(this.nativePtr);
	}

	disableEffect(effect) {
		Module._Label_disableEffect(this.nativePtr, effect);
	}

	getLabelEffectType() {
		var __result = Module._Label_getLabelEffectType(this.nativePtr);
		return __result;
	}

	getEffectColor() {
		Module._Label_getEffectColor(this.nativePtr, PBColor4F.nativeBuffer);
		return new Color4F(PBColor4F.decode(PBColor4F.nativeBuffer));
	}

	isShadowEnabled() {
		var __result = Module._Label_isShadowEnabled(this.nativePtr);
		return __result;
	}

	getShadowOffset() {
		Module._Label_getShadowOffset(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getShadowBlurRadius() {
		var __result = Module._Label_getShadowBlurRadius(this.nativePtr);
		return __result;
	}

	getShadowColor() {
		Module._Label_getShadowColor(this.nativePtr, PBColor4F.nativeBuffer);
		return new Color4F(PBColor4F.decode(PBColor4F.nativeBuffer));
	}

	getOutlineSize() {
		var __result = Module._Label_getOutlineSize(this.nativePtr);
		return __result;
	}

	setBackgroundImage(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._Label_setBackgroundImage(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	setScale9BackgroundImage(imagePath, capInset) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		var pbcapInset = PBBKRectF.create();
		pbcapInset.left = capInset.left;
		pbcapInset.top = capInset.top;
		pbcapInset.width = capInset.width;
		pbcapInset.height = capInset.height;
		const capInsetBuffer = PBBKRectF.buffer(pbcapInset);
		Module._Label_setScale9BackgroundImage(this.nativePtr, imagePathBuffer, capInsetBuffer);
		Module._free(imagePathBuffer);
		PBBKRectF.freeBuffer(capInsetBuffer);
	}

	setBackgroundImagePadding(left, top, right, bottom) {
		Module._Label_setBackgroundImagePadding(this.nativePtr, left, top, right, bottom);
	}

	removeBackgroundImage() {
		Module._Label_removeBackgroundImage(this.nativePtr);
	}

	getBackgroundImageCapInset() {
		Module._Label_getBackgroundImageCapInset(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	skipDrawOutofScreen(flag) {
		Module._Label_skipDrawOutofScreen(this.nativePtr, flag);
	}

	getStringNumLines() {
		var __result = Module._Label_getStringNumLines(this.nativePtr);
		return __result;
	}

	getStringLength() {
		var __result = Module._Label_getStringLength(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Label_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Label_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Label_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Label_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Label_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Label_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Label_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Label_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Label_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Label_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Label_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Label_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Label_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Label_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Label_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Label_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Label_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Label_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Label_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Label_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Label_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Label_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Label_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Label_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Label_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Label_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Label_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Label_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Label_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Label_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Label_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Label_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Label_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Label_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Label_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Label_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Label_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Label_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Label_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Label_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Label_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Label_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Label_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Label_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Label_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Label_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Label_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Label_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Label_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Label_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Label_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Label_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Label_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Label_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Label_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Label_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Label_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Label_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Label_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Label_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Label_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Label_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Label_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Label_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Label_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Label_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Label_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Label_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Label_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Label_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Label_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Label_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Label_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Label_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Label_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Label_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Label_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Label_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Label_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Label_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Label_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Label_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Label_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Label_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Label_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Label_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Label_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Label_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Label_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Label_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Label_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Label_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Label_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Label_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Label_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Label_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Label_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Label_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Label_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Label_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Label_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Label_activate(this.nativePtr);
	}

	deactivate() {
		Module._Label_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Label_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Layer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Layer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setScaleX(scaleX) {
		Module._Layer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Layer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Layer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Layer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Layer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Layer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Layer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Layer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Layer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Layer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Layer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Layer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Layer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Layer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Layer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Layer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Layer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Layer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Layer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Layer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Layer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Layer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Layer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Layer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Layer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Layer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Layer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Layer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Layer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Layer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Layer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Layer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Layer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Layer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Layer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Layer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Layer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Layer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Layer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Layer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Layer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Layer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Layer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Layer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Layer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Layer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Layer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Layer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Layer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Layer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Layer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Layer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Layer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Layer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Layer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Layer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Layer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Layer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Layer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Layer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Layer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Layer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Layer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Layer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Layer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Layer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Layer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Layer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Layer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Layer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Layer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Layer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Layer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Layer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Layer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Layer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Layer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Layer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Layer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Layer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Layer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Layer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Layer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Layer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Layer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Layer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Layer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Layer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Layer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Layer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Layer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Layer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Layer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Layer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Layer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Layer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Layer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Layer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Layer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Layer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Layer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Layer_activate(this.nativePtr);
	}

	deactivate() {
		Module._Layer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Layer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class LayerColor {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._LayerColor_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var __result = Module._LayerColor_create(colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayerColor(__result);
		}
	}

	changeWidth(w) {
		Module._LayerColor_changeWidth(this.nativePtr, w);
	}

	changeHeight(h) {
		Module._LayerColor_changeHeight(this.nativePtr, h);
	}

	changeWidthAndHeight(w, h) {
		Module._LayerColor_changeWidthAndHeight(this.nativePtr, w, h);
	}

	setScaleX(scaleX) {
		Module._LayerColor_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._LayerColor_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._LayerColor_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._LayerColor_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._LayerColor_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._LayerColor_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._LayerColor_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._LayerColor_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._LayerColor_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._LayerColor_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._LayerColor_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._LayerColor_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._LayerColor_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._LayerColor_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._LayerColor_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._LayerColor_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._LayerColor_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._LayerColor_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._LayerColor_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._LayerColor_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._LayerColor_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._LayerColor_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._LayerColor_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._LayerColor_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._LayerColor_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._LayerColor_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._LayerColor_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._LayerColor_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._LayerColor_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._LayerColor_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._LayerColor_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._LayerColor_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._LayerColor_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._LayerColor_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._LayerColor_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._LayerColor_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._LayerColor_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._LayerColor_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._LayerColor_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._LayerColor_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._LayerColor_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._LayerColor_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._LayerColor_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._LayerColor_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._LayerColor_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._LayerColor_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._LayerColor_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._LayerColor_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._LayerColor_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._LayerColor_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._LayerColor_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._LayerColor_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._LayerColor_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._LayerColor_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._LayerColor_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._LayerColor_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._LayerColor_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._LayerColor_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._LayerColor_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._LayerColor_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._LayerColor_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._LayerColor_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._LayerColor_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._LayerColor_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._LayerColor_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._LayerColor_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._LayerColor_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._LayerColor_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._LayerColor_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LayerColor_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._LayerColor_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._LayerColor_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._LayerColor_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._LayerColor_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._LayerColor_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._LayerColor_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._LayerColor_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._LayerColor_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._LayerColor_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._LayerColor_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._LayerColor_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._LayerColor_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._LayerColor_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._LayerColor_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._LayerColor_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._LayerColor_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._LayerColor_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._LayerColor_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._LayerColor_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._LayerColor_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._LayerColor_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._LayerColor_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._LayerColor_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._LayerColor_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._LayerColor_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._LayerColor_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._LayerColor_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._LayerColor_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._LayerColor_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._LayerColor_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._LayerColor_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._LayerColor_activate(this.nativePtr);
	}

	deactivate() {
		Module._LayerColor_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._LayerColor_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class LayerGradient {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._LayerGradient_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(start, end, v) {
		var pbstart = PBColor4B.create();
		pbstart.r = start.r;
		pbstart.g = start.g;
		pbstart.b = start.b;
		pbstart.a = start.a;
		const startBuffer = PBColor4B.buffer(pbstart);
		var pbend = PBColor4B.create();
		pbend.r = end.r;
		pbend.g = end.g;
		pbend.b = end.b;
		pbend.a = end.a;
		const endBuffer = PBColor4B.buffer(pbend);
		var pbv = PBVector2.create();
		pbv.x = v.x;
		pbv.y = v.y;
		const vBuffer = PBVector2.buffer(pbv);
		var __result = Module._LayerGradient_create(startBuffer, endBuffer, vBuffer);
		PBColor4B.freeBuffer(startBuffer);
		PBColor4B.freeBuffer(endBuffer);
		PBVector2.freeBuffer(vBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayerGradient(__result);
		}
	}

	setCompressedInterpolation(compressedInterpolation) {
		Module._LayerGradient_setCompressedInterpolation(this.nativePtr, compressedInterpolation);
	}

	isCompressedInterpolation() {
		var __result = Module._LayerGradient_isCompressedInterpolation(this.nativePtr);
		return __result;
	}

	setStartColor(startColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		Module._LayerGradient_setStartColor(this.nativePtr, startColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
	}

	getStartColor() {
		Module._LayerGradient_getStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setEndColor(endColor) {
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._LayerGradient_setEndColor(this.nativePtr, endColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getEndColor() {
		Module._LayerGradient_getEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setStartOpacity(startOpacity) {
		Module._LayerGradient_setStartOpacity(this.nativePtr, startOpacity);
	}

	getStartOpacity() {
		var __result = Module._LayerGradient_getStartOpacity(this.nativePtr);
		return __result;
	}

	setEndOpacity(endOpacity) {
		Module._LayerGradient_setEndOpacity(this.nativePtr, endOpacity);
	}

	getEndOpacity() {
		var __result = Module._LayerGradient_getEndOpacity(this.nativePtr);
		return __result;
	}

	setVector(alongVector) {
		var pbalongVector = PBVector2.create();
		pbalongVector.x = alongVector.x;
		pbalongVector.y = alongVector.y;
		const alongVectorBuffer = PBVector2.buffer(pbalongVector);
		Module._LayerGradient_setVector(this.nativePtr, alongVectorBuffer);
		PBVector2.freeBuffer(alongVectorBuffer);
	}

	getVector() {
		Module._LayerGradient_getVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	changeWidth(w) {
		Module._LayerGradient_changeWidth(this.nativePtr, w);
	}

	changeHeight(h) {
		Module._LayerGradient_changeHeight(this.nativePtr, h);
	}

	changeWidthAndHeight(w, h) {
		Module._LayerGradient_changeWidthAndHeight(this.nativePtr, w, h);
	}

	setScaleX(scaleX) {
		Module._LayerGradient_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._LayerGradient_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._LayerGradient_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._LayerGradient_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._LayerGradient_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._LayerGradient_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._LayerGradient_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._LayerGradient_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._LayerGradient_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._LayerGradient_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._LayerGradient_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._LayerGradient_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._LayerGradient_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._LayerGradient_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._LayerGradient_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._LayerGradient_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._LayerGradient_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._LayerGradient_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._LayerGradient_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._LayerGradient_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._LayerGradient_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._LayerGradient_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._LayerGradient_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._LayerGradient_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._LayerGradient_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._LayerGradient_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._LayerGradient_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._LayerGradient_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._LayerGradient_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._LayerGradient_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._LayerGradient_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._LayerGradient_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._LayerGradient_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._LayerGradient_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._LayerGradient_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._LayerGradient_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._LayerGradient_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._LayerGradient_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._LayerGradient_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._LayerGradient_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._LayerGradient_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._LayerGradient_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._LayerGradient_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._LayerGradient_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._LayerGradient_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._LayerGradient_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._LayerGradient_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._LayerGradient_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._LayerGradient_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._LayerGradient_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._LayerGradient_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._LayerGradient_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._LayerGradient_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._LayerGradient_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._LayerGradient_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._LayerGradient_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._LayerGradient_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._LayerGradient_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._LayerGradient_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._LayerGradient_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._LayerGradient_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._LayerGradient_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._LayerGradient_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._LayerGradient_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._LayerGradient_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._LayerGradient_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._LayerGradient_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._LayerGradient_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._LayerGradient_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LayerGradient_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._LayerGradient_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._LayerGradient_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._LayerGradient_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._LayerGradient_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._LayerGradient_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._LayerGradient_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._LayerGradient_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._LayerGradient_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._LayerGradient_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._LayerGradient_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._LayerGradient_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._LayerGradient_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._LayerGradient_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._LayerGradient_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._LayerGradient_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._LayerGradient_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._LayerGradient_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._LayerGradient_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._LayerGradient_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._LayerGradient_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._LayerGradient_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._LayerGradient_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._LayerGradient_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._LayerGradient_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._LayerGradient_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._LayerGradient_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._LayerGradient_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._LayerGradient_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._LayerGradient_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._LayerGradient_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._LayerGradient_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._LayerGradient_activate(this.nativePtr);
	}

	deactivate() {
		Module._LayerGradient_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._LayerGradient_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class LayerRadialGradient {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._LayerRadialGradient_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(startColor, endColor, radius, center, expand) {
		var pbstartColor = PBColor4B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		pbstartColor.a = startColor.a;
		const startColorBuffer = PBColor4B.buffer(pbstartColor);
		var pbendColor = PBColor4B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		pbendColor.a = endColor.a;
		const endColorBuffer = PBColor4B.buffer(pbendColor);
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._LayerRadialGradient_create(startColorBuffer, endColorBuffer, radius, centerBuffer, expand);
		PBColor4B.freeBuffer(startColorBuffer);
		PBColor4B.freeBuffer(endColorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayerRadialGradient(__result);
		}
	}

	setStartOpacity(opacity) {
		Module._LayerRadialGradient_setStartOpacity(this.nativePtr, opacity);
	}

	getStartOpacity() {
		var __result = Module._LayerRadialGradient_getStartOpacity(this.nativePtr);
		return __result;
	}

	setEndOpacity(opacity) {
		Module._LayerRadialGradient_setEndOpacity(this.nativePtr, opacity);
	}

	getEndOpacity() {
		var __result = Module._LayerRadialGradient_getEndOpacity(this.nativePtr);
		return __result;
	}

	setRadius(radius) {
		Module._LayerRadialGradient_setRadius(this.nativePtr, radius);
	}

	getRadius() {
		var __result = Module._LayerRadialGradient_getRadius(this.nativePtr);
		return __result;
	}

	setCenter(center) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		Module._LayerRadialGradient_setCenter(this.nativePtr, centerBuffer);
		PBVector2.freeBuffer(centerBuffer);
	}

	getCenter() {
		Module._LayerRadialGradient_getCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setExpand(expand) {
		Module._LayerRadialGradient_setExpand(this.nativePtr, expand);
	}

	getExpand() {
		var __result = Module._LayerRadialGradient_getExpand(this.nativePtr);
		return __result;
	}

	setStartColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LayerRadialGradient_setStartColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getStartColor() {
		Module._LayerRadialGradient_getStartColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getStartColor3B() {
		Module._LayerRadialGradient_getStartColor3B(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setEndColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LayerRadialGradient_setEndColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getEndColor() {
		Module._LayerRadialGradient_getEndColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getEndColor3B() {
		Module._LayerRadialGradient_getEndColor3B(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setScaleX(scaleX) {
		Module._LayerRadialGradient_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._LayerRadialGradient_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._LayerRadialGradient_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._LayerRadialGradient_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._LayerRadialGradient_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._LayerRadialGradient_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._LayerRadialGradient_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._LayerRadialGradient_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._LayerRadialGradient_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._LayerRadialGradient_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._LayerRadialGradient_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._LayerRadialGradient_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._LayerRadialGradient_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._LayerRadialGradient_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._LayerRadialGradient_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._LayerRadialGradient_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._LayerRadialGradient_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._LayerRadialGradient_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._LayerRadialGradient_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._LayerRadialGradient_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._LayerRadialGradient_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._LayerRadialGradient_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._LayerRadialGradient_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._LayerRadialGradient_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._LayerRadialGradient_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._LayerRadialGradient_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._LayerRadialGradient_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._LayerRadialGradient_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._LayerRadialGradient_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._LayerRadialGradient_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._LayerRadialGradient_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._LayerRadialGradient_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._LayerRadialGradient_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._LayerRadialGradient_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._LayerRadialGradient_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._LayerRadialGradient_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._LayerRadialGradient_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._LayerRadialGradient_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._LayerRadialGradient_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._LayerRadialGradient_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._LayerRadialGradient_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._LayerRadialGradient_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._LayerRadialGradient_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._LayerRadialGradient_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._LayerRadialGradient_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._LayerRadialGradient_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._LayerRadialGradient_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._LayerRadialGradient_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._LayerRadialGradient_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._LayerRadialGradient_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._LayerRadialGradient_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._LayerRadialGradient_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._LayerRadialGradient_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._LayerRadialGradient_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._LayerRadialGradient_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._LayerRadialGradient_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._LayerRadialGradient_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._LayerRadialGradient_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._LayerRadialGradient_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._LayerRadialGradient_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._LayerRadialGradient_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._LayerRadialGradient_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._LayerRadialGradient_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._LayerRadialGradient_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._LayerRadialGradient_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._LayerRadialGradient_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._LayerRadialGradient_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._LayerRadialGradient_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._LayerRadialGradient_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LayerRadialGradient_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._LayerRadialGradient_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._LayerRadialGradient_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._LayerRadialGradient_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._LayerRadialGradient_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._LayerRadialGradient_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._LayerRadialGradient_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._LayerRadialGradient_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._LayerRadialGradient_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._LayerRadialGradient_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._LayerRadialGradient_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._LayerRadialGradient_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._LayerRadialGradient_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._LayerRadialGradient_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._LayerRadialGradient_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._LayerRadialGradient_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._LayerRadialGradient_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._LayerRadialGradient_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._LayerRadialGradient_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._LayerRadialGradient_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._LayerRadialGradient_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._LayerRadialGradient_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._LayerRadialGradient_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._LayerRadialGradient_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._LayerRadialGradient_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._LayerRadialGradient_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._LayerRadialGradient_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._LayerRadialGradient_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._LayerRadialGradient_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._LayerRadialGradient_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._LayerRadialGradient_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._LayerRadialGradient_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._LayerRadialGradient_activate(this.nativePtr);
	}

	deactivate() {
		Module._LayerRadialGradient_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._LayerRadialGradient_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Light2D {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Light2D_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(filename) {
		const filenameBuffer = Module._malloc(filename.length+1);
		Module.stringToUTF8(filename, filenameBuffer, filename.length+1);
		var __result = Module._Light2D_create(filenameBuffer);
		Module._free(filenameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Light2D(__result);
		}
	}

	setOpacityModifyRGB(modify) {
		Module._Light2D_setOpacityModifyRGB(this.nativePtr, modify);
	}

	isOpacityModifyRGB() {
		var __result = Module._Light2D_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setTexture(texture) {
		Module._Light2D_setTexture(this.nativePtr, texture.nativePtr);
	}

	getTexture() {
		var __result = Module._Light2D_getTexture(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture2D(__result);
		}
	}

	setBackgroundTexture(filename) {
		const filenameBuffer = Module._malloc(filename.length+1);
		Module.stringToUTF8(filename, filenameBuffer, filename.length+1);
		Module._Light2D_setBackgroundTexture(this.nativePtr, filenameBuffer);
		Module._free(filenameBuffer);
	}

	setMode(p_mode) {
		Module._Light2D_setMode(this.nativePtr, p_mode);
	}

	getMode() {
		var __result = Module._Light2D_getMode(this.nativePtr);
		return __result;
	}

	setShadowFilter(p_filter) {
		Module._Light2D_setShadowFilter(this.nativePtr, p_filter);
	}

	getShadowFilter() {
		var __result = Module._Light2D_getShadowFilter(this.nativePtr);
		return __result;
	}

	setShadowColor(p_shadow_color) {
		var pbp_shadow_color = PBColor4B.create();
		pbp_shadow_color.r = p_shadow_color.r;
		pbp_shadow_color.g = p_shadow_color.g;
		pbp_shadow_color.b = p_shadow_color.b;
		pbp_shadow_color.a = p_shadow_color.a;
		const p_shadow_colorBuffer = PBColor4B.buffer(pbp_shadow_color);
		Module._Light2D_setShadowColor(this.nativePtr, p_shadow_colorBuffer);
		PBColor4B.freeBuffer(p_shadow_colorBuffer);
	}

	getShadowColor() {
		Module._Light2D_getShadowColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setCastShadowMask(p_mask) {
		Module._Light2D_setCastShadowMask(this.nativePtr, p_mask);
	}

	getCastShadowMask() {
		var __result = Module._Light2D_getCastShadowMask(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Light2D_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Light2D_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Light2D_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Light2D_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Light2D_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Light2D_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Light2D_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Light2D_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Light2D_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Light2D_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Light2D_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Light2D_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Light2D_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Light2D_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Light2D_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Light2D_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Light2D_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Light2D_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Light2D_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Light2D_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Light2D_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Light2D_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Light2D_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Light2D_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Light2D_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Light2D_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Light2D_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Light2D_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Light2D_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Light2D_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Light2D_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Light2D_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Light2D_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Light2D_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Light2D_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Light2D_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Light2D_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Light2D_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Light2D_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Light2D_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Light2D_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Light2D_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Light2D_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Light2D_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Light2D_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Light2D_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Light2D_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Light2D_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Light2D_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Light2D_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Light2D_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Light2D_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Light2D_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Light2D_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Light2D_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Light2D_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Light2D_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Light2D_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Light2D_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Light2D_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Light2D_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Light2D_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Light2D_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Light2D_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Light2D_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Light2D_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Light2D_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Light2D_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Light2D_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Light2D_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Light2D_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Light2D_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Light2D_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Light2D_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Light2D_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Light2D_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Light2D_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Light2D_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Light2D_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Light2D_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Light2D_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Light2D_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Light2D_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Light2D_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Light2D_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Light2D_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Light2D_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Light2D_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Light2D_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Light2D_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Light2D_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Light2D_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Light2D_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Light2D_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Light2D_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Light2D_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Light2D_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Light2D_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Light2D_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Light2D_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Light2D_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Light2D_activate(this.nativePtr);
	}

	deactivate() {
		Module._Light2D_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Light2D_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class ProgressTimer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._ProgressTimer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(sprite) {
		var __result = Module._ProgressTimer_create(sprite.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ProgressTimer(__result);
		}
	}

	getType() {
		var __result = Module._ProgressTimer_getType(this.nativePtr);
		return __result;
	}

	getPercentage() {
		var __result = Module._ProgressTimer_getPercentage(this.nativePtr);
		return __result;
	}

	getSprite() {
		var __result = Module._ProgressTimer_getSprite(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setPercentage(percentage) {
		Module._ProgressTimer_setPercentage(this.nativePtr, percentage);
	}

	setSprite(sprite) {
		Module._ProgressTimer_setSprite(this.nativePtr, sprite.nativePtr);
	}

	setType(type) {
		Module._ProgressTimer_setType(this.nativePtr, type);
	}

	isReverseDirection() {
		var __result = Module._ProgressTimer_isReverseDirection(this.nativePtr);
		return __result;
	}

	setReverseDirection(value) {
		Module._ProgressTimer_setReverseDirection(this.nativePtr, value);
	}

	setMidpoint(point) {
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._ProgressTimer_setMidpoint(this.nativePtr, pointBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	getMidpoint() {
		Module._ProgressTimer_getMidpoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setBarChangeRate(barChangeRate) {
		var pbbarChangeRate = PBVector2.create();
		pbbarChangeRate.x = barChangeRate.x;
		pbbarChangeRate.y = barChangeRate.y;
		const barChangeRateBuffer = PBVector2.buffer(pbbarChangeRate);
		Module._ProgressTimer_setBarChangeRate(this.nativePtr, barChangeRateBuffer);
		PBVector2.freeBuffer(barChangeRateBuffer);
	}

	getBarChangeRate() {
		Module._ProgressTimer_getBarChangeRate(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScaleX(scaleX) {
		Module._ProgressTimer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._ProgressTimer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._ProgressTimer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._ProgressTimer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._ProgressTimer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._ProgressTimer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._ProgressTimer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._ProgressTimer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._ProgressTimer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._ProgressTimer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._ProgressTimer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._ProgressTimer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._ProgressTimer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._ProgressTimer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._ProgressTimer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._ProgressTimer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._ProgressTimer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._ProgressTimer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._ProgressTimer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._ProgressTimer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._ProgressTimer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._ProgressTimer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._ProgressTimer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._ProgressTimer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._ProgressTimer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._ProgressTimer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._ProgressTimer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._ProgressTimer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._ProgressTimer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._ProgressTimer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._ProgressTimer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._ProgressTimer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._ProgressTimer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._ProgressTimer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._ProgressTimer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._ProgressTimer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._ProgressTimer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._ProgressTimer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._ProgressTimer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._ProgressTimer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._ProgressTimer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._ProgressTimer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._ProgressTimer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._ProgressTimer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._ProgressTimer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._ProgressTimer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._ProgressTimer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._ProgressTimer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._ProgressTimer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._ProgressTimer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._ProgressTimer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._ProgressTimer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._ProgressTimer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._ProgressTimer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._ProgressTimer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._ProgressTimer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._ProgressTimer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._ProgressTimer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._ProgressTimer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._ProgressTimer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._ProgressTimer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._ProgressTimer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._ProgressTimer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._ProgressTimer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._ProgressTimer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._ProgressTimer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._ProgressTimer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._ProgressTimer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._ProgressTimer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._ProgressTimer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._ProgressTimer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._ProgressTimer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._ProgressTimer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._ProgressTimer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._ProgressTimer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._ProgressTimer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._ProgressTimer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._ProgressTimer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._ProgressTimer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._ProgressTimer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._ProgressTimer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._ProgressTimer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._ProgressTimer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._ProgressTimer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._ProgressTimer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._ProgressTimer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._ProgressTimer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._ProgressTimer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._ProgressTimer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._ProgressTimer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._ProgressTimer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._ProgressTimer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._ProgressTimer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._ProgressTimer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._ProgressTimer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._ProgressTimer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._ProgressTimer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._ProgressTimer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._ProgressTimer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._ProgressTimer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._ProgressTimer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._ProgressTimer_activate(this.nativePtr);
	}

	deactivate() {
		Module._ProgressTimer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._ProgressTimer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RenderTargetNode {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RenderTargetNode_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(renderTargetName) {
		const renderTargetNameBuffer = Module._malloc(renderTargetName.length+1);
		Module.stringToUTF8(renderTargetName, renderTargetNameBuffer, renderTargetName.length+1);
		var __result = Module._RenderTargetNode_create(renderTargetNameBuffer);
		Module._free(renderTargetNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RenderTargetNode(__result);
		}
	}

	static createWithSize(renderTargetName, width, height) {
		const renderTargetNameBuffer = Module._malloc(renderTargetName.length+1);
		Module.stringToUTF8(renderTargetName, renderTargetNameBuffer, renderTargetName.length+1);
		var __result = Module._RenderTargetNode_createWithSize(renderTargetNameBuffer, width, height);
		Module._free(renderTargetNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RenderTargetNode(__result);
		}
	}

	setRenderTargetName(renderTargetName) {
		const renderTargetNameBuffer = Module._malloc(renderTargetName.length+1);
		Module.stringToUTF8(renderTargetName, renderTargetNameBuffer, renderTargetName.length+1);
		Module._RenderTargetNode_setRenderTargetName(this.nativePtr, renderTargetNameBuffer);
		Module._free(renderTargetNameBuffer);
	}

	setRenderTargetInitWithClearColor(r, g, b, a) {
		Module._RenderTargetNode_setRenderTargetInitWithClearColor(this.nativePtr, r, g, b, a);
	}

	setRenderTargetInitWithCopyInput() {
		Module._RenderTargetNode_setRenderTargetInitWithCopyInput(this.nativePtr);
	}

	setSize(width, height) {
		Module._RenderTargetNode_setSize(this.nativePtr, width, height);
	}

	enableForceClearRenderTarget(flag) {
		Module._RenderTargetNode_enableForceClearRenderTarget(this.nativePtr, flag);
	}

	enableDirtyDraw(flag) {
		Module._RenderTargetNode_enableDirtyDraw(this.nativePtr, flag);
	}

	requestDraw() {
		Module._RenderTargetNode_requestDraw(this.nativePtr);
	}

	setReadPixelsCallback(callback) {
		let callbackFunc = Callback1Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vii");
		Module._RenderTargetNode_setReadPixelsCallback(this.nativePtr, callbackPtr);
	}

	requestReadPixels() {
		var __result = Module._RenderTargetNode_requestReadPixels(this.nativePtr);
		return __result;
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RenderTargetNode_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RenderTargetNode_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RenderTargetNode_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RenderTargetNode_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RenderTargetNode_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RenderTargetNode_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RenderTargetNode_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RenderTargetNode_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RenderTargetNode_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RenderTargetNode_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RenderTargetNode_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RenderTargetNode_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RenderTargetNode_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RenderTargetNode_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RenderTargetNode_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RenderTargetNode_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RenderTargetNode_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RenderTargetNode_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RenderTargetNode_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RenderTargetNode_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RenderTargetNode_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RenderTargetNode_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RenderTargetNode_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RenderTargetNode_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RenderTargetNode_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RenderTargetNode_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RenderTargetNode_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RenderTargetNode_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RenderTargetNode_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RenderTargetNode_activate(this.nativePtr);
	}

	deactivate() {
		Module._RenderTargetNode_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RenderTargetNode_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Scale9Sprite {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Scale9Sprite_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createWithCapInset(capInsets, file) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		var __result = Module._Scale9Sprite_createWithCapInset(capInsetsBuffer, fileBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
		Module._free(fileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scale9Sprite(__result);
		}
	}

	static create(file) {
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		var __result = Module._Scale9Sprite_create(fileBuffer);
		Module._free(fileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scale9Sprite(__result);
		}
	}

	static createWithSpriteFrame(spriteFrame) {
		var __result = Module._Scale9Sprite_createWithSpriteFrame(spriteFrame.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scale9Sprite(__result);
		}
	}

	resizableSpriteWithCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		var __result = Module._Scale9Sprite_resizableSpriteWithCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scale9Sprite(__result);
		}
	}

	updateWithSprite(sprite, rect, rotated, offset, originalSize, capInsets) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		var pboffset = PBVector2.create();
		pboffset.x = offset.x;
		pboffset.y = offset.y;
		const offsetBuffer = PBVector2.buffer(pboffset);
		var pboriginalSize = PBBKSizeF.create();
		pboriginalSize.width = originalSize.width;
		pboriginalSize.height = originalSize.height;
		const originalSizeBuffer = PBBKSizeF.buffer(pboriginalSize);
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		var __result = Module._Scale9Sprite_updateWithSprite(this.nativePtr, sprite.nativePtr, rectBuffer, rotated, offsetBuffer, originalSizeBuffer, capInsetsBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		PBVector2.freeBuffer(offsetBuffer);
		PBBKSizeF.freeBuffer(originalSizeBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
		return __result;
	}

	setSpriteFrameWithCapInsets(spriteFrame, capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._Scale9Sprite_setSpriteFrameWithCapInsets(this.nativePtr, spriteFrame.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	setState(state) {
		Module._Scale9Sprite_setState(this.nativePtr, state);
	}

	getState() {
		var __result = Module._Scale9Sprite_getState(this.nativePtr);
		return __result;
	}

	getOriginalSize() {
		Module._Scale9Sprite_getOriginalSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPreferredSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._Scale9Sprite_setPreferredSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getPreferredSize() {
		Module._Scale9Sprite_getPreferredSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setInsetLeft(leftInset) {
		Module._Scale9Sprite_setInsetLeft(this.nativePtr, leftInset);
	}

	getInsetLeft() {
		var __result = Module._Scale9Sprite_getInsetLeft(this.nativePtr);
		return __result;
	}

	setInsetTop(topInset) {
		Module._Scale9Sprite_setInsetTop(this.nativePtr, topInset);
	}

	getInsetTop() {
		var __result = Module._Scale9Sprite_getInsetTop(this.nativePtr);
		return __result;
	}

	setInsetRight(rightInset) {
		Module._Scale9Sprite_setInsetRight(this.nativePtr, rightInset);
	}

	getInsetRight() {
		var __result = Module._Scale9Sprite_getInsetRight(this.nativePtr);
		return __result;
	}

	setInsetBottom(bottomInset) {
		Module._Scale9Sprite_setInsetBottom(this.nativePtr, bottomInset);
	}

	getInsetBottom() {
		var __result = Module._Scale9Sprite_getInsetBottom(this.nativePtr);
		return __result;
	}

	setRenderingType(type) {
		Module._Scale9Sprite_setRenderingType(this.nativePtr, type);
	}

	getRenderingType() {
		var __result = Module._Scale9Sprite_getRenderingType(this.nativePtr);
		return __result;
	}

	setScale9Enabled(enabled) {
		Module._Scale9Sprite_setScale9Enabled(this.nativePtr, enabled);
	}

	isScale9Enabled() {
		var __result = Module._Scale9Sprite_isScale9Enabled(this.nativePtr);
		return __result;
	}

	getSprite() {
		var __result = Module._Scale9Sprite_getSprite(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setCapInsets(insets) {
		var pbinsets = PBBKRectF.create();
		pbinsets.left = insets.left;
		pbinsets.top = insets.top;
		pbinsets.width = insets.width;
		pbinsets.height = insets.height;
		const insetsBuffer = PBBKRectF.buffer(pbinsets);
		Module._Scale9Sprite_setCapInsets(this.nativePtr, insetsBuffer);
		PBBKRectF.freeBuffer(insetsBuffer);
	}

	getCapInsets() {
		Module._Scale9Sprite_getCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	forceLoadTextureSync(flag) {
		Module._Scale9Sprite_forceLoadTextureSync(this.nativePtr, flag);
	}

	setTexture(texture) {
		Module._Scale9Sprite_setTexture(this.nativePtr, texture.nativePtr);
	}

	setTextureWithFile(file) {
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		Module._Scale9Sprite_setTextureWithFile(this.nativePtr, fileBuffer);
		Module._free(fileBuffer);
	}

	setTextureRect(rect, rotated, untrimmedSize) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		var pbuntrimmedSize = PBBKSizeF.create();
		pbuntrimmedSize.width = untrimmedSize.width;
		pbuntrimmedSize.height = untrimmedSize.height;
		const untrimmedSizeBuffer = PBBKSizeF.buffer(pbuntrimmedSize);
		Module._Scale9Sprite_setTextureRect(this.nativePtr, rectBuffer, rotated, untrimmedSizeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		PBBKSizeF.freeBuffer(untrimmedSizeBuffer);
	}

	setVertexRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Scale9Sprite_setVertexRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	setCenterRectNormalized(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Scale9Sprite_setCenterRectNormalized(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRectNormalized() {
		Module._Scale9Sprite_getCenterRectNormalized(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setCenterRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Scale9Sprite_setCenterRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRect() {
		Module._Scale9Sprite_getCenterRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setSpriteFrame(frame) {
		Module._Scale9Sprite_setSpriteFrame(this.nativePtr, frame.nativePtr);
	}

	getSpriteFrame() {
		var __result = Module._Scale9Sprite_getSpriteFrame(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SpriteFrame(__result);
		}
	}

	isFrameDisplayed(frame) {
		var __result = Module._Scale9Sprite_isFrameDisplayed(this.nativePtr, frame.nativePtr);
		return __result;
	}

	setExternalProgram(name, vertexShaderPath, fragmentShaderPath) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		const vertexShaderPathBuffer = Module._malloc(vertexShaderPath.length+1);
		Module.stringToUTF8(vertexShaderPath, vertexShaderPathBuffer, vertexShaderPath.length+1);
		const fragmentShaderPathBuffer = Module._malloc(fragmentShaderPath.length+1);
		Module.stringToUTF8(fragmentShaderPath, fragmentShaderPathBuffer, fragmentShaderPath.length+1);
		Module._Scale9Sprite_setExternalProgram(this.nativePtr, nameBuffer, vertexShaderPathBuffer, fragmentShaderPathBuffer);
		Module._free(nameBuffer);
		Module._free(vertexShaderPathBuffer);
		Module._free(fragmentShaderPathBuffer);
	}

	resetProgram() {
		Module._Scale9Sprite_resetProgram(this.nativePtr);
	}

	isFlippedX() {
		var __result = Module._Scale9Sprite_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Scale9Sprite_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedY() {
		var __result = Module._Scale9Sprite_isFlippedY(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Scale9Sprite_setFlippedY(this.nativePtr, flippedY);
	}

	setPolygonInfo(vertices, colors, texCoords, indices, verticesCount, indicesCount) {
		const verticesBuffer = Module._malloc(vertices.length);
		Module.writeArrayToMemory(vertices, verticesBuffer);
		const colorsBuffer = Module._malloc(colors.length);
		Module.writeArrayToMemory(colors, colorsBuffer);
		const texCoordsBuffer = Module._malloc(texCoords.length);
		Module.writeArrayToMemory(texCoords, texCoordsBuffer);
		const indicesBuffer = Module._malloc(indices.length);
		Module.writeArrayToMemory(indices, indicesBuffer);
		Module._Scale9Sprite_setPolygonInfo(this.nativePtr, verticesBuffer, colorsBuffer, texCoordsBuffer, indicesBuffer, verticesCount, indicesCount);
		Module._free(verticesBuffer);
		Module._free(colorsBuffer);
		Module._free(texCoordsBuffer);
		Module._free(indicesBuffer);
	}

	setStretchEnabled(enabled) {
		Module._Scale9Sprite_setStretchEnabled(this.nativePtr, enabled);
	}

	isStretchEnabled() {
		var __result = Module._Scale9Sprite_isStretchEnabled(this.nativePtr);
		return __result;
	}

	setOpacityModifyRGB(modify) {
		Module._Scale9Sprite_setOpacityModifyRGB(this.nativePtr, modify);
	}

	isOpacityModifyRGB() {
		var __result = Module._Scale9Sprite_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Scale9Sprite_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Scale9Sprite_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Scale9Sprite_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Scale9Sprite_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Scale9Sprite_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Scale9Sprite_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Scale9Sprite_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Scale9Sprite_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Scale9Sprite_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Scale9Sprite_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Scale9Sprite_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Scale9Sprite_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Scale9Sprite_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Scale9Sprite_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Scale9Sprite_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Scale9Sprite_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Scale9Sprite_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Scale9Sprite_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Scale9Sprite_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Scale9Sprite_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Scale9Sprite_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Scale9Sprite_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Scale9Sprite_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Scale9Sprite_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Scale9Sprite_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Scale9Sprite_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Scale9Sprite_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Scale9Sprite_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Scale9Sprite_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Scale9Sprite_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Scale9Sprite_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Scale9Sprite_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Scale9Sprite_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Scale9Sprite_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Scale9Sprite_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Scale9Sprite_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Scale9Sprite_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Scale9Sprite_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Scale9Sprite_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Scale9Sprite_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Scale9Sprite_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Scale9Sprite_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Scale9Sprite_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Scale9Sprite_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Scale9Sprite_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Scale9Sprite_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Scale9Sprite_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Scale9Sprite_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Scale9Sprite_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Scale9Sprite_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Scale9Sprite_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Scale9Sprite_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Scale9Sprite_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Scale9Sprite_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Scale9Sprite_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Scale9Sprite_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Scale9Sprite_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Scale9Sprite_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Scale9Sprite_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Scale9Sprite_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Scale9Sprite_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Scale9Sprite_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Scale9Sprite_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Scale9Sprite_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Scale9Sprite_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Scale9Sprite_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Scale9Sprite_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Scale9Sprite_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Scale9Sprite_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Scale9Sprite_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Scale9Sprite_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Scale9Sprite_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Scale9Sprite_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Scale9Sprite_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Scale9Sprite_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Scale9Sprite_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Scale9Sprite_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Scale9Sprite_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Scale9Sprite_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Scale9Sprite_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Scale9Sprite_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Scale9Sprite_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Scale9Sprite_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Scale9Sprite_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Scale9Sprite_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Scale9Sprite_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Scale9Sprite_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Scale9Sprite_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Scale9Sprite_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Scale9Sprite_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Scale9Sprite_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Scale9Sprite_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Scale9Sprite_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Scale9Sprite_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Scale9Sprite_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Scale9Sprite_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Scale9Sprite_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Scale9Sprite_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Scale9Sprite_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Scale9Sprite_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Scale9Sprite_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Scale9Sprite_activate(this.nativePtr);
	}

	deactivate() {
		Module._Scale9Sprite_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Scale9Sprite_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Scene {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Scene_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Scene_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scene(__result);
		}
	}

	static createWithSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Scene_createWithSize(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Scene(__result);
		}
	}

	getAttachedCamera() {
		var __result = Module._Scene_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	getDefaultCamera() {
		var __result = Module._Scene_getDefaultCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	getCameraWithIndex(index) {
		var __result = Module._Scene_getCameraWithIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	getCameraCount() {
		var __result = Module._Scene_getCameraCount(this.nativePtr);
		return __result;
	}

	get2DPhysicsWorld() {
		var __result = Module._Scene_get2DPhysicsWorld(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DWorld(__result);
		}
	}

	addLight2D(light2D) {
		Module._Scene_addLight2D(this.nativePtr, light2D.nativePtr);
	}

	enableHDR(HDR) {
		Module._Scene_enableHDR(this.nativePtr, HDR);
	}

	isHDREnabled() {
		var __result = Module._Scene_isHDREnabled(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Scene_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Scene_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Scene_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Scene_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Scene_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Scene_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Scene_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Scene_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Scene_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Scene_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Scene_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Scene_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Scene_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Scene_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Scene_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Scene_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Scene_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Scene_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Scene_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Scene_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Scene_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Scene_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Scene_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Scene_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Scene_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Scene_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Scene_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Scene_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Scene_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Scene_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Scene_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Scene_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Scene_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Scene_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Scene_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Scene_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Scene_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Scene_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Scene_isVisible(this.nativePtr);
		return __result;
	}

	setCameraMask(mask) {
		Module._Scene_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Scene_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Scene_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Scene_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Scene_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Scene_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Scene_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Scene_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Scene_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Scene_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Scene_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Scene_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Scene_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Scene_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Scene_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Scene_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Scene_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Scene_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Scene_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Scene_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Scene_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Scene_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Scene_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Scene_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Scene_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Scene_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Scene_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Scene_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Scene_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Scene_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Scene_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Scene_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Scene_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Scene_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Scene_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Scene_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Scene_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Scene_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Scene_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Scene_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Scene_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Scene_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Scene_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Scene_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Scene_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Scene_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Scene_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Scene_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Scene_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Scene_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Scene_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Scene_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Scene_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Scene_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Scene_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Scene_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Scene_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Scene_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Scene_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Scene_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Scene_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Scene_activate(this.nativePtr);
	}

	deactivate() {
		Module._Scene_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Scene_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class SequenceFrameAnimationPlayer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._SequenceFrameAnimationPlayer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._SequenceFrameAnimationPlayer_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SequenceFrameAnimationPlayer(__result);
		}
	}

	static createWithSeekCallback(callback) {
		let callbackFunc = CustomCallback_bae6d381a6ad75e2a7fe59136b2593e6_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		var __result = Module._SequenceFrameAnimationPlayer_createWithSeekCallback(callbackPtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SequenceFrameAnimationPlayer(__result);
		}
	}

	play() {
		Module._SequenceFrameAnimationPlayer_play(this.nativePtr);
	}

	setSource(filePattern) {
		const filePatternBuffer = Module._malloc(filePattern.length+1);
		Module.stringToUTF8(filePattern, filePatternBuffer, filePattern.length+1);
		Module._SequenceFrameAnimationPlayer_setSource(this.nativePtr, filePatternBuffer);
		Module._free(filePatternBuffer);
	}

	getFrameCount() {
		var __result = Module._SequenceFrameAnimationPlayer_getFrameCount(this.nativePtr);
		return __result;
	}

	getOriginAnimationSize() {
		Module._SequenceFrameAnimationPlayer_getOriginAnimationSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	enableSeekMode() {
		Module._SequenceFrameAnimationPlayer_enableSeekMode(this.nativePtr);
	}

	disableSeekMode() {
		Module._SequenceFrameAnimationPlayer_disableSeekMode(this.nativePtr);
	}

	setFps(fps) {
		Module._SequenceFrameAnimationPlayer_setFps(this.nativePtr, fps);
	}

	getFps() {
		var __result = Module._SequenceFrameAnimationPlayer_getFps(this.nativePtr);
		return __result;
	}

	seekTo(timestamp) {
		Module._SequenceFrameAnimationPlayer_seekTo(this.nativePtr, timestamp);
	}

	setSeekCallback(callback) {
		let callbackFunc = CustomCallback_bae6d381a6ad75e2a7fe59136b2593e6_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._SequenceFrameAnimationPlayer_setSeekCallback(this.nativePtr, callbackPtr);
	}

	setFrameTime(frametime) {
		Module._SequenceFrameAnimationPlayer_setFrameTime(this.nativePtr, frametime);
	}

	getFrameTime() {
		var __result = Module._SequenceFrameAnimationPlayer_getFrameTime(this.nativePtr);
		return __result;
	}

	setOvertimeBehavier(behavier) {
		Module._SequenceFrameAnimationPlayer_setOvertimeBehavier(this.nativePtr, behavier);
	}

	setOvertimeBehavior(behavior) {
		Module._SequenceFrameAnimationPlayer_setOvertimeBehavior(this.nativePtr, behavior);
	}

	setAutoPlay(autoPlay) {
		Module._SequenceFrameAnimationPlayer_setAutoPlay(this.nativePtr, autoPlay);
	}

	getSeekingStatus() {
		var __result = Module._SequenceFrameAnimationPlayer_getSeekingStatus(this.nativePtr);
		return __result;
	}

	setFinishCallbackWithoutSeek(callback) {
		let callbackFunc = CustomCallback_a1224f19c6d6ae242400dcf1e1f87d32_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vii);
		Module._SequenceFrameAnimationPlayer_setFinishCallbackWithoutSeek(this.nativePtr, callbackPtr);
	}

	setScaleX(scaleX) {
		Module._SequenceFrameAnimationPlayer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._SequenceFrameAnimationPlayer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._SequenceFrameAnimationPlayer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._SequenceFrameAnimationPlayer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._SequenceFrameAnimationPlayer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._SequenceFrameAnimationPlayer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._SequenceFrameAnimationPlayer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._SequenceFrameAnimationPlayer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._SequenceFrameAnimationPlayer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._SequenceFrameAnimationPlayer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._SequenceFrameAnimationPlayer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._SequenceFrameAnimationPlayer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._SequenceFrameAnimationPlayer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._SequenceFrameAnimationPlayer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._SequenceFrameAnimationPlayer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._SequenceFrameAnimationPlayer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._SequenceFrameAnimationPlayer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._SequenceFrameAnimationPlayer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._SequenceFrameAnimationPlayer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._SequenceFrameAnimationPlayer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._SequenceFrameAnimationPlayer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._SequenceFrameAnimationPlayer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._SequenceFrameAnimationPlayer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._SequenceFrameAnimationPlayer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._SequenceFrameAnimationPlayer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._SequenceFrameAnimationPlayer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._SequenceFrameAnimationPlayer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._SequenceFrameAnimationPlayer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._SequenceFrameAnimationPlayer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._SequenceFrameAnimationPlayer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._SequenceFrameAnimationPlayer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._SequenceFrameAnimationPlayer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._SequenceFrameAnimationPlayer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._SequenceFrameAnimationPlayer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._SequenceFrameAnimationPlayer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._SequenceFrameAnimationPlayer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._SequenceFrameAnimationPlayer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._SequenceFrameAnimationPlayer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._SequenceFrameAnimationPlayer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._SequenceFrameAnimationPlayer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._SequenceFrameAnimationPlayer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._SequenceFrameAnimationPlayer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._SequenceFrameAnimationPlayer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._SequenceFrameAnimationPlayer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._SequenceFrameAnimationPlayer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._SequenceFrameAnimationPlayer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._SequenceFrameAnimationPlayer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._SequenceFrameAnimationPlayer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._SequenceFrameAnimationPlayer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._SequenceFrameAnimationPlayer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._SequenceFrameAnimationPlayer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._SequenceFrameAnimationPlayer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._SequenceFrameAnimationPlayer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._SequenceFrameAnimationPlayer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._SequenceFrameAnimationPlayer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._SequenceFrameAnimationPlayer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._SequenceFrameAnimationPlayer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._SequenceFrameAnimationPlayer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._SequenceFrameAnimationPlayer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._SequenceFrameAnimationPlayer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._SequenceFrameAnimationPlayer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._SequenceFrameAnimationPlayer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._SequenceFrameAnimationPlayer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._SequenceFrameAnimationPlayer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._SequenceFrameAnimationPlayer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._SequenceFrameAnimationPlayer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._SequenceFrameAnimationPlayer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._SequenceFrameAnimationPlayer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._SequenceFrameAnimationPlayer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._SequenceFrameAnimationPlayer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._SequenceFrameAnimationPlayer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._SequenceFrameAnimationPlayer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._SequenceFrameAnimationPlayer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._SequenceFrameAnimationPlayer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._SequenceFrameAnimationPlayer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._SequenceFrameAnimationPlayer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._SequenceFrameAnimationPlayer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._SequenceFrameAnimationPlayer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._SequenceFrameAnimationPlayer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._SequenceFrameAnimationPlayer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._SequenceFrameAnimationPlayer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._SequenceFrameAnimationPlayer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._SequenceFrameAnimationPlayer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._SequenceFrameAnimationPlayer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._SequenceFrameAnimationPlayer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._SequenceFrameAnimationPlayer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._SequenceFrameAnimationPlayer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._SequenceFrameAnimationPlayer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._SequenceFrameAnimationPlayer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._SequenceFrameAnimationPlayer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._SequenceFrameAnimationPlayer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._SequenceFrameAnimationPlayer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._SequenceFrameAnimationPlayer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._SequenceFrameAnimationPlayer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._SequenceFrameAnimationPlayer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._SequenceFrameAnimationPlayer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._SequenceFrameAnimationPlayer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._SequenceFrameAnimationPlayer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._SequenceFrameAnimationPlayer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._SequenceFrameAnimationPlayer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._SequenceFrameAnimationPlayer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._SequenceFrameAnimationPlayer_activate(this.nativePtr);
	}

	deactivate() {
		Module._SequenceFrameAnimationPlayer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._SequenceFrameAnimationPlayer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Sprite {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Sprite_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(filename) {
		const filenameBuffer = Module._malloc(filename.length+1);
		Module.stringToUTF8(filename, filenameBuffer, filename.length+1);
		var __result = Module._Sprite_create(filenameBuffer);
		Module._free(filenameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	static createWithTexture(texture) {
		var __result = Module._Sprite_createWithTexture(texture.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	static createWithSpriteFrame(spriteFrame) {
		var __result = Module._Sprite_createWithSpriteFrame(spriteFrame.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	forceLoadTextureSync(flag) {
		Module._Sprite_forceLoadTextureSync(this.nativePtr, flag);
	}

	setTexture(texture) {
		Module._Sprite_setTexture(this.nativePtr, texture.nativePtr);
	}

	setTextureWithFile(file) {
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		Module._Sprite_setTextureWithFile(this.nativePtr, fileBuffer);
		Module._free(fileBuffer);
	}

	setTextureRect(rect, rotated, untrimmedSize) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		var pbuntrimmedSize = PBBKSizeF.create();
		pbuntrimmedSize.width = untrimmedSize.width;
		pbuntrimmedSize.height = untrimmedSize.height;
		const untrimmedSizeBuffer = PBBKSizeF.buffer(pbuntrimmedSize);
		Module._Sprite_setTextureRect(this.nativePtr, rectBuffer, rotated, untrimmedSizeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		PBBKSizeF.freeBuffer(untrimmedSizeBuffer);
	}

	setVertexRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Sprite_setVertexRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	setCenterRectNormalized(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Sprite_setCenterRectNormalized(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRectNormalized() {
		Module._Sprite_getCenterRectNormalized(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setCenterRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Sprite_setCenterRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRect() {
		Module._Sprite_getCenterRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setSpriteFrame(frame) {
		Module._Sprite_setSpriteFrame(this.nativePtr, frame.nativePtr);
	}

	getSpriteFrame() {
		var __result = Module._Sprite_getSpriteFrame(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SpriteFrame(__result);
		}
	}

	isFrameDisplayed(frame) {
		var __result = Module._Sprite_isFrameDisplayed(this.nativePtr, frame.nativePtr);
		return __result;
	}

	setExternalProgram(name, vertexShaderPath, fragmentShaderPath) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		const vertexShaderPathBuffer = Module._malloc(vertexShaderPath.length+1);
		Module.stringToUTF8(vertexShaderPath, vertexShaderPathBuffer, vertexShaderPath.length+1);
		const fragmentShaderPathBuffer = Module._malloc(fragmentShaderPath.length+1);
		Module.stringToUTF8(fragmentShaderPath, fragmentShaderPathBuffer, fragmentShaderPath.length+1);
		Module._Sprite_setExternalProgram(this.nativePtr, nameBuffer, vertexShaderPathBuffer, fragmentShaderPathBuffer);
		Module._free(nameBuffer);
		Module._free(vertexShaderPathBuffer);
		Module._free(fragmentShaderPathBuffer);
	}

	resetProgram() {
		Module._Sprite_resetProgram(this.nativePtr);
	}

	isFlippedX() {
		var __result = Module._Sprite_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Sprite_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedY() {
		var __result = Module._Sprite_isFlippedY(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Sprite_setFlippedY(this.nativePtr, flippedY);
	}

	setPolygonInfo(vertices, colors, texCoords, indices, verticesCount, indicesCount) {
		const verticesBuffer = Module._malloc(vertices.length);
		Module.writeArrayToMemory(vertices, verticesBuffer);
		const colorsBuffer = Module._malloc(colors.length);
		Module.writeArrayToMemory(colors, colorsBuffer);
		const texCoordsBuffer = Module._malloc(texCoords.length);
		Module.writeArrayToMemory(texCoords, texCoordsBuffer);
		const indicesBuffer = Module._malloc(indices.length);
		Module.writeArrayToMemory(indices, indicesBuffer);
		Module._Sprite_setPolygonInfo(this.nativePtr, verticesBuffer, colorsBuffer, texCoordsBuffer, indicesBuffer, verticesCount, indicesCount);
		Module._free(verticesBuffer);
		Module._free(colorsBuffer);
		Module._free(texCoordsBuffer);
		Module._free(indicesBuffer);
	}

	setStretchEnabled(enabled) {
		Module._Sprite_setStretchEnabled(this.nativePtr, enabled);
	}

	isStretchEnabled() {
		var __result = Module._Sprite_isStretchEnabled(this.nativePtr);
		return __result;
	}

	setOpacityModifyRGB(modify) {
		Module._Sprite_setOpacityModifyRGB(this.nativePtr, modify);
	}

	isOpacityModifyRGB() {
		var __result = Module._Sprite_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Sprite_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Sprite_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Sprite_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Sprite_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Sprite_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Sprite_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Sprite_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Sprite_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Sprite_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Sprite_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Sprite_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Sprite_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Sprite_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Sprite_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Sprite_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Sprite_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Sprite_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Sprite_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Sprite_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Sprite_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Sprite_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Sprite_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Sprite_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Sprite_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Sprite_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Sprite_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Sprite_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Sprite_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Sprite_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Sprite_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Sprite_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Sprite_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Sprite_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Sprite_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Sprite_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Sprite_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Sprite_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Sprite_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Sprite_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Sprite_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Sprite_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Sprite_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Sprite_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Sprite_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Sprite_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Sprite_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Sprite_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Sprite_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Sprite_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Sprite_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Sprite_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Sprite_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Sprite_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Sprite_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Sprite_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Sprite_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Sprite_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Sprite_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Sprite_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Sprite_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Sprite_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Sprite_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Sprite_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Sprite_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Sprite_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Sprite_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Sprite_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Sprite_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Sprite_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Sprite_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Sprite_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Sprite_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Sprite_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Sprite_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Sprite_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Sprite_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Sprite_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Sprite_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Sprite_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Sprite_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Sprite_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Sprite_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Sprite_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Sprite_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Sprite_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Sprite_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Sprite_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Sprite_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Sprite_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Sprite_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Sprite_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Sprite_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Sprite_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Sprite_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Sprite_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Sprite_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Sprite_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Sprite_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Sprite_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Sprite_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Sprite_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Sprite_activate(this.nativePtr);
	}

	deactivate() {
		Module._Sprite_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Sprite_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class SpriteBatchNode {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._SpriteBatchNode_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(fileImage) {
		const fileImageBuffer = Module._malloc(fileImage.length+1);
		Module.stringToUTF8(fileImage, fileImageBuffer, fileImage.length+1);
		var __result = Module._SpriteBatchNode_create(fileImageBuffer);
		Module._free(fileImageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SpriteBatchNode(__result);
		}
	}

	static createWithTexture(tex, capacity) {
		var __result = Module._SpriteBatchNode_createWithTexture(tex.nativePtr, capacity);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SpriteBatchNode(__result);
		}
	}

	removeChildAtIndex(index) {
		Module._SpriteBatchNode_removeChildAtIndex(this.nativePtr, index);
	}

	appendChild(sprite) {
		Module._SpriteBatchNode_appendChild(this.nativePtr, sprite.nativePtr);
	}

	removeSpriteFromAtlas(sprite) {
		Module._SpriteBatchNode_removeSpriteFromAtlas(this.nativePtr, sprite.nativePtr);
	}

	insertQuadFromSprite(sprite, index) {
		Module._SpriteBatchNode_insertQuadFromSprite(this.nativePtr, sprite.nativePtr, index);
	}

	setScaleX(scaleX) {
		Module._SpriteBatchNode_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._SpriteBatchNode_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._SpriteBatchNode_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._SpriteBatchNode_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._SpriteBatchNode_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._SpriteBatchNode_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._SpriteBatchNode_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._SpriteBatchNode_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._SpriteBatchNode_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._SpriteBatchNode_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._SpriteBatchNode_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._SpriteBatchNode_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._SpriteBatchNode_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._SpriteBatchNode_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._SpriteBatchNode_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._SpriteBatchNode_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._SpriteBatchNode_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._SpriteBatchNode_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._SpriteBatchNode_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._SpriteBatchNode_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._SpriteBatchNode_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._SpriteBatchNode_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._SpriteBatchNode_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._SpriteBatchNode_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._SpriteBatchNode_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._SpriteBatchNode_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._SpriteBatchNode_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._SpriteBatchNode_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._SpriteBatchNode_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._SpriteBatchNode_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._SpriteBatchNode_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._SpriteBatchNode_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._SpriteBatchNode_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._SpriteBatchNode_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._SpriteBatchNode_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._SpriteBatchNode_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._SpriteBatchNode_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._SpriteBatchNode_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._SpriteBatchNode_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._SpriteBatchNode_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._SpriteBatchNode_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._SpriteBatchNode_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._SpriteBatchNode_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._SpriteBatchNode_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._SpriteBatchNode_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._SpriteBatchNode_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._SpriteBatchNode_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._SpriteBatchNode_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._SpriteBatchNode_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._SpriteBatchNode_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._SpriteBatchNode_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._SpriteBatchNode_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._SpriteBatchNode_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._SpriteBatchNode_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._SpriteBatchNode_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._SpriteBatchNode_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._SpriteBatchNode_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._SpriteBatchNode_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._SpriteBatchNode_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._SpriteBatchNode_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._SpriteBatchNode_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._SpriteBatchNode_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._SpriteBatchNode_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._SpriteBatchNode_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._SpriteBatchNode_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._SpriteBatchNode_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._SpriteBatchNode_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._SpriteBatchNode_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._SpriteBatchNode_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._SpriteBatchNode_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._SpriteBatchNode_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._SpriteBatchNode_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._SpriteBatchNode_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._SpriteBatchNode_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._SpriteBatchNode_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._SpriteBatchNode_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._SpriteBatchNode_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._SpriteBatchNode_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._SpriteBatchNode_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._SpriteBatchNode_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._SpriteBatchNode_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._SpriteBatchNode_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._SpriteBatchNode_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._SpriteBatchNode_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._SpriteBatchNode_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._SpriteBatchNode_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._SpriteBatchNode_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._SpriteBatchNode_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._SpriteBatchNode_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._SpriteBatchNode_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._SpriteBatchNode_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._SpriteBatchNode_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._SpriteBatchNode_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._SpriteBatchNode_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._SpriteBatchNode_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._SpriteBatchNode_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._SpriteBatchNode_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._SpriteBatchNode_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._SpriteBatchNode_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._SpriteBatchNode_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._SpriteBatchNode_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._SpriteBatchNode_activate(this.nativePtr);
	}

	deactivate() {
		Module._SpriteBatchNode_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._SpriteBatchNode_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class TMXLayer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._TMXLayer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	releaseMap() {
		Module._TMXLayer_releaseMap(this.nativePtr);
	}

	getTileAt(tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		var __result = Module._TMXLayer_getTileAt(this.nativePtr, tileCoordinateBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	tileAt(tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		var __result = Module._TMXLayer_tileAt(this.nativePtr, tileCoordinateBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getTileGIDAt(tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		var __result = Module._TMXLayer_getTileGIDAt(this.nativePtr, tileCoordinateBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
		return __result;
	}

	setTileGID(gid, tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		Module._TMXLayer_setTileGID(this.nativePtr, gid, tileCoordinateBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
	}

	removeTileAt(tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		Module._TMXLayer_removeTileAt(this.nativePtr, tileCoordinateBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
	}

	positionAt(tileCoordinate) {
		var pbtileCoordinate = PBVector2.create();
		pbtileCoordinate.x = tileCoordinate.x;
		pbtileCoordinate.y = tileCoordinate.y;
		const tileCoordinateBuffer = PBVector2.buffer(pbtileCoordinate);
		Module._TMXLayer_positionAt(this.nativePtr, tileCoordinateBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(tileCoordinateBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLayerName() {
		var __result = Module._TMXLayer_getLayerName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getLayerSize() {
		Module._TMXLayer_getLayerSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setLayerSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._TMXLayer_setLayerSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	updateMapInfo(mapTileSize, orientation, staggerAxis, staggerIndex, hexSideLength) {
		var pbmapTileSize = PBBKSizeF.create();
		pbmapTileSize.width = mapTileSize.width;
		pbmapTileSize.height = mapTileSize.height;
		const mapTileSizeBuffer = PBBKSizeF.buffer(pbmapTileSize);
		Module._TMXLayer_updateMapInfo(this.nativePtr, mapTileSizeBuffer, orientation, staggerAxis, staggerIndex, hexSideLength);
		PBBKSizeF.freeBuffer(mapTileSizeBuffer);
	}

	removeChildAtIndex(index) {
		Module._TMXLayer_removeChildAtIndex(this.nativePtr, index);
	}

	appendChild(sprite) {
		Module._TMXLayer_appendChild(this.nativePtr, sprite.nativePtr);
	}

	removeSpriteFromAtlas(sprite) {
		Module._TMXLayer_removeSpriteFromAtlas(this.nativePtr, sprite.nativePtr);
	}

	insertQuadFromSprite(sprite, index) {
		Module._TMXLayer_insertQuadFromSprite(this.nativePtr, sprite.nativePtr, index);
	}

	setScaleX(scaleX) {
		Module._TMXLayer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._TMXLayer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._TMXLayer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._TMXLayer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._TMXLayer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._TMXLayer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TMXLayer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._TMXLayer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._TMXLayer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._TMXLayer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._TMXLayer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._TMXLayer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._TMXLayer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._TMXLayer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._TMXLayer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._TMXLayer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._TMXLayer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._TMXLayer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._TMXLayer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._TMXLayer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._TMXLayer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._TMXLayer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._TMXLayer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._TMXLayer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._TMXLayer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._TMXLayer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._TMXLayer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._TMXLayer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._TMXLayer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._TMXLayer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._TMXLayer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._TMXLayer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._TMXLayer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._TMXLayer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._TMXLayer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._TMXLayer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._TMXLayer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._TMXLayer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._TMXLayer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._TMXLayer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._TMXLayer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._TMXLayer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._TMXLayer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._TMXLayer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._TMXLayer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._TMXLayer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._TMXLayer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._TMXLayer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._TMXLayer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._TMXLayer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._TMXLayer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._TMXLayer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._TMXLayer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._TMXLayer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._TMXLayer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._TMXLayer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._TMXLayer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._TMXLayer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._TMXLayer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._TMXLayer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._TMXLayer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._TMXLayer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._TMXLayer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._TMXLayer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._TMXLayer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._TMXLayer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._TMXLayer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._TMXLayer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._TMXLayer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._TMXLayer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._TMXLayer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._TMXLayer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._TMXLayer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._TMXLayer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._TMXLayer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._TMXLayer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._TMXLayer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._TMXLayer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._TMXLayer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._TMXLayer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._TMXLayer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._TMXLayer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._TMXLayer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._TMXLayer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._TMXLayer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._TMXLayer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._TMXLayer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._TMXLayer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._TMXLayer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._TMXLayer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._TMXLayer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._TMXLayer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._TMXLayer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._TMXLayer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._TMXLayer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._TMXLayer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._TMXLayer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._TMXLayer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._TMXLayer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._TMXLayer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._TMXLayer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._TMXLayer_activate(this.nativePtr);
	}

	deactivate() {
		Module._TMXLayer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._TMXLayer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class TMXTiledMap {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._TMXTiledMap_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createWithFile(tmxFile) {
		const tmxFileBuffer = Module._malloc(tmxFile.length+1);
		Module.stringToUTF8(tmxFile, tmxFileBuffer, tmxFile.length+1);
		var __result = Module._TMXTiledMap_createWithFile(tmxFileBuffer);
		Module._free(tmxFileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TMXTiledMap(__result);
		}
	}

	static create(mapSize, tileSize, mapOrientation, staggerAxis, staggerIndex, hexSideLength) {
		var pbmapSize = PBBKSizeF.create();
		pbmapSize.width = mapSize.width;
		pbmapSize.height = mapSize.height;
		const mapSizeBuffer = PBBKSizeF.buffer(pbmapSize);
		var pbtileSize = PBBKSizeF.create();
		pbtileSize.width = tileSize.width;
		pbtileSize.height = tileSize.height;
		const tileSizeBuffer = PBBKSizeF.buffer(pbtileSize);
		var __result = Module._TMXTiledMap_create(mapSizeBuffer, tileSizeBuffer, mapOrientation, staggerAxis, staggerIndex, hexSideLength);
		PBBKSizeF.freeBuffer(mapSizeBuffer);
		PBBKSizeF.freeBuffer(tileSizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TMXTiledMap(__result);
		}
	}

	getLayer(layerName) {
		const layerNameBuffer = Module._malloc(layerName.length+1);
		Module.stringToUTF8(layerName, layerNameBuffer, layerName.length+1);
		var __result = Module._TMXTiledMap_getLayer(this.nativePtr, layerNameBuffer);
		Module._free(layerNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TMXLayer(__result);
		}
	}

	getObjectGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._TMXTiledMap_getObjectGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TMXObjectGroup(__result);
		}
	}

	getMapSize() {
		Module._TMXTiledMap_getMapSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setMapSize(mapSize) {
		var pbmapSize = PBBKSizeF.create();
		pbmapSize.width = mapSize.width;
		pbmapSize.height = mapSize.height;
		const mapSizeBuffer = PBBKSizeF.buffer(pbmapSize);
		Module._TMXTiledMap_setMapSize(this.nativePtr, mapSizeBuffer);
		PBBKSizeF.freeBuffer(mapSizeBuffer);
	}

	getTileSize() {
		Module._TMXTiledMap_getTileSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setTileSize(tileSize) {
		var pbtileSize = PBBKSizeF.create();
		pbtileSize.width = tileSize.width;
		pbtileSize.height = tileSize.height;
		const tileSizeBuffer = PBBKSizeF.buffer(pbtileSize);
		Module._TMXTiledMap_setTileSize(this.nativePtr, tileSizeBuffer);
		PBBKSizeF.freeBuffer(tileSizeBuffer);
	}

	addChild(child) {
		var __result = Module._TMXTiledMap_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._TMXTiledMap_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._TMXTiledMap_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._TMXTiledMap_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._TMXTiledMap_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._TMXTiledMap_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._TMXTiledMap_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TMXTiledMap_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._TMXTiledMap_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._TMXTiledMap_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._TMXTiledMap_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._TMXTiledMap_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._TMXTiledMap_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._TMXTiledMap_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._TMXTiledMap_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._TMXTiledMap_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._TMXTiledMap_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._TMXTiledMap_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._TMXTiledMap_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._TMXTiledMap_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._TMXTiledMap_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._TMXTiledMap_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._TMXTiledMap_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._TMXTiledMap_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._TMXTiledMap_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._TMXTiledMap_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._TMXTiledMap_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._TMXTiledMap_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._TMXTiledMap_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._TMXTiledMap_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._TMXTiledMap_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._TMXTiledMap_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._TMXTiledMap_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._TMXTiledMap_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._TMXTiledMap_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._TMXTiledMap_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._TMXTiledMap_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._TMXTiledMap_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._TMXTiledMap_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._TMXTiledMap_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._TMXTiledMap_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._TMXTiledMap_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._TMXTiledMap_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._TMXTiledMap_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._TMXTiledMap_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._TMXTiledMap_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._TMXTiledMap_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._TMXTiledMap_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._TMXTiledMap_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._TMXTiledMap_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._TMXTiledMap_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._TMXTiledMap_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._TMXTiledMap_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._TMXTiledMap_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._TMXTiledMap_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._TMXTiledMap_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._TMXTiledMap_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._TMXTiledMap_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._TMXTiledMap_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._TMXTiledMap_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._TMXTiledMap_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._TMXTiledMap_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._TMXTiledMap_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._TMXTiledMap_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._TMXTiledMap_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._TMXTiledMap_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._TMXTiledMap_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._TMXTiledMap_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._TMXTiledMap_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._TMXTiledMap_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._TMXTiledMap_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._TMXTiledMap_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._TMXTiledMap_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._TMXTiledMap_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._TMXTiledMap_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._TMXTiledMap_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._TMXTiledMap_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._TMXTiledMap_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._TMXTiledMap_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._TMXTiledMap_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._TMXTiledMap_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._TMXTiledMap_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._TMXTiledMap_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._TMXTiledMap_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._TMXTiledMap_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._TMXTiledMap_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._TMXTiledMap_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._TMXTiledMap_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._TMXTiledMap_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._TMXTiledMap_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._TMXTiledMap_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._TMXTiledMap_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._TMXTiledMap_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._TMXTiledMap_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._TMXTiledMap_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._TMXTiledMap_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._TMXTiledMap_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._TMXTiledMap_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._TMXTiledMap_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._TMXTiledMap_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._TMXTiledMap_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._TMXTiledMap_activate(this.nativePtr);
	}

	deactivate() {
		Module._TMXTiledMap_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._TMXTiledMap_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class TextField {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._TextField_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createFull(placeholder, dimensions, alignment, fontName, fontSize) {
		const placeholderBuffer = Module._malloc(placeholder.length+1);
		Module.stringToUTF8(placeholder, placeholderBuffer, placeholder.length+1);
		var pbdimensions = PBBKSizeF.create();
		pbdimensions.width = dimensions.width;
		pbdimensions.height = dimensions.height;
		const dimensionsBuffer = PBBKSizeF.buffer(pbdimensions);
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		var __result = Module._TextField_createFull(placeholderBuffer, dimensionsBuffer, alignment, fontNameBuffer, fontSize);
		Module._free(placeholderBuffer);
		PBBKSizeF.freeBuffer(dimensionsBuffer);
		Module._free(fontNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TextField(__result);
		}
	}

	static create(fontName, fontSize) {
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		var __result = Module._TextField_create(fontNameBuffer, fontSize);
		Module._free(fontNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TextField(__result);
		}
	}

	getCharCount() {
		var __result = Module._TextField_getCharCount(this.nativePtr);
		return __result;
	}

	getMaxCharCount() {
		var __result = Module._TextField_getMaxCharCount(this.nativePtr);
		return __result;
	}

	setMaxCharCount(maxCount) {
		Module._TextField_setMaxCharCount(this.nativePtr, maxCount);
	}

	getPlaceHolderColor() {
		Module._TextField_getPlaceHolderColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setPlaceHolderColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._TextField_setPlaceHolderColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	setTextColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._TextField_setTextColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	appendString(text) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		Module._TextField_appendString(this.nativePtr, textBuffer);
		Module._free(textBuffer);
	}

	getString() {
		var __result = Module._TextField_getString(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setPlaceHolder(text) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		Module._TextField_setPlaceHolder(this.nativePtr, textBuffer);
		Module._free(textBuffer);
	}

	getPlaceHolder() {
		var __result = Module._TextField_getPlaceHolder(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setSecureTextEntry(value) {
		Module._TextField_setSecureTextEntry(this.nativePtr, value);
	}

	isSecureTextEntry() {
		var __result = Module._TextField_isSecureTextEntry(this.nativePtr);
		return __result;
	}

	setCursorEnabled(enabled) {
		Module._TextField_setCursorEnabled(this.nativePtr, enabled);
	}

	setCursorPosition(cursorPosition) {
		Module._TextField_setCursorPosition(this.nativePtr, cursorPosition);
	}

	setOnlyAcceptNumberInput(flag) {
		Module._TextField_setOnlyAcceptNumberInput(this.nativePtr, flag);
	}

	initWithTTF(fontFilePath, fontSize) {
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		var __result = Module._TextField_initWithTTF(this.nativePtr, fontFilePathBuffer, fontSize);
		Module._free(fontFilePathBuffer);
		return __result;
	}

	initWithTTFAndEmoji(fontFilePath, emojiFilePath, fontSize) {
		const fontFilePathBuffer = Module._malloc(fontFilePath.length+1);
		Module.stringToUTF8(fontFilePath, fontFilePathBuffer, fontFilePath.length+1);
		const emojiFilePathBuffer = Module._malloc(emojiFilePath.length+1);
		Module.stringToUTF8(emojiFilePath, emojiFilePathBuffer, emojiFilePath.length+1);
		var __result = Module._TextField_initWithTTFAndEmoji(this.nativePtr, fontFilePathBuffer, emojiFilePathBuffer, fontSize);
		Module._free(fontFilePathBuffer);
		Module._free(emojiFilePathBuffer);
		return __result;
	}

	isOpacityModifyRGB() {
		var __result = Module._TextField_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setOpacityModifyRGB(isOpacityModifyRGB) {
		Module._TextField_setOpacityModifyRGB(this.nativePtr, isOpacityModifyRGB);
	}

	setWidth(width) {
		Module._TextField_setWidth(this.nativePtr, width);
	}

	getWidth() {
		var __result = Module._TextField_getWidth(this.nativePtr);
		return __result;
	}

	setHeight(height) {
		Module._TextField_setHeight(this.nativePtr, height);
	}

	getHeight() {
		var __result = Module._TextField_getHeight(this.nativePtr);
		return __result;
	}

	setDimensions(width, height) {
		Module._TextField_setDimensions(this.nativePtr, width, height);
	}

	getDimensions() {
		Module._TextField_getDimensions(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getLetter(lettetIndex) {
		var __result = Module._TextField_getLetter(this.nativePtr, lettetIndex);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setString(text) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		Module._TextField_setString(this.nativePtr, textBuffer);
		Module._free(textBuffer);
	}

	getTextColor() {
		Module._TextField_getTextColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setHorizontalAlignment(hAlignment) {
		Module._TextField_setHorizontalAlignment(this.nativePtr, hAlignment);
	}

	getHorizontalAlignment() {
		var __result = Module._TextField_getHorizontalAlignment(this.nativePtr);
		return __result;
	}

	setVerticalAlignment(vAlignment) {
		Module._TextField_setVerticalAlignment(this.nativePtr, vAlignment);
	}

	getVerticalAlignment() {
		var __result = Module._TextField_getVerticalAlignment(this.nativePtr);
		return __result;
	}

	setAlignment(hAlignment, vAlignment) {
		Module._TextField_setAlignment(this.nativePtr, hAlignment, vAlignment);
	}

	getRenderingFontSize() {
		var __result = Module._TextField_getRenderingFontSize(this.nativePtr);
		return __result;
	}

	setAdditionalKerning(space) {
		Module._TextField_setAdditionalKerning(this.nativePtr, space);
	}

	getAdditionalKerning() {
		var __result = Module._TextField_getAdditionalKerning(this.nativePtr);
		return __result;
	}

	setLineHeight(height) {
		Module._TextField_setLineHeight(this.nativePtr, height);
	}

	getLineHeight() {
		var __result = Module._TextField_getLineHeight(this.nativePtr);
		return __result;
	}

	setLineSpacing(spacing) {
		Module._TextField_setLineSpacing(this.nativePtr, spacing);
	}

	getLineSpacing() {
		var __result = Module._TextField_getLineSpacing(this.nativePtr);
		return __result;
	}

	setLineBreakWithoutSpace(breakWithoutSpace) {
		Module._TextField_setLineBreakWithoutSpace(this.nativePtr, breakWithoutSpace);
	}

	setMaxLineWidth(maxLineWidth) {
		Module._TextField_setMaxLineWidth(this.nativePtr, maxLineWidth);
	}

	getMaxLineWidth() {
		var __result = Module._TextField_getMaxLineWidth(this.nativePtr);
		return __result;
	}

	enableWrap(enable) {
		Module._TextField_enableWrap(this.nativePtr, enable);
	}

	isWrapEnabled() {
		var __result = Module._TextField_isWrapEnabled(this.nativePtr);
		return __result;
	}

	setOverflow(overflow) {
		Module._TextField_setOverflow(this.nativePtr, overflow);
	}

	getOverflow() {
		var __result = Module._TextField_getOverflow(this.nativePtr);
		return __result;
	}

	enableShadow(shadowColor, offset, blurRadius) {
		var pbshadowColor = PBColor4B.create();
		pbshadowColor.r = shadowColor.r;
		pbshadowColor.g = shadowColor.g;
		pbshadowColor.b = shadowColor.b;
		pbshadowColor.a = shadowColor.a;
		const shadowColorBuffer = PBColor4B.buffer(pbshadowColor);
		var pboffset = PBBKSizeF.create();
		pboffset.width = offset.width;
		pboffset.height = offset.height;
		const offsetBuffer = PBBKSizeF.buffer(pboffset);
		Module._TextField_enableShadow(this.nativePtr, shadowColorBuffer, offsetBuffer, blurRadius);
		PBColor4B.freeBuffer(shadowColorBuffer);
		PBBKSizeF.freeBuffer(offsetBuffer);
	}

	enableOutline(outlineColor, outlineSize) {
		var pboutlineColor = PBColor4B.create();
		pboutlineColor.r = outlineColor.r;
		pboutlineColor.g = outlineColor.g;
		pboutlineColor.b = outlineColor.b;
		pboutlineColor.a = outlineColor.a;
		const outlineColorBuffer = PBColor4B.buffer(pboutlineColor);
		Module._TextField_enableOutline(this.nativePtr, outlineColorBuffer, outlineSize);
		PBColor4B.freeBuffer(outlineColorBuffer);
	}

	enableGlow(glowColor) {
		var pbglowColor = PBColor4B.create();
		pbglowColor.r = glowColor.r;
		pbglowColor.g = glowColor.g;
		pbglowColor.b = glowColor.b;
		pbglowColor.a = glowColor.a;
		const glowColorBuffer = PBColor4B.buffer(pbglowColor);
		Module._TextField_enableGlow(this.nativePtr, glowColorBuffer);
		PBColor4B.freeBuffer(glowColorBuffer);
	}

	enableItalics() {
		Module._TextField_enableItalics(this.nativePtr);
	}

	enableBold() {
		Module._TextField_enableBold(this.nativePtr);
	}

	enableEllipsis(enable) {
		Module._TextField_enableEllipsis(this.nativePtr, enable);
	}

	isElllipsisEnabled() {
		var __result = Module._TextField_isElllipsisEnabled(this.nativePtr);
		return __result;
	}

	enableUnderline() {
		Module._TextField_enableUnderline(this.nativePtr);
	}

	enableStrikethrough() {
		Module._TextField_enableStrikethrough(this.nativePtr);
	}

	disableEffect(effect) {
		Module._TextField_disableEffect(this.nativePtr, effect);
	}

	getLabelEffectType() {
		var __result = Module._TextField_getLabelEffectType(this.nativePtr);
		return __result;
	}

	getEffectColor() {
		Module._TextField_getEffectColor(this.nativePtr, PBColor4F.nativeBuffer);
		return new Color4F(PBColor4F.decode(PBColor4F.nativeBuffer));
	}

	isShadowEnabled() {
		var __result = Module._TextField_isShadowEnabled(this.nativePtr);
		return __result;
	}

	getShadowOffset() {
		Module._TextField_getShadowOffset(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getShadowBlurRadius() {
		var __result = Module._TextField_getShadowBlurRadius(this.nativePtr);
		return __result;
	}

	getShadowColor() {
		Module._TextField_getShadowColor(this.nativePtr, PBColor4F.nativeBuffer);
		return new Color4F(PBColor4F.decode(PBColor4F.nativeBuffer));
	}

	getOutlineSize() {
		var __result = Module._TextField_getOutlineSize(this.nativePtr);
		return __result;
	}

	setBackgroundImage(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._TextField_setBackgroundImage(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	setScale9BackgroundImage(imagePath, capInset) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		var pbcapInset = PBBKRectF.create();
		pbcapInset.left = capInset.left;
		pbcapInset.top = capInset.top;
		pbcapInset.width = capInset.width;
		pbcapInset.height = capInset.height;
		const capInsetBuffer = PBBKRectF.buffer(pbcapInset);
		Module._TextField_setScale9BackgroundImage(this.nativePtr, imagePathBuffer, capInsetBuffer);
		Module._free(imagePathBuffer);
		PBBKRectF.freeBuffer(capInsetBuffer);
	}

	setBackgroundImagePadding(left, top, right, bottom) {
		Module._TextField_setBackgroundImagePadding(this.nativePtr, left, top, right, bottom);
	}

	removeBackgroundImage() {
		Module._TextField_removeBackgroundImage(this.nativePtr);
	}

	getBackgroundImageCapInset() {
		Module._TextField_getBackgroundImageCapInset(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	skipDrawOutofScreen(flag) {
		Module._TextField_skipDrawOutofScreen(this.nativePtr, flag);
	}

	getStringNumLines() {
		var __result = Module._TextField_getStringNumLines(this.nativePtr);
		return __result;
	}

	getStringLength() {
		var __result = Module._TextField_getStringLength(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._TextField_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._TextField_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._TextField_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._TextField_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._TextField_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._TextField_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TextField_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._TextField_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._TextField_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._TextField_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._TextField_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._TextField_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._TextField_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._TextField_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._TextField_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._TextField_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._TextField_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._TextField_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._TextField_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._TextField_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._TextField_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._TextField_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._TextField_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._TextField_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._TextField_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._TextField_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._TextField_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._TextField_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._TextField_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._TextField_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._TextField_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._TextField_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._TextField_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._TextField_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._TextField_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._TextField_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._TextField_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._TextField_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._TextField_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._TextField_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._TextField_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._TextField_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._TextField_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._TextField_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._TextField_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._TextField_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._TextField_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._TextField_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._TextField_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._TextField_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._TextField_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._TextField_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._TextField_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._TextField_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._TextField_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._TextField_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._TextField_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._TextField_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._TextField_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._TextField_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._TextField_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._TextField_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._TextField_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._TextField_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._TextField_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._TextField_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._TextField_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._TextField_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._TextField_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._TextField_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._TextField_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._TextField_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._TextField_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._TextField_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._TextField_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._TextField_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._TextField_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._TextField_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._TextField_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._TextField_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._TextField_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._TextField_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._TextField_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._TextField_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._TextField_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._TextField_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._TextField_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._TextField_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._TextField_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._TextField_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._TextField_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._TextField_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._TextField_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._TextField_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._TextField_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._TextField_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._TextField_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._TextField_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._TextField_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._TextField_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._TextField_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._TextField_activate(this.nativePtr);
	}

	deactivate() {
		Module._TextField_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._TextField_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Texture3DEffect {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Texture3DEffect_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(filename) {
		const filenameBuffer = Module._malloc(filename.length+1);
		Module.stringToUTF8(filename, filenameBuffer, filename.length+1);
		var __result = Module._Texture3DEffect_create(filenameBuffer);
		Module._free(filenameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture3DEffect(__result);
		}
	}

	static createWithTexture(texture) {
		var __result = Module._Texture3DEffect_createWithTexture(texture.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture3DEffect(__result);
		}
	}

	static createWithSpriteFrame(spriteFrame) {
		var __result = Module._Texture3DEffect_createWithSpriteFrame(spriteFrame.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture3DEffect(__result);
		}
	}

	setTexture(texture) {
		Module._Texture3DEffect_setTexture(this.nativePtr, texture.nativePtr);
	}

	setTextureRect(rect, rotated, untrimmedSize) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		var pbuntrimmedSize = PBBKSizeF.create();
		pbuntrimmedSize.width = untrimmedSize.width;
		pbuntrimmedSize.height = untrimmedSize.height;
		const untrimmedSizeBuffer = PBBKSizeF.buffer(pbuntrimmedSize);
		Module._Texture3DEffect_setTextureRect(this.nativePtr, rectBuffer, rotated, untrimmedSizeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		PBBKSizeF.freeBuffer(untrimmedSizeBuffer);
	}

	setVertexRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Texture3DEffect_setVertexRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	setCenterRectNormalized(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Texture3DEffect_setCenterRectNormalized(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRectNormalized() {
		Module._Texture3DEffect_getCenterRectNormalized(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setCenterRect(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Texture3DEffect_setCenterRect(this.nativePtr, rectBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
	}

	getCenterRect() {
		Module._Texture3DEffect_getCenterRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setSpriteFrame(frame) {
		Module._Texture3DEffect_setSpriteFrame(this.nativePtr, frame.nativePtr);
	}

	getSpriteFrame() {
		var __result = Module._Texture3DEffect_getSpriteFrame(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SpriteFrame(__result);
		}
	}

	isFrameDisplayed(frame) {
		var __result = Module._Texture3DEffect_isFrameDisplayed(this.nativePtr, frame.nativePtr);
		return __result;
	}

	isFlippedX() {
		var __result = Module._Texture3DEffect_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Texture3DEffect_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedY() {
		var __result = Module._Texture3DEffect_isFlippedY(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Texture3DEffect_setFlippedY(this.nativePtr, flippedY);
	}

	setStretchEnabled(enabled) {
		Module._Texture3DEffect_setStretchEnabled(this.nativePtr, enabled);
	}

	isStretchEnabled() {
		var __result = Module._Texture3DEffect_isStretchEnabled(this.nativePtr);
		return __result;
	}

	setOpacityModifyRGB(modify) {
		Module._Texture3DEffect_setOpacityModifyRGB(this.nativePtr, modify);
	}

	isOpacityModifyRGB() {
		var __result = Module._Texture3DEffect_isOpacityModifyRGB(this.nativePtr);
		return __result;
	}

	setInputLUT3D(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Texture3DEffect_setInputLUT3D(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setScaleX(scaleX) {
		Module._Texture3DEffect_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Texture3DEffect_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Texture3DEffect_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Texture3DEffect_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Texture3DEffect_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Texture3DEffect_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Texture3DEffect_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Texture3DEffect_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Texture3DEffect_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Texture3DEffect_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Texture3DEffect_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Texture3DEffect_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Texture3DEffect_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Texture3DEffect_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Texture3DEffect_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Texture3DEffect_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Texture3DEffect_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Texture3DEffect_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Texture3DEffect_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Texture3DEffect_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Texture3DEffect_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Texture3DEffect_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Texture3DEffect_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Texture3DEffect_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Texture3DEffect_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Texture3DEffect_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Texture3DEffect_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Texture3DEffect_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Texture3DEffect_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Texture3DEffect_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Texture3DEffect_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Texture3DEffect_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Texture3DEffect_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Texture3DEffect_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Texture3DEffect_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Texture3DEffect_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Texture3DEffect_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Texture3DEffect_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Texture3DEffect_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Texture3DEffect_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Texture3DEffect_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Texture3DEffect_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Texture3DEffect_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Texture3DEffect_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Texture3DEffect_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Texture3DEffect_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Texture3DEffect_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Texture3DEffect_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Texture3DEffect_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Texture3DEffect_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Texture3DEffect_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Texture3DEffect_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Texture3DEffect_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Texture3DEffect_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Texture3DEffect_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Texture3DEffect_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Texture3DEffect_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Texture3DEffect_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Texture3DEffect_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Texture3DEffect_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Texture3DEffect_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Texture3DEffect_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Texture3DEffect_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Texture3DEffect_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Texture3DEffect_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Texture3DEffect_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Texture3DEffect_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Texture3DEffect_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Texture3DEffect_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Texture3DEffect_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Texture3DEffect_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Texture3DEffect_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Texture3DEffect_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Texture3DEffect_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Texture3DEffect_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Texture3DEffect_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Texture3DEffect_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Texture3DEffect_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Texture3DEffect_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Texture3DEffect_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Texture3DEffect_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Texture3DEffect_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Texture3DEffect_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Texture3DEffect_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Texture3DEffect_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Texture3DEffect_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Texture3DEffect_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Texture3DEffect_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Texture3DEffect_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Texture3DEffect_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Texture3DEffect_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Texture3DEffect_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Texture3DEffect_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Texture3DEffect_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Texture3DEffect_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Texture3DEffect_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Texture3DEffect_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Texture3DEffect_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Texture3DEffect_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Texture3DEffect_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Texture3DEffect_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Texture3DEffect_activate(this.nativePtr);
	}

	deactivate() {
		Module._Texture3DEffect_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Texture3DEffect_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class TileMapAtlas {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._TileMapAtlas_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(tile, mapFile, tileWidth, tileHeight) {
		const tileBuffer = Module._malloc(tile.length+1);
		Module.stringToUTF8(tile, tileBuffer, tile.length+1);
		const mapFileBuffer = Module._malloc(mapFile.length+1);
		Module.stringToUTF8(mapFile, mapFileBuffer, mapFile.length+1);
		var __result = Module._TileMapAtlas_create(tileBuffer, mapFileBuffer, tileWidth, tileHeight);
		Module._free(tileBuffer);
		Module._free(mapFileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TileMapAtlas(__result);
		}
	}

	getTileAt(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TileMapAtlas_getTileAt(this.nativePtr, positionBuffer, PBColor3B.nativeBuffer);
		PBVector2.freeBuffer(positionBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	tileAt(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TileMapAtlas_tileAt(this.nativePtr, positionBuffer, PBColor3B.nativeBuffer);
		PBVector2.freeBuffer(positionBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTile(tile, position) {
		var pbtile = PBColor3B.create();
		pbtile.r = tile.r;
		pbtile.g = tile.g;
		pbtile.b = tile.b;
		const tileBuffer = PBColor3B.buffer(pbtile);
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TileMapAtlas_setTile(this.nativePtr, tileBuffer, positionBuffer);
		PBColor3B.freeBuffer(tileBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	releaseMap() {
		Module._TileMapAtlas_releaseMap(this.nativePtr);
	}

	getTexture() {
		var __result = Module._TileMapAtlas_getTexture(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture2D(__result);
		}
	}

	setTexture(texture) {
		Module._TileMapAtlas_setTexture(this.nativePtr, texture.nativePtr);
	}

	setOpacityModifyRGB(isOpacityModifyRGB) {
		Module._TileMapAtlas_setOpacityModifyRGB(this.nativePtr, isOpacityModifyRGB);
	}

	getColor() {
		Module._TileMapAtlas_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._TileMapAtlas_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	setOpacity(opacity) {
		Module._TileMapAtlas_setOpacity(this.nativePtr, opacity);
	}

	setScaleX(scaleX) {
		Module._TileMapAtlas_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._TileMapAtlas_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._TileMapAtlas_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._TileMapAtlas_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._TileMapAtlas_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._TileMapAtlas_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._TileMapAtlas_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._TileMapAtlas_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._TileMapAtlas_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._TileMapAtlas_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._TileMapAtlas_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._TileMapAtlas_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._TileMapAtlas_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._TileMapAtlas_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._TileMapAtlas_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._TileMapAtlas_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._TileMapAtlas_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._TileMapAtlas_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._TileMapAtlas_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._TileMapAtlas_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._TileMapAtlas_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._TileMapAtlas_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._TileMapAtlas_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._TileMapAtlas_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._TileMapAtlas_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._TileMapAtlas_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._TileMapAtlas_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._TileMapAtlas_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._TileMapAtlas_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._TileMapAtlas_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._TileMapAtlas_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._TileMapAtlas_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._TileMapAtlas_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._TileMapAtlas_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._TileMapAtlas_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._TileMapAtlas_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._TileMapAtlas_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._TileMapAtlas_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._TileMapAtlas_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._TileMapAtlas_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._TileMapAtlas_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._TileMapAtlas_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._TileMapAtlas_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._TileMapAtlas_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._TileMapAtlas_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._TileMapAtlas_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._TileMapAtlas_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._TileMapAtlas_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._TileMapAtlas_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._TileMapAtlas_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._TileMapAtlas_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._TileMapAtlas_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._TileMapAtlas_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._TileMapAtlas_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._TileMapAtlas_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._TileMapAtlas_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._TileMapAtlas_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._TileMapAtlas_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._TileMapAtlas_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._TileMapAtlas_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._TileMapAtlas_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._TileMapAtlas_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._TileMapAtlas_getOpacity(this.nativePtr);
		return __result;
	}

	isCascadeOpacityEnabled() {
		var __result = Module._TileMapAtlas_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._TileMapAtlas_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._TileMapAtlas_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._TileMapAtlas_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._TileMapAtlas_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._TileMapAtlas_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._TileMapAtlas_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._TileMapAtlas_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._TileMapAtlas_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._TileMapAtlas_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._TileMapAtlas_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._TileMapAtlas_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._TileMapAtlas_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._TileMapAtlas_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._TileMapAtlas_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._TileMapAtlas_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._TileMapAtlas_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._TileMapAtlas_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._TileMapAtlas_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._TileMapAtlas_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._TileMapAtlas_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._TileMapAtlas_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._TileMapAtlas_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._TileMapAtlas_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._TileMapAtlas_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._TileMapAtlas_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._TileMapAtlas_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._TileMapAtlas_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._TileMapAtlas_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._TileMapAtlas_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._TileMapAtlas_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._TileMapAtlas_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._TileMapAtlas_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._TileMapAtlas_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._TileMapAtlas_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._TileMapAtlas_activate(this.nativePtr);
	}

	deactivate() {
		Module._TileMapAtlas_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._TileMapAtlas_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GController {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GController_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	getParent() {
		var __result = Module._GController_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	setParent(value) {
		Module._GController_setParent(this.nativePtr, value.nativePtr);
	}

	getSelectedIndex() {
		var __result = Module._GController_getSelectedIndex(this.nativePtr);
		return __result;
	}

	setSelectedIndex(value, triggerEvent) {
		Module._GController_setSelectedIndex(this.nativePtr, value, triggerEvent);
	}

	getPrevisousIndex() {
		var __result = Module._GController_getPrevisousIndex(this.nativePtr);
		return __result;
	}

	getPageCount() {
		var __result = Module._GController_getPageCount(this.nativePtr);
		return __result;
	}

	runActions() {
		Module._GController_runActions(this.nativePtr);
	}

	removeEventListener(eventType, eventTag) {
		Module._GController_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GController_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GController_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GController_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GController_destroy(this.nativePtr);
	}

	release() {
		Module._GController_release(this.nativePtr);
	}

	retain() {
		Module._GController_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GController_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GController_activate(this.nativePtr);
	}

	deactivate() {
		Module._GController_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GController_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GButton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GButton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GButton_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GButton(__result);
		}
	}

	getTitleColor() {
		Module._GButton_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GButton_setTitleColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getTitleFontSize() {
		var __result = Module._GButton_getTitleFontSize(this.nativePtr);
		return __result;
	}

	setTitleFontSize(value) {
		Module._GButton_setTitleFontSize(this.nativePtr, value);
	}

	isSelected() {
		var __result = Module._GButton_isSelected(this.nativePtr);
		return __result;
	}

	setSelected(value) {
		Module._GButton_setSelected(this.nativePtr, value);
	}

	getRelatedController() {
		var __result = Module._GButton_getRelatedController(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	setRelatedController(c) {
		Module._GButton_setRelatedController(this.nativePtr, c.nativePtr);
	}

	isChangeStateOnClick() {
		var __result = Module._GButton_isChangeStateOnClick(this.nativePtr);
		return __result;
	}

	setChangeStateOnClick(value) {
		Module._GButton_setChangeStateOnClick(this.nativePtr, value);
	}

	addChild(child) {
		var __result = Module._GButton_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GButton_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GButton_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GButton_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GButton_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GButton_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GButton_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GButton_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GButton_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GButton_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GButton_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GButton_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GButton_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GButton_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GButton_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GButton_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GButton_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GButton_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GButton_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GButton_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GButton_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GButton_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GButton_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GButton_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GButton_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GButton_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GButton_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GButton_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GButton_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GButton_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GButton_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GButton_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GButton_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GButton_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GButton_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GButton_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GButton_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GButton_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GButton_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GButton_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GButton_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GButton_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GButton_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GButton_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GButton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GButton_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GButton_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GButton_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GButton_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GButton_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GButton_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GButton_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GButton_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GButton_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GButton_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GButton_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GButton_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GButton_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GButton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GButton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GButton_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GButton_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GButton_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GButton_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GButton_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GButton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GButton_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GButton_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GButton_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GButton_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GButton_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GButton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GButton_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GButton_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GButton_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GButton_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GButton_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GButton_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GButton_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GButton_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GButton_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GButton_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GButton_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GButton_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GButton_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GButton_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GButton_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GButton_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GButton_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GButton_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GButton_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GButton_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GButton_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GButton_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GButton_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GButton_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GButton_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GButton_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GButton_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GButton_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GButton_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GButton_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GButton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GButton_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GButton_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GButton_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GButton_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GButton_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GButton_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GButton_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GButton_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GButton_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GButton_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GButton_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GButton_destroy(this.nativePtr);
	}

	release() {
		Module._GButton_release(this.nativePtr);
	}

	retain() {
		Module._GButton_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GButton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GButton_activate(this.nativePtr);
	}

	deactivate() {
		Module._GButton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GButton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GComboBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GComboBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GComboBox_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComboBox(__result);
		}
	}

	getTitleColor() {
		Module._GComboBox_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GComboBox_setTitleColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getTitleFontSize() {
		var __result = Module._GComboBox_getTitleFontSize(this.nativePtr);
		return __result;
	}

	setTitleFontSize(value) {
		Module._GComboBox_setTitleFontSize(this.nativePtr, value);
	}

	getSelectedIndex() {
		var __result = Module._GComboBox_getSelectedIndex(this.nativePtr);
		return __result;
	}

	setSelectedIndex(value) {
		Module._GComboBox_setSelectedIndex(this.nativePtr, value);
	}

	getSelectionController() {
		var __result = Module._GComboBox_getSelectionController(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	setSelectionController(value) {
		Module._GComboBox_setSelectionController(this.nativePtr, value.nativePtr);
	}

	refresh() {
		Module._GComboBox_refresh(this.nativePtr);
	}

	addChild(child) {
		var __result = Module._GComboBox_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GComboBox_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GComboBox_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GComboBox_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GComboBox_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GComboBox_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GComboBox_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GComboBox_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GComboBox_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GComboBox_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GComboBox_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GComboBox_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GComboBox_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GComboBox_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GComboBox_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GComboBox_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GComboBox_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GComboBox_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GComboBox_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GComboBox_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GComboBox_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GComboBox_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GComboBox_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GComboBox_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GComboBox_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GComboBox_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GComboBox_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GComboBox_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GComboBox_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GComboBox_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GComboBox_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GComboBox_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GComboBox_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GComboBox_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GComboBox_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComboBox_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GComboBox_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GComboBox_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GComboBox_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GComboBox_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GComboBox_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GComboBox_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GComboBox_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GComboBox_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GComboBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GComboBox_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GComboBox_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GComboBox_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GComboBox_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GComboBox_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GComboBox_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GComboBox_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GComboBox_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GComboBox_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GComboBox_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GComboBox_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GComboBox_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GComboBox_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GComboBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GComboBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GComboBox_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GComboBox_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GComboBox_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GComboBox_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GComboBox_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GComboBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GComboBox_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GComboBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GComboBox_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GComboBox_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GComboBox_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GComboBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GComboBox_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GComboBox_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GComboBox_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GComboBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GComboBox_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GComboBox_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GComboBox_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GComboBox_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GComboBox_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GComboBox_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GComboBox_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GComboBox_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GComboBox_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GComboBox_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GComboBox_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GComboBox_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GComboBox_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GComboBox_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GComboBox_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GComboBox_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GComboBox_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GComboBox_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComboBox_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComboBox_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComboBox_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComboBox_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComboBox_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GComboBox_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GComboBox_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GComboBox_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GComboBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GComboBox_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GComboBox_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GComboBox_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GComboBox_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GComboBox_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GComboBox_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GComboBox_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GComboBox_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GComboBox_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GComboBox_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GComboBox_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GComboBox_destroy(this.nativePtr);
	}

	release() {
		Module._GComboBox_release(this.nativePtr);
	}

	retain() {
		Module._GComboBox_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GComboBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GComboBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._GComboBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GComboBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GComponent {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GComponent_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GComponent_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	addChild(child) {
		var __result = Module._GComponent_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GComponent_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GComponent_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GComponent_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GComponent_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GComponent_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GComponent_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GComponent_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GComponent_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GComponent_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GComponent_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GComponent_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GComponent_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GComponent_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GComponent_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GComponent_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GComponent_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GComponent_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GComponent_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GComponent_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GComponent_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GComponent_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GComponent_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GComponent_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GComponent_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GComponent_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GComponent_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GComponent_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GComponent_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GComponent_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GComponent_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GComponent_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GComponent_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GComponent_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GComponent_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComponent_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GComponent_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GComponent_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GComponent_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GComponent_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GComponent_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GComponent_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GComponent_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GComponent_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GComponent_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GComponent_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GComponent_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GComponent_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GComponent_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GComponent_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GComponent_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GComponent_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GComponent_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GComponent_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GComponent_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GComponent_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GComponent_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GComponent_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GComponent_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GComponent_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GComponent_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GComponent_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GComponent_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GComponent_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GComponent_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GComponent_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GComponent_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GComponent_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GComponent_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GComponent_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GComponent_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GComponent_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GComponent_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GComponent_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GComponent_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GComponent_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GComponent_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GComponent_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GComponent_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GComponent_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GComponent_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GComponent_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GComponent_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GComponent_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GComponent_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GComponent_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GComponent_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GComponent_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GComponent_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GComponent_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GComponent_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GComponent_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GComponent_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GComponent_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComponent_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComponent_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GComponent_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComponent_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GComponent_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GComponent_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GComponent_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GComponent_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GComponent_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GComponent_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GComponent_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GComponent_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GComponent_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GComponent_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GComponent_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GComponent_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GComponent_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GComponent_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GComponent_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GComponent_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GComponent_destroy(this.nativePtr);
	}

	release() {
		Module._GComponent_release(this.nativePtr);
	}

	retain() {
		Module._GComponent_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GComponent_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GComponent_activate(this.nativePtr);
	}

	deactivate() {
		Module._GComponent_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GComponent_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GGraph {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GGraph_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GGraph_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGraph(__result);
		}
	}

	drawRect(aWidth, aHeight, lineSize, lineColor, fillColor) {
		var pblineColor = PBColor4F.create();
		pblineColor.r = lineColor.r;
		pblineColor.g = lineColor.g;
		pblineColor.b = lineColor.b;
		pblineColor.a = lineColor.a;
		const lineColorBuffer = PBColor4F.buffer(pblineColor);
		var pbfillColor = PBColor4F.create();
		pbfillColor.r = fillColor.r;
		pbfillColor.g = fillColor.g;
		pbfillColor.b = fillColor.b;
		pbfillColor.a = fillColor.a;
		const fillColorBuffer = PBColor4F.buffer(pbfillColor);
		Module._GGraph_drawRect(this.nativePtr, aWidth, aHeight, lineSize, lineColorBuffer, fillColorBuffer);
		PBColor4F.freeBuffer(lineColorBuffer);
		PBColor4F.freeBuffer(fillColorBuffer);
	}

	drawEllipse(aWidth, aHeight, lineSize, lineColor, fillColor) {
		var pblineColor = PBColor4F.create();
		pblineColor.r = lineColor.r;
		pblineColor.g = lineColor.g;
		pblineColor.b = lineColor.b;
		pblineColor.a = lineColor.a;
		const lineColorBuffer = PBColor4F.buffer(pblineColor);
		var pbfillColor = PBColor4F.create();
		pbfillColor.r = fillColor.r;
		pbfillColor.g = fillColor.g;
		pbfillColor.b = fillColor.b;
		pbfillColor.a = fillColor.a;
		const fillColorBuffer = PBColor4F.buffer(pbfillColor);
		Module._GGraph_drawEllipse(this.nativePtr, aWidth, aHeight, lineSize, lineColorBuffer, fillColorBuffer);
		PBColor4F.freeBuffer(lineColorBuffer);
		PBColor4F.freeBuffer(fillColorBuffer);
	}

	isEmpty() {
		var __result = Module._GGraph_isEmpty(this.nativePtr);
		return __result;
	}

	getColor() {
		Module._GGraph_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GGraph_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getSourceSize() {
		Module._GGraph_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GGraph_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GGraph_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GGraph_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GGraph_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GGraph_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GGraph_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GGraph_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GGraph_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GGraph_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GGraph_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GGraph_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GGraph_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GGraph_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GGraph_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GGraph_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GGraph_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GGraph_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GGraph_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GGraph_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GGraph_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GGraph_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GGraph_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GGraph_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GGraph_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GGraph_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GGraph_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GGraph_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GGraph_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GGraph_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GGraph_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GGraph_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GGraph_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GGraph_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GGraph_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GGraph_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GGraph_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GGraph_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GGraph_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GGraph_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GGraph_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GGraph_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GGraph_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GGraph_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GGraph_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GGraph_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GGraph_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GGraph_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GGraph_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GGraph_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GGraph_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GGraph_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GGraph_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GGraph_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GGraph_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GGraph_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GGraph_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GGraph_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GGraph_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGraph_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GGraph_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGraph_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGraph_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GGraph_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GGraph_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GGraph_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GGraph_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GGraph_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GGraph_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GGraph_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GGraph_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GGraph_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GGraph_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GGraph_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GGraph_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GGraph_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GGraph_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GGraph_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GGraph_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GGraph_destroy(this.nativePtr);
	}

	release() {
		Module._GGraph_release(this.nativePtr);
	}

	retain() {
		Module._GGraph_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GGraph_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GGraph_activate(this.nativePtr);
	}

	deactivate() {
		Module._GGraph_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GGraph_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GGroup {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GGroup_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GGroup_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	getLayoutType() {
		var __result = Module._GGroup_getLayoutType(this.nativePtr);
		return __result;
	}

	setLayoutType(value) {
		Module._GGroup_setLayoutType(this.nativePtr, value);
	}

	getColumnGap() {
		var __result = Module._GGroup_getColumnGap(this.nativePtr);
		return __result;
	}

	setColumnGap(value) {
		Module._GGroup_setColumnGap(this.nativePtr, value);
	}

	getLineGap() {
		var __result = Module._GGroup_getLineGap(this.nativePtr);
		return __result;
	}

	setLineGap(value) {
		Module._GGroup_setLineGap(this.nativePtr, value);
	}

	isExcludeInvisibles() {
		var __result = Module._GGroup_isExcludeInvisibles(this.nativePtr);
		return __result;
	}

	setExcludeInvisibles(value) {
		Module._GGroup_setExcludeInvisibles(this.nativePtr, value);
	}

	isAutoSizeDisabled() {
		var __result = Module._GGroup_isAutoSizeDisabled(this.nativePtr);
		return __result;
	}

	setAutoSizeDisabled(value) {
		Module._GGroup_setAutoSizeDisabled(this.nativePtr, value);
	}

	getMainGridIndex() {
		var __result = Module._GGroup_getMainGridIndex(this.nativePtr);
		return __result;
	}

	setMainGridIndex(value) {
		Module._GGroup_setMainGridIndex(this.nativePtr, value);
	}

	getMainGridMinSize() {
		var __result = Module._GGroup_getMainGridMinSize(this.nativePtr);
		return __result;
	}

	setMainGridMinSize(value) {
		Module._GGroup_setMainGridMinSize(this.nativePtr, value);
	}

	setBoundsChangedFlag(positionChangedOnly) {
		Module._GGroup_setBoundsChangedFlag(this.nativePtr, positionChangedOnly);
	}

	moveChildren(dx, dy) {
		Module._GGroup_moveChildren(this.nativePtr, dx, dy);
	}

	resizeChildren(dw, dh) {
		Module._GGroup_resizeChildren(this.nativePtr, dw, dh);
	}

	getSourceSize() {
		Module._GGroup_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GGroup_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GGroup_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GGroup_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GGroup_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GGroup_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GGroup_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GGroup_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GGroup_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GGroup_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GGroup_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GGroup_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GGroup_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GGroup_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GGroup_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GGroup_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GGroup_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GGroup_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GGroup_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GGroup_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GGroup_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GGroup_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GGroup_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GGroup_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GGroup_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GGroup_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GGroup_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GGroup_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GGroup_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GGroup_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GGroup_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GGroup_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GGroup_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GGroup_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GGroup_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GGroup_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GGroup_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GGroup_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GGroup_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GGroup_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GGroup_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GGroup_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GGroup_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GGroup_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GGroup_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GGroup_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GGroup_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GGroup_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GGroup_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GGroup_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GGroup_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GGroup_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GGroup_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GGroup_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GGroup_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GGroup_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GGroup_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GGroup_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GGroup_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGroup_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GGroup_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGroup_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GGroup_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GGroup_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GGroup_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GGroup_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GGroup_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GGroup_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GGroup_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GGroup_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GGroup_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GGroup_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GGroup_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GGroup_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GGroup_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GGroup_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GGroup_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GGroup_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GGroup_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GGroup_destroy(this.nativePtr);
	}

	release() {
		Module._GGroup_release(this.nativePtr);
	}

	retain() {
		Module._GGroup_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GGroup_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GGroup_activate(this.nativePtr);
	}

	deactivate() {
		Module._GGroup_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GGroup_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GImage {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GImage_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GImage_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GImage(__result);
		}
	}

	getFlipType() {
		var __result = Module._GImage_getFlipType(this.nativePtr);
		return __result;
	}

	setFlipType(value) {
		Module._GImage_setFlipType(this.nativePtr, value);
	}

	getColor() {
		Module._GImage_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GImage_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getFillMethod2() {
		var __result = Module._GImage_getFillMethod2(this.nativePtr);
		return __result;
	}

	setFillMethod(value) {
		Module._GImage_setFillMethod(this.nativePtr, value);
	}

	getFillOrigin2() {
		var __result = Module._GImage_getFillOrigin2(this.nativePtr);
		return __result;
	}

	setFillOrigin(value) {
		Module._GImage_setFillOrigin(this.nativePtr, value);
	}

	isFillClockwise() {
		var __result = Module._GImage_isFillClockwise(this.nativePtr);
		return __result;
	}

	setFillClockwise(value) {
		Module._GImage_setFillClockwise(this.nativePtr, value);
	}

	getFillAmount() {
		var __result = Module._GImage_getFillAmount(this.nativePtr);
		return __result;
	}

	setFillAmount(value) {
		Module._GImage_setFillAmount(this.nativePtr, value);
	}

	getSourceSize() {
		Module._GImage_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GImage_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GImage_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GImage_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GImage_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GImage_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GImage_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GImage_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GImage_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GImage_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GImage_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GImage_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GImage_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GImage_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GImage_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GImage_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GImage_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GImage_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GImage_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GImage_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GImage_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GImage_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GImage_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GImage_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GImage_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GImage_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GImage_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GImage_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GImage_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GImage_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GImage_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GImage_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GImage_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GImage_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GImage_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GImage_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GImage_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GImage_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GImage_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GImage_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GImage_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GImage_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GImage_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GImage_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GImage_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GImage_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GImage_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GImage_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GImage_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GImage_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GImage_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GImage_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GImage_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GImage_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GImage_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GImage_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GImage_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GImage_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GImage_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GImage_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GImage_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GImage_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GImage_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GImage_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GImage_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GImage_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GImage_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GImage_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GImage_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GImage_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GImage_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GImage_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GImage_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GImage_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GImage_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GImage_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GImage_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GImage_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GImage_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GImage_destroy(this.nativePtr);
	}

	release() {
		Module._GImage_release(this.nativePtr);
	}

	retain() {
		Module._GImage_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GImage_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GImage_activate(this.nativePtr);
	}

	deactivate() {
		Module._GImage_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GImage_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GLabel {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GLabel_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GLabel_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GLabel(__result);
		}
	}

	getTitleColor() {
		Module._GLabel_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GLabel_setTitleColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getTitleFontSize() {
		var __result = Module._GLabel_getTitleFontSize(this.nativePtr);
		return __result;
	}

	setTitleFontSize(value) {
		Module._GLabel_setTitleFontSize(this.nativePtr, value);
	}

	addChild(child) {
		var __result = Module._GLabel_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GLabel_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GLabel_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GLabel_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GLabel_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GLabel_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GLabel_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GLabel_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GLabel_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GLabel_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GLabel_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GLabel_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GLabel_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GLabel_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GLabel_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GLabel_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GLabel_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GLabel_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GLabel_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GLabel_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GLabel_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GLabel_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GLabel_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GLabel_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GLabel_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GLabel_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GLabel_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GLabel_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GLabel_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GLabel_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GLabel_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GLabel_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GLabel_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GLabel_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GLabel_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLabel_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GLabel_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GLabel_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GLabel_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GLabel_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GLabel_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GLabel_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GLabel_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GLabel_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GLabel_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GLabel_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GLabel_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GLabel_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GLabel_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GLabel_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GLabel_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GLabel_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GLabel_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GLabel_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GLabel_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GLabel_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GLabel_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GLabel_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GLabel_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GLabel_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GLabel_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GLabel_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GLabel_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GLabel_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GLabel_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GLabel_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GLabel_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GLabel_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GLabel_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GLabel_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GLabel_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GLabel_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GLabel_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GLabel_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GLabel_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GLabel_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GLabel_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GLabel_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GLabel_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GLabel_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GLabel_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GLabel_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GLabel_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GLabel_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GLabel_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GLabel_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GLabel_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GLabel_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GLabel_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GLabel_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GLabel_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GLabel_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GLabel_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GLabel_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLabel_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLabel_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLabel_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLabel_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLabel_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GLabel_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GLabel_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GLabel_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GLabel_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GLabel_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GLabel_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GLabel_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GLabel_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GLabel_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GLabel_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GLabel_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GLabel_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GLabel_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GLabel_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GLabel_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GLabel_destroy(this.nativePtr);
	}

	release() {
		Module._GLabel_release(this.nativePtr);
	}

	retain() {
		Module._GLabel_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GLabel_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GLabel_activate(this.nativePtr);
	}

	deactivate() {
		Module._GLabel_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GLabel_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GList {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GList_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GList_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GList(__result);
		}
	}

	getLineCount() {
		var __result = Module._GList_getLineCount(this.nativePtr);
		return __result;
	}

	setLineCount(value) {
		Module._GList_setLineCount(this.nativePtr, value);
	}

	getColumnCount() {
		var __result = Module._GList_getColumnCount(this.nativePtr);
		return __result;
	}

	setColumnCount(value) {
		Module._GList_setColumnCount(this.nativePtr, value);
	}

	getColumnGap() {
		var __result = Module._GList_getColumnGap(this.nativePtr);
		return __result;
	}

	setColumnGap(value) {
		Module._GList_setColumnGap(this.nativePtr, value);
	}

	getLineGap() {
		var __result = Module._GList_getLineGap(this.nativePtr);
		return __result;
	}

	setLineGap(value) {
		Module._GList_setLineGap(this.nativePtr, value);
	}

	getAutoResizeItem() {
		var __result = Module._GList_getAutoResizeItem(this.nativePtr);
		return __result;
	}

	setAutoResizeItem(value) {
		Module._GList_setAutoResizeItem(this.nativePtr, value);
	}

	getFromPool() {
		var __result = Module._GList_getFromPool(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addItemFromPool() {
		var __result = Module._GList_addItemFromPool(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChildToPoolAt(index) {
		Module._GList_removeChildToPoolAt(this.nativePtr, index);
	}

	removeChildToPool(child) {
		Module._GList_removeChildToPool(this.nativePtr, child.nativePtr);
	}

	removeChildrenToPool(beginIndex, endIndex) {
		Module._GList_removeChildrenToPool(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildrenToPool() {
		Module._GList_removeAllChildrenToPool(this.nativePtr);
	}

	getSelectedIndex() {
		var __result = Module._GList_getSelectedIndex(this.nativePtr);
		return __result;
	}

	setSelectedIndex(value) {
		Module._GList_setSelectedIndex(this.nativePtr, value);
	}

	resizeToFit(itemCount, minSize) {
		Module._GList_resizeToFit(this.nativePtr, itemCount, minSize);
	}

	scrollToView(index, ani, setFirst) {
		Module._GList_scrollToView(this.nativePtr, index, ani, setFirst);
	}

	setVirtual() {
		Module._GList_setVirtual(this.nativePtr);
	}

	setVirtualAndLoop() {
		Module._GList_setVirtualAndLoop(this.nativePtr);
	}

	isVirtual() {
		var __result = Module._GList_isVirtual(this.nativePtr);
		return __result;
	}

	refreshVirtualList() {
		Module._GList_refreshVirtualList(this.nativePtr);
	}

	getNumItems() {
		var __result = Module._GList_getNumItems(this.nativePtr);
		return __result;
	}

	setNumItems(value) {
		Module._GList_setNumItems(this.nativePtr, value);
	}

	childIndexToItemIndex(index) {
		var __result = Module._GList_childIndexToItemIndex(this.nativePtr, index);
		return __result;
	}

	itemIndexToChildIndex(index) {
		var __result = Module._GList_itemIndexToChildIndex(this.nativePtr, index);
		return __result;
	}

	setItemRenderer(renderer) {
		let rendererFunc = CustomCallback_31c0b288af0a2a61715fa69c5e211735_wasm_Generator(renderer);
		let rendererPtr = Module.addFunction(rendererFunc, vii);
		Module._GList_setItemRenderer(this.nativePtr, rendererPtr);
	}

	setItemProvider(itemProvider) {
		let itemProviderFunc = CustomCallback_92a8729d8dafee2b8fc27949c89d0ecc_wasm_Generator(itemProvider);
		let itemProviderPtr = Module.addFunction(itemProviderFunc, vi);
		Module._GList_setItemProvider(this.nativePtr, itemProviderPtr);
	}

	addChild(child) {
		var __result = Module._GList_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GList_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GList_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GList_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GList_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GList_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GList_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GList_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GList_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GList_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GList_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GList_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GList_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GList_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GList_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GList_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GList_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GList_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GList_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GList_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GList_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GList_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GList_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GList_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GList_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GList_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GList_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GList_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GList_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GList_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GList_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GList_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GList_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GList_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GList_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GList_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GList_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GList_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GList_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GList_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GList_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GList_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GList_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GList_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GList_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GList_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GList_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GList_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GList_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GList_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GList_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GList_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GList_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GList_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GList_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GList_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GList_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GList_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GList_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GList_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GList_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GList_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GList_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GList_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GList_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GList_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GList_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GList_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GList_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GList_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GList_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GList_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GList_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GList_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GList_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GList_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GList_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GList_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GList_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GList_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GList_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GList_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GList_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GList_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GList_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GList_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GList_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GList_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GList_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GList_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GList_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GList_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GList_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GList_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GList_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GList_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GList_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GList_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GList_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GList_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GList_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GList_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GList_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GList_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GList_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GList_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GList_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GList_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GList_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GList_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GList_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GList_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GList_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GList_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GList_destroy(this.nativePtr);
	}

	release() {
		Module._GList_release(this.nativePtr);
	}

	retain() {
		Module._GList_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GList_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GList_activate(this.nativePtr);
	}

	deactivate() {
		Module._GList_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GList_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GLoader {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GLoader_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GLoader_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GLoader(__result);
		}
	}

	getAutoSize() {
		var __result = Module._GLoader_getAutoSize(this.nativePtr);
		return __result;
	}

	setAutoSize(value) {
		Module._GLoader_setAutoSize(this.nativePtr, value);
	}

	isShrinkOnly() {
		var __result = Module._GLoader_isShrinkOnly(this.nativePtr);
		return __result;
	}

	setShrinkOnly(value) {
		Module._GLoader_setShrinkOnly(this.nativePtr, value);
	}

	getContentSize() {
		Module._GLoader_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getColor() {
		Module._GLoader_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GLoader_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	isPlaying() {
		var __result = Module._GLoader_isPlaying(this.nativePtr);
		return __result;
	}

	setPlaying(value) {
		Module._GLoader_setPlaying(this.nativePtr, value);
	}

	getFrame() {
		var __result = Module._GLoader_getFrame(this.nativePtr);
		return __result;
	}

	setFrame(value) {
		Module._GLoader_setFrame(this.nativePtr, value);
	}

	getFillAmount() {
		var __result = Module._GLoader_getFillAmount(this.nativePtr);
		return __result;
	}

	setFillAmount(value) {
		Module._GLoader_setFillAmount(this.nativePtr, value);
	}

	getSourceSize() {
		Module._GLoader_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GLoader_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GLoader_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GLoader_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GLoader_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GLoader_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GLoader_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GLoader_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GLoader_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GLoader_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GLoader_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GLoader_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GLoader_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GLoader_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GLoader_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GLoader_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GLoader_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GLoader_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GLoader_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GLoader_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GLoader_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GLoader_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GLoader_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	center(restraint) {
		Module._GLoader_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GLoader_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GLoader_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GLoader_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GLoader_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GLoader_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GLoader_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GLoader_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GLoader_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GLoader_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GLoader_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GLoader_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GLoader_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GLoader_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GLoader_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GLoader_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GLoader_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GLoader_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GLoader_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GLoader_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GLoader_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GLoader_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GLoader_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GLoader_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GLoader_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GLoader_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GLoader_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GLoader_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GLoader_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GLoader_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GLoader_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GLoader_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GLoader_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GLoader_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLoader_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLoader_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GLoader_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GLoader_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GLoader_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GLoader_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GLoader_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GLoader_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GLoader_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GLoader_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GLoader_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GLoader_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GLoader_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GLoader_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GLoader_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GLoader_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GLoader_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GLoader_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GLoader_destroy(this.nativePtr);
	}

	release() {
		Module._GLoader_release(this.nativePtr);
	}

	retain() {
		Module._GLoader_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GLoader_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GLoader_activate(this.nativePtr);
	}

	deactivate() {
		Module._GLoader_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GLoader_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GLoader3D {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GLoader3D_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	getAutoSize() {
		var __result = Module._GLoader3D_getAutoSize(this.nativePtr);
		return __result;
	}

	setAutoSize(value) {
		Module._GLoader3D_setAutoSize(this.nativePtr, value);
	}

	isShrinkOnly() {
		var __result = Module._GLoader3D_isShrinkOnly(this.nativePtr);
		return __result;
	}

	setShrinkOnly(value) {
		Module._GLoader3D_setShrinkOnly(this.nativePtr, value);
	}

	getContent() {
		var __result = Module._GLoader3D_getContent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setContent(value) {
		Module._GLoader3D_setContent(this.nativePtr, value.nativePtr);
	}

	getColor() {
		Module._GLoader3D_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GLoader3D_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	isPlaying() {
		var __result = Module._GLoader3D_isPlaying(this.nativePtr);
		return __result;
	}

	setPlaying(value) {
		Module._GLoader3D_setPlaying(this.nativePtr, value);
	}

	getFrame() {
		var __result = Module._GLoader3D_getFrame(this.nativePtr);
		return __result;
	}

	setFrame(value) {
		Module._GLoader3D_setFrame(this.nativePtr, value);
	}

	getLoop() {
		var __result = Module._GLoader3D_getLoop(this.nativePtr);
		return __result;
	}

	setLoop(value) {
		Module._GLoader3D_setLoop(this.nativePtr, value);
	}

	getSourceSize() {
		Module._GLoader3D_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GLoader3D_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GLoader3D_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GLoader3D_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GLoader3D_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GLoader3D_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GLoader3D_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GLoader3D_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GLoader3D_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GLoader3D_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GLoader3D_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GLoader3D_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GLoader3D_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GLoader3D_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GLoader3D_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GLoader3D_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GLoader3D_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GLoader3D_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GLoader3D_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GLoader3D_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GLoader3D_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GLoader3D_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GLoader3D_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GLoader3D_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GLoader3D_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GLoader3D_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GLoader3D_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GLoader3D_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GLoader3D_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GLoader3D_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GLoader3D_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GLoader3D_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GLoader3D_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GLoader3D_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GLoader3D_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GLoader3D_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GLoader3D_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GLoader3D_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GLoader3D_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GLoader3D_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GLoader3D_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GLoader3D_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GLoader3D_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GLoader3D_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GLoader3D_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GLoader3D_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GLoader3D_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GLoader3D_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GLoader3D_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GLoader3D_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GLoader3D_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GLoader3D_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GLoader3D_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GLoader3D_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GLoader3D_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GLoader3D_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GLoader3D_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GLoader3D_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLoader3D_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader3D_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GLoader3D_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader3D_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GLoader3D_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GLoader3D_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GLoader3D_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GLoader3D_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GLoader3D_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GLoader3D_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GLoader3D_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GLoader3D_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GLoader3D_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GLoader3D_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GLoader3D_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GLoader3D_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GLoader3D_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GLoader3D_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GLoader3D_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GLoader3D_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GLoader3D_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GLoader3D_destroy(this.nativePtr);
	}

	release() {
		Module._GLoader3D_release(this.nativePtr);
	}

	retain() {
		Module._GLoader3D_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GLoader3D_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GLoader3D_activate(this.nativePtr);
	}

	deactivate() {
		Module._GLoader3D_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GLoader3D_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GMovieClip {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GMovieClip_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GMovieClip_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GMovieClip(__result);
		}
	}

	isPlaying() {
		var __result = Module._GMovieClip_isPlaying(this.nativePtr);
		return __result;
	}

	setPlaying(value) {
		Module._GMovieClip_setPlaying(this.nativePtr, value);
	}

	getFrame() {
		var __result = Module._GMovieClip_getFrame(this.nativePtr);
		return __result;
	}

	setFrame(value) {
		Module._GMovieClip_setFrame(this.nativePtr, value);
	}

	getTimeScale() {
		var __result = Module._GMovieClip_getTimeScale(this.nativePtr);
		return __result;
	}

	setTimeScale(value) {
		Module._GMovieClip_setTimeScale(this.nativePtr, value);
	}

	advance(time) {
		Module._GMovieClip_advance(this.nativePtr, time);
	}

	getColor() {
		Module._GMovieClip_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GMovieClip_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	setPlaySettings(start, end, times, endAt, completeCallback) {
		let completeCallbackFunc = Callback0Generator(completeCallback);
		let completeCallbackPtr = Module.addFunction(completeCallbackFunc, "vv");
		Module._GMovieClip_setPlaySettings(this.nativePtr, start, end, times, endAt, completeCallbackPtr);
	}

	getSourceSize() {
		Module._GMovieClip_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GMovieClip_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GMovieClip_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GMovieClip_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GMovieClip_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GMovieClip_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GMovieClip_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GMovieClip_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GMovieClip_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GMovieClip_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GMovieClip_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GMovieClip_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GMovieClip_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GMovieClip_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GMovieClip_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GMovieClip_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GMovieClip_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GMovieClip_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GMovieClip_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GMovieClip_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GMovieClip_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GMovieClip_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GMovieClip_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GMovieClip_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GMovieClip_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GMovieClip_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GMovieClip_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GMovieClip_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GMovieClip_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GMovieClip_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GMovieClip_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GMovieClip_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GMovieClip_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GMovieClip_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GMovieClip_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GMovieClip_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GMovieClip_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GMovieClip_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GMovieClip_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GMovieClip_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GMovieClip_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GMovieClip_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GMovieClip_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GMovieClip_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GMovieClip_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GMovieClip_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GMovieClip_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GMovieClip_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GMovieClip_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GMovieClip_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GMovieClip_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GMovieClip_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GMovieClip_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GMovieClip_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GMovieClip_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GMovieClip_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GMovieClip_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GMovieClip_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GMovieClip_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GMovieClip_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GMovieClip_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GMovieClip_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GMovieClip_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GMovieClip_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GMovieClip_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GMovieClip_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GMovieClip_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GMovieClip_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GMovieClip_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GMovieClip_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GMovieClip_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GMovieClip_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GMovieClip_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GMovieClip_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GMovieClip_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GMovieClip_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GMovieClip_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GMovieClip_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GMovieClip_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GMovieClip_destroy(this.nativePtr);
	}

	release() {
		Module._GMovieClip_release(this.nativePtr);
	}

	retain() {
		Module._GMovieClip_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GMovieClip_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GMovieClip_activate(this.nativePtr);
	}

	deactivate() {
		Module._GMovieClip_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GMovieClip_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GObject {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GObject_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GObject_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSourceSize() {
		Module._GObject_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GObject_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GObject_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GObject_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GObject_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GObject_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GObject_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GObject_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GObject_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GObject_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GObject_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GObject_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GObject_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GObject_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GObject_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GObject_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GObject_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GObject_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GObject_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GObject_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GObject_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GObject_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GObject_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GObject_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GObject_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GObject_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GObject_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GObject_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GObject_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GObject_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GObject_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GObject_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GObject_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GObject_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GObject_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GObject_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GObject_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GObject_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GObject_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GObject_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GObject_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GObject_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GObject_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GObject_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GObject_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GObject_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GObject_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GObject_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GObject_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GObject_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GObject_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GObject_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GObject_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GObject_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GObject_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GObject_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GObject_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GObject_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GObject_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GObject_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GObject_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GObject_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GObject_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GObject_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GObject_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GObject_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GObject_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GObject_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GObject_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GObject_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GObject_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GObject_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GObject_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GObject_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GObject_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GObject_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GObject_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GObject_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GObject_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GObject_destroy(this.nativePtr);
	}

	release() {
		Module._GObject_release(this.nativePtr);
	}

	retain() {
		Module._GObject_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GObject_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GObject_activate(this.nativePtr);
	}

	deactivate() {
		Module._GObject_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GObject_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GProgressBar {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GProgressBar_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GProgressBar_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GProgressBar(__result);
		}
	}

	getMin() {
		var __result = Module._GProgressBar_getMin(this.nativePtr);
		return __result;
	}

	setMin(value) {
		Module._GProgressBar_setMin(this.nativePtr, value);
	}

	getMax() {
		var __result = Module._GProgressBar_getMax(this.nativePtr);
		return __result;
	}

	setMax(value) {
		Module._GProgressBar_setMax(this.nativePtr, value);
	}

	getValue() {
		var __result = Module._GProgressBar_getValue(this.nativePtr);
		return __result;
	}

	setValue(value) {
		Module._GProgressBar_setValue(this.nativePtr, value);
	}

	tweenValue(value, duration) {
		Module._GProgressBar_tweenValue(this.nativePtr, value, duration);
	}

	addChild(child) {
		var __result = Module._GProgressBar_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GProgressBar_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GProgressBar_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GProgressBar_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GProgressBar_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GProgressBar_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GProgressBar_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GProgressBar_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GProgressBar_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GProgressBar_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GProgressBar_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GProgressBar_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GProgressBar_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GProgressBar_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GProgressBar_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GProgressBar_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GProgressBar_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GProgressBar_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GProgressBar_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GProgressBar_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GProgressBar_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GProgressBar_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GProgressBar_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GProgressBar_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GProgressBar_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GProgressBar_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GProgressBar_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GProgressBar_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GProgressBar_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GProgressBar_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GProgressBar_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GProgressBar_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GProgressBar_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GProgressBar_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GProgressBar_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GProgressBar_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GProgressBar_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GProgressBar_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GProgressBar_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GProgressBar_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GProgressBar_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GProgressBar_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GProgressBar_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GProgressBar_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GProgressBar_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GProgressBar_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GProgressBar_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GProgressBar_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GProgressBar_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GProgressBar_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GProgressBar_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GProgressBar_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GProgressBar_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GProgressBar_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GProgressBar_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GProgressBar_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GProgressBar_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GProgressBar_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GProgressBar_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GProgressBar_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GProgressBar_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GProgressBar_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GProgressBar_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GProgressBar_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GProgressBar_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GProgressBar_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GProgressBar_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GProgressBar_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GProgressBar_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GProgressBar_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GProgressBar_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GProgressBar_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GProgressBar_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GProgressBar_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GProgressBar_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GProgressBar_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GProgressBar_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GProgressBar_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GProgressBar_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GProgressBar_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GProgressBar_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GProgressBar_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GProgressBar_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GProgressBar_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GProgressBar_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GProgressBar_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GProgressBar_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GProgressBar_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GProgressBar_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GProgressBar_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GProgressBar_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GProgressBar_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GProgressBar_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GProgressBar_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GProgressBar_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GProgressBar_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GProgressBar_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GProgressBar_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GProgressBar_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GProgressBar_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GProgressBar_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GProgressBar_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GProgressBar_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GProgressBar_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GProgressBar_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GProgressBar_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GProgressBar_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GProgressBar_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GProgressBar_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GProgressBar_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GProgressBar_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GProgressBar_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GProgressBar_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GProgressBar_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GProgressBar_destroy(this.nativePtr);
	}

	release() {
		Module._GProgressBar_release(this.nativePtr);
	}

	retain() {
		Module._GProgressBar_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GProgressBar_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GProgressBar_activate(this.nativePtr);
	}

	deactivate() {
		Module._GProgressBar_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GProgressBar_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GRoot {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GRoot_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(canvas, zOrder) {
		var __result = Module._GRoot_create(canvas.nativePtr, zOrder);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	showWindow(win) {
		Module._GRoot_showWindow(this.nativePtr, win.nativePtr);
	}

	hideWindow(win) {
		Module._GRoot_hideWindow(this.nativePtr, win.nativePtr);
	}

	hideWindowImmediately(win) {
		Module._GRoot_hideWindowImmediately(this.nativePtr, win.nativePtr);
	}

	bringToFront(win) {
		Module._GRoot_bringToFront(this.nativePtr, win.nativePtr);
	}

	showModalWait() {
		Module._GRoot_showModalWait(this.nativePtr);
	}

	closeModalWait() {
		Module._GRoot_closeModalWait(this.nativePtr);
	}

	closeAllExceptModals() {
		Module._GRoot_closeAllExceptModals(this.nativePtr);
	}

	closeAllWindows() {
		Module._GRoot_closeAllWindows(this.nativePtr);
	}

	getTopWindow() {
		var __result = Module._GRoot_getTopWindow(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Window(__result);
		}
	}

	getModalWaitingPane() {
		var __result = Module._GRoot_getModalWaitingPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getModalLayer() {
		var __result = Module._GRoot_getModalLayer(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGraph(__result);
		}
	}

	hasModalWindow() {
		var __result = Module._GRoot_hasModalWindow(this.nativePtr);
		return __result;
	}

	isModalWaiting() {
		var __result = Module._GRoot_isModalWaiting(this.nativePtr);
		return __result;
	}

	getInputProcessor() {
		var __result = Module._GRoot_getInputProcessor(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new InputProcessor(__result);
		}
	}

	getTouchPosition(touchId) {
		Module._GRoot_getTouchPosition(this.nativePtr, touchId, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchTarget() {
		var __result = Module._GRoot_getTouchTarget(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	worldToRoot(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GRoot_worldToRoot(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	rootToWorld(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GRoot_rootToWorld(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	showPopup(popup) {
		Module._GRoot_showPopup(this.nativePtr, popup.nativePtr);
	}

	showPopup2(popup, target, dir) {
		Module._GRoot_showPopup2(this.nativePtr, popup.nativePtr, target.nativePtr, dir);
	}

	togglePopup(popup) {
		Module._GRoot_togglePopup(this.nativePtr, popup.nativePtr);
	}

	togglePopup2(popup, target, dir) {
		Module._GRoot_togglePopup2(this.nativePtr, popup.nativePtr, target.nativePtr, dir);
	}

	hidePopup() {
		Module._GRoot_hidePopup(this.nativePtr);
	}

	hidePopup2(popup) {
		Module._GRoot_hidePopup2(this.nativePtr, popup.nativePtr);
	}

	hasAnyPopup() {
		var __result = Module._GRoot_hasAnyPopup(this.nativePtr);
		return __result;
	}

	getPoupPosition(popup, target, dir) {
		Module._GRoot_getPoupPosition(this.nativePtr, popup.nativePtr, target.nativePtr, dir, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	showTooltipsWin(tooltipWin) {
		Module._GRoot_showTooltipsWin(this.nativePtr, tooltipWin.nativePtr);
	}

	hideTooltips() {
		Module._GRoot_hideTooltips(this.nativePtr);
	}

	getTweenManager() {
		var __result = Module._GRoot_getTweenManager(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TweenManager(__result);
		}
	}

	getDragDropManager() {
		var __result = Module._GRoot_getDragDropManager(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DragDropManager(__result);
		}
	}

	setDefaultTTFFile(file) {
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		Module._GRoot_setDefaultTTFFile(this.nativePtr, fileBuffer);
		Module._free(fileBuffer);
	}

	setDefaultEmojiTTFFile(file) {
		const fileBuffer = Module._malloc(file.length+1);
		Module.stringToUTF8(file, fileBuffer, file.length+1);
		Module._GRoot_setDefaultEmojiTTFFile(this.nativePtr, fileBuffer);
		Module._free(fileBuffer);
	}

	registerFontPath(aliasName, path) {
		const aliasNameBuffer = Module._malloc(aliasName.length+1);
		Module.stringToUTF8(aliasName, aliasNameBuffer, aliasName.length+1);
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._GRoot_registerFontPath(this.nativePtr, aliasNameBuffer, pathBuffer);
		Module._free(aliasNameBuffer);
		Module._free(pathBuffer);
	}

	setGlobalModalWaitingURL(url) {
		const urlBuffer = Module._malloc(url.length+1);
		Module.stringToUTF8(url, urlBuffer, url.length+1);
		Module._GRoot_setGlobalModalWaitingURL(this.nativePtr, urlBuffer);
		Module._free(urlBuffer);
	}

	setGlobalTooltipsWinURL(url) {
		const urlBuffer = Module._malloc(url.length+1);
		Module.stringToUTF8(url, urlBuffer, url.length+1);
		Module._GRoot_setGlobalTooltipsWinURL(this.nativePtr, urlBuffer);
		Module._free(urlBuffer);
	}

	setGlobalWindowModalWaitingURL(url) {
		const urlBuffer = Module._malloc(url.length+1);
		Module.stringToUTF8(url, urlBuffer, url.length+1);
		Module._GRoot_setGlobalWindowModalWaitingURL(this.nativePtr, urlBuffer);
		Module._free(urlBuffer);
	}

	removeAllPackages() {
		Module._GRoot_removeAllPackages(this.nativePtr);
	}

	getItemURL(pkgName, resName) {
		const pkgNameBuffer = Module._malloc(pkgName.length+1);
		Module.stringToUTF8(pkgName, pkgNameBuffer, pkgName.length+1);
		const resNameBuffer = Module._malloc(resName.length+1);
		Module.stringToUTF8(resName, resNameBuffer, resName.length+1);
		var __result = Module._GRoot_getItemURL(this.nativePtr, pkgNameBuffer, resNameBuffer);
		Module._free(pkgNameBuffer);
		Module._free(resNameBuffer);
		return Module.UTF8ToString(__result);
	}

	addChild(child) {
		var __result = Module._GRoot_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GRoot_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GRoot_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GRoot_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GRoot_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GRoot_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GRoot_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GRoot_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GRoot_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GRoot_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GRoot_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GRoot_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GRoot_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GRoot_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GRoot_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GRoot_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GRoot_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GRoot_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GRoot_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GRoot_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GRoot_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GRoot_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GRoot_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GRoot_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GRoot_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GRoot_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GRoot_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GRoot_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GRoot_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GRoot_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GRoot_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GRoot_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GRoot_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GRoot_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GRoot_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GRoot_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GRoot_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GRoot_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GRoot_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GRoot_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GRoot_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GRoot_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GRoot_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GRoot_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GRoot_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GRoot_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GRoot_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GRoot_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GRoot_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GRoot_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GRoot_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GRoot_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GRoot_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GRoot_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GRoot_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GRoot_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GRoot_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GRoot_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GRoot_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GRoot_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GRoot_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GRoot_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GRoot_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GRoot_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GRoot_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GRoot_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GRoot_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GRoot_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GRoot_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GRoot_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GRoot_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GRoot_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GRoot_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GRoot_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GRoot_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GRoot_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GRoot_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GRoot_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GRoot_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GRoot_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GRoot_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GRoot_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GRoot_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GRoot_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GRoot_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GRoot_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GRoot_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GRoot_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GRoot_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GRoot_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GRoot_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GRoot_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GRoot_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GRoot_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GRoot_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GRoot_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GRoot_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GRoot_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GRoot_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GRoot_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GRoot_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GRoot_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GRoot_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GRoot_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GRoot_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GRoot_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GRoot_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GRoot_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GRoot_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GRoot_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GRoot_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GRoot_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GRoot_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GRoot_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GRoot_destroy(this.nativePtr);
	}

	release() {
		Module._GRoot_release(this.nativePtr);
	}

	retain() {
		Module._GRoot_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GRoot_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GRoot_activate(this.nativePtr);
	}

	deactivate() {
		Module._GRoot_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GRoot_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GSlider {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GSlider_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GSlider_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GSlider(__result);
		}
	}

	getMin() {
		var __result = Module._GSlider_getMin(this.nativePtr);
		return __result;
	}

	setMin(value) {
		Module._GSlider_setMin(this.nativePtr, value);
	}

	getMax() {
		var __result = Module._GSlider_getMax(this.nativePtr);
		return __result;
	}

	setMax(value) {
		Module._GSlider_setMax(this.nativePtr, value);
	}

	getValue() {
		var __result = Module._GSlider_getValue(this.nativePtr);
		return __result;
	}

	setValue(value) {
		Module._GSlider_setValue(this.nativePtr, value);
	}

	getWholeNumbers() {
		var __result = Module._GSlider_getWholeNumbers(this.nativePtr);
		return __result;
	}

	setWholeNumbers(value) {
		Module._GSlider_setWholeNumbers(this.nativePtr, value);
	}

	addChild(child) {
		var __result = Module._GSlider_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GSlider_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GSlider_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GSlider_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GSlider_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GSlider_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GSlider_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GSlider_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GSlider_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GSlider_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GSlider_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GSlider_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GSlider_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GSlider_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GSlider_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GSlider_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GSlider_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GSlider_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GSlider_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GSlider_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GSlider_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GSlider_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GSlider_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GSlider_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GSlider_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GSlider_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GSlider_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GSlider_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GSlider_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GSlider_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GSlider_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GSlider_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GSlider_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GSlider_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GSlider_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GSlider_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GSlider_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GSlider_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GSlider_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GSlider_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GSlider_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GSlider_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GSlider_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GSlider_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GSlider_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GSlider_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GSlider_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GSlider_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GSlider_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GSlider_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GSlider_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GSlider_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GSlider_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GSlider_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GSlider_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GSlider_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GSlider_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GSlider_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GSlider_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GSlider_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GSlider_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GSlider_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GSlider_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GSlider_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GSlider_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GSlider_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GSlider_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GSlider_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GSlider_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GSlider_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GSlider_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GSlider_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GSlider_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GSlider_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GSlider_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GSlider_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GSlider_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GSlider_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GSlider_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GSlider_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GSlider_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GSlider_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GSlider_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GSlider_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GSlider_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GSlider_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GSlider_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GSlider_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GSlider_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GSlider_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GSlider_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GSlider_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GSlider_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GSlider_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GSlider_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GSlider_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GSlider_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GSlider_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GSlider_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GSlider_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GSlider_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GSlider_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GSlider_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GSlider_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GSlider_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GSlider_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GSlider_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GSlider_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GSlider_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GSlider_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GSlider_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GSlider_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GSlider_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GSlider_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GSlider_destroy(this.nativePtr);
	}

	release() {
		Module._GSlider_release(this.nativePtr);
	}

	retain() {
		Module._GSlider_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GSlider_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GSlider_activate(this.nativePtr);
	}

	deactivate() {
		Module._GSlider_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GSlider_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GTextField {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GTextField_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	isUBBEnabled() {
		var __result = Module._GTextField_isUBBEnabled(this.nativePtr);
		return __result;
	}

	setUBBEnabled(value) {
		Module._GTextField_setUBBEnabled(this.nativePtr, value);
	}

	isSingleLine() {
		var __result = Module._GTextField_isSingleLine(this.nativePtr);
		return __result;
	}

	setSingleLine(value) {
		Module._GTextField_setSingleLine(this.nativePtr, value);
	}

	getTextSize() {
		Module._GTextField_getTextSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getColor() {
		Module._GTextField_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GTextField_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getFontSize() {
		var __result = Module._GTextField_getFontSize(this.nativePtr);
		return __result;
	}

	setFontSize(value) {
		Module._GTextField_setFontSize(this.nativePtr, value);
	}

	getOutlineColor() {
		Module._GTextField_getOutlineColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setOutlineColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GTextField_setOutlineColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getSourceSize() {
		Module._GTextField_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GTextField_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GTextField_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GTextField_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GTextField_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GTextField_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GTextField_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GTextField_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GTextField_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GTextField_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GTextField_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GTextField_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GTextField_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GTextField_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GTextField_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GTextField_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GTextField_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GTextField_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GTextField_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GTextField_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GTextField_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GTextField_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GTextField_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GTextField_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GTextField_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GTextField_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GTextField_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GTextField_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GTextField_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GTextField_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GTextField_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GTextField_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GTextField_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GTextField_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GTextField_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GTextField_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GTextField_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GTextField_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GTextField_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GTextField_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GTextField_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GTextField_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GTextField_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GTextField_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GTextField_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GTextField_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GTextField_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GTextField_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GTextField_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GTextField_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GTextField_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GTextField_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GTextField_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GTextField_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GTextField_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GTextField_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GTextField_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GTextField_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTextField_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextField_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTextField_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextField_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextField_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GTextField_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GTextField_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GTextField_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GTextField_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GTextField_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GTextField_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GTextField_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GTextField_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GTextField_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GTextField_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GTextField_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GTextField_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GTextField_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GTextField_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GTextField_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GTextField_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GTextField_destroy(this.nativePtr);
	}

	release() {
		Module._GTextField_release(this.nativePtr);
	}

	retain() {
		Module._GTextField_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GTextField_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GTextField_activate(this.nativePtr);
	}

	deactivate() {
		Module._GTextField_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GTextField_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GTextInput {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GTextInput_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	isUBBEnabled() {
		var __result = Module._GTextInput_isUBBEnabled(this.nativePtr);
		return __result;
	}

	setUBBEnabled(value) {
		Module._GTextInput_setUBBEnabled(this.nativePtr, value);
	}

	isSingleLine() {
		var __result = Module._GTextInput_isSingleLine(this.nativePtr);
		return __result;
	}

	setSingleLine(value) {
		Module._GTextInput_setSingleLine(this.nativePtr, value);
	}

	getTextSize() {
		Module._GTextInput_getTextSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getColor() {
		Module._GTextInput_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GTextInput_setColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getFontSize() {
		var __result = Module._GTextInput_getFontSize(this.nativePtr);
		return __result;
	}

	setFontSize(value) {
		Module._GTextInput_setFontSize(this.nativePtr, value);
	}

	getOutlineColor() {
		Module._GTextInput_getOutlineColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setOutlineColor(value) {
		var pbvalue = PBColor3B.create();
		pbvalue.r = value.r;
		pbvalue.g = value.g;
		pbvalue.b = value.b;
		const valueBuffer = PBColor3B.buffer(pbvalue);
		Module._GTextInput_setOutlineColor(this.nativePtr, valueBuffer);
		PBColor3B.freeBuffer(valueBuffer);
	}

	getSourceSize() {
		Module._GTextInput_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GTextInput_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GTextInput_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GTextInput_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GTextInput_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GTextInput_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GTextInput_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GTextInput_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GTextInput_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GTextInput_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GTextInput_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GTextInput_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GTextInput_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GTextInput_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GTextInput_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GTextInput_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GTextInput_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GTextInput_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GTextInput_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GTextInput_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GTextInput_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GTextInput_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GTextInput_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GTextInput_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GTextInput_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GTextInput_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GTextInput_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GTextInput_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GTextInput_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GTextInput_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GTextInput_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GTextInput_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GTextInput_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GTextInput_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GTextInput_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GTextInput_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GTextInput_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GTextInput_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GTextInput_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GTextInput_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GTextInput_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GTextInput_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GTextInput_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GTextInput_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GTextInput_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GTextInput_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GTextInput_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GTextInput_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GTextInput_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GTextInput_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GTextInput_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GTextInput_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GTextInput_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GTextInput_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GTextInput_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GTextInput_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GTextInput_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GTextInput_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTextInput_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextInput_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTextInput_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextInput_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTextInput_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GTextInput_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GTextInput_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GTextInput_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GTextInput_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GTextInput_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GTextInput_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GTextInput_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GTextInput_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GTextInput_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GTextInput_removeClickListener(this.nativePtr, eventTag);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GTextInput_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	treeNode() {
		var __result = Module._GTextInput_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GTextInput_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GTextInput_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GTextInput_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GTextInput_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GTextInput_destroy(this.nativePtr);
	}

	release() {
		Module._GTextInput_release(this.nativePtr);
	}

	retain() {
		Module._GTextInput_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GTextInput_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GTextInput_activate(this.nativePtr);
	}

	deactivate() {
		Module._GTextInput_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GTextInput_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class GTree {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._GTree_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._GTree_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTree(__result);
		}
	}

	getIndent() {
		var __result = Module._GTree_getIndent(this.nativePtr);
		return __result;
	}

	setIndent(value) {
		Module._GTree_setIndent(this.nativePtr, value);
	}

	getClickToExpand() {
		var __result = Module._GTree_getClickToExpand(this.nativePtr);
		return __result;
	}

	setClickToExpand(value) {
		Module._GTree_setClickToExpand(this.nativePtr, value);
	}

	getRootNode() {
		var __result = Module._GTree_getRootNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	getSelectedNode() {
		var __result = Module._GTree_getSelectedNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	selectNode(node, scrollItToView) {
		Module._GTree_selectNode(this.nativePtr, node.nativePtr, scrollItToView);
	}

	unselectNode(node) {
		Module._GTree_unselectNode(this.nativePtr, node.nativePtr);
	}

	expandAll(folderNode) {
		Module._GTree_expandAll(this.nativePtr, folderNode.nativePtr);
	}

	collapseAll(folderNode) {
		Module._GTree_collapseAll(this.nativePtr, folderNode.nativePtr);
	}

	getLineCount() {
		var __result = Module._GTree_getLineCount(this.nativePtr);
		return __result;
	}

	setLineCount(value) {
		Module._GTree_setLineCount(this.nativePtr, value);
	}

	getColumnCount() {
		var __result = Module._GTree_getColumnCount(this.nativePtr);
		return __result;
	}

	setColumnCount(value) {
		Module._GTree_setColumnCount(this.nativePtr, value);
	}

	getColumnGap() {
		var __result = Module._GTree_getColumnGap(this.nativePtr);
		return __result;
	}

	setColumnGap(value) {
		Module._GTree_setColumnGap(this.nativePtr, value);
	}

	getLineGap() {
		var __result = Module._GTree_getLineGap(this.nativePtr);
		return __result;
	}

	setLineGap(value) {
		Module._GTree_setLineGap(this.nativePtr, value);
	}

	getAutoResizeItem() {
		var __result = Module._GTree_getAutoResizeItem(this.nativePtr);
		return __result;
	}

	setAutoResizeItem(value) {
		Module._GTree_setAutoResizeItem(this.nativePtr, value);
	}

	getFromPool() {
		var __result = Module._GTree_getFromPool(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addItemFromPool() {
		var __result = Module._GTree_addItemFromPool(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChildToPoolAt(index) {
		Module._GTree_removeChildToPoolAt(this.nativePtr, index);
	}

	removeChildToPool(child) {
		Module._GTree_removeChildToPool(this.nativePtr, child.nativePtr);
	}

	removeChildrenToPool(beginIndex, endIndex) {
		Module._GTree_removeChildrenToPool(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildrenToPool() {
		Module._GTree_removeAllChildrenToPool(this.nativePtr);
	}

	getSelectedIndex() {
		var __result = Module._GTree_getSelectedIndex(this.nativePtr);
		return __result;
	}

	setSelectedIndex(value) {
		Module._GTree_setSelectedIndex(this.nativePtr, value);
	}

	resizeToFit(itemCount, minSize) {
		Module._GTree_resizeToFit(this.nativePtr, itemCount, minSize);
	}

	scrollToView(index, ani, setFirst) {
		Module._GTree_scrollToView(this.nativePtr, index, ani, setFirst);
	}

	setVirtual() {
		Module._GTree_setVirtual(this.nativePtr);
	}

	setVirtualAndLoop() {
		Module._GTree_setVirtualAndLoop(this.nativePtr);
	}

	isVirtual() {
		var __result = Module._GTree_isVirtual(this.nativePtr);
		return __result;
	}

	refreshVirtualList() {
		Module._GTree_refreshVirtualList(this.nativePtr);
	}

	getNumItems() {
		var __result = Module._GTree_getNumItems(this.nativePtr);
		return __result;
	}

	setNumItems(value) {
		Module._GTree_setNumItems(this.nativePtr, value);
	}

	childIndexToItemIndex(index) {
		var __result = Module._GTree_childIndexToItemIndex(this.nativePtr, index);
		return __result;
	}

	itemIndexToChildIndex(index) {
		var __result = Module._GTree_itemIndexToChildIndex(this.nativePtr, index);
		return __result;
	}

	setItemRenderer(renderer) {
		let rendererFunc = CustomCallback_31c0b288af0a2a61715fa69c5e211735_wasm_Generator(renderer);
		let rendererPtr = Module.addFunction(rendererFunc, vii);
		Module._GTree_setItemRenderer(this.nativePtr, rendererPtr);
	}

	setItemProvider(itemProvider) {
		let itemProviderFunc = CustomCallback_92a8729d8dafee2b8fc27949c89d0ecc_wasm_Generator(itemProvider);
		let itemProviderPtr = Module.addFunction(itemProviderFunc, vi);
		Module._GTree_setItemProvider(this.nativePtr, itemProviderPtr);
	}

	addChild(child) {
		var __result = Module._GTree_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._GTree_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._GTree_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._GTree_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._GTree_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._GTree_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._GTree_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._GTree_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._GTree_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._GTree_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._GTree_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._GTree_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._GTree_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._GTree_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._GTree_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._GTree_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._GTree_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._GTree_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._GTree_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._GTree_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._GTree_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._GTree_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._GTree_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._GTree_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._GTree_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._GTree_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._GTree_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._GTree_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._GTree_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._GTree_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._GTree_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._GTree_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._GTree_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._GTree_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._GTree_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTree_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._GTree_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._GTree_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._GTree_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._GTree_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._GTree_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._GTree_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._GTree_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._GTree_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._GTree_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._GTree_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._GTree_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._GTree_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._GTree_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._GTree_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._GTree_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._GTree_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._GTree_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._GTree_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._GTree_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._GTree_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._GTree_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._GTree_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._GTree_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._GTree_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._GTree_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._GTree_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._GTree_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._GTree_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._GTree_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._GTree_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._GTree_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._GTree_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._GTree_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._GTree_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._GTree_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._GTree_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._GTree_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._GTree_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._GTree_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._GTree_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._GTree_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._GTree_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._GTree_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._GTree_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._GTree_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._GTree_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._GTree_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._GTree_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._GTree_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._GTree_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._GTree_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._GTree_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._GTree_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._GTree_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._GTree_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._GTree_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._GTree_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._GTree_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTree_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTree_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._GTree_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTree_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._GTree_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._GTree_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._GTree_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._GTree_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._GTree_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._GTree_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._GTree_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._GTree_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._GTree_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._GTree_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._GTree_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._GTree_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._GTree_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._GTree_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._GTree_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._GTree_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._GTree_destroy(this.nativePtr);
	}

	release() {
		Module._GTree_release(this.nativePtr);
	}

	retain() {
		Module._GTree_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._GTree_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._GTree_activate(this.nativePtr);
	}

	deactivate() {
		Module._GTree_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._GTree_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Transition {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Transition_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	getOwner() {
		var __result = Module._Transition_getOwner(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	isPlaying() {
		var __result = Module._Transition_isPlaying(this.nativePtr);
		return __result;
	}

	play(callback) {
		let callbackFunc = Callback0Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vv");
		Module._Transition_play(this.nativePtr, callbackPtr);
	}

	play2(times, delay, callback) {
		let callbackFunc = Callback0Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vv");
		Module._Transition_play2(this.nativePtr, times, delay, callbackPtr);
	}

	play3(times, delay, startTime, endTime, callback) {
		let callbackFunc = Callback0Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vv");
		Module._Transition_play3(this.nativePtr, times, delay, startTime, endTime, callbackPtr);
	}

	playReverse(callback) {
		let callbackFunc = Callback0Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vv");
		Module._Transition_playReverse(this.nativePtr, callbackPtr);
	}

	playReverse2(times, delay, callback) {
		let callbackFunc = Callback0Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vv");
		Module._Transition_playReverse2(this.nativePtr, times, delay, callbackPtr);
	}

	changePlayTimes(value) {
		Module._Transition_changePlayTimes(this.nativePtr, value);
	}

	stop() {
		Module._Transition_stop(this.nativePtr);
	}

	stop2(setToComplete, processCallback) {
		Module._Transition_stop2(this.nativePtr, setToComplete, processCallback);
	}

	setAutoPlay(autoPlay, times, delay) {
		Module._Transition_setAutoPlay(this.nativePtr, autoPlay, times, delay);
	}

	setPaused(paused) {
		Module._Transition_setPaused(this.nativePtr, paused);
	}

	clearHooks() {
		Module._Transition_clearHooks(this.nativePtr);
	}

	getTimeScale() {
		var __result = Module._Transition_getTimeScale(this.nativePtr);
		return __result;
	}

	setTimeScale(value) {
		Module._Transition_setTimeScale(this.nativePtr, value);
	}

	getClassName() {
		var __result = Module._Transition_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Transition_activate(this.nativePtr);
	}

	deactivate() {
		Module._Transition_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Transition_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Window {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Window_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Window_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Window(__result);
		}
	}

	show() {
		Module._Window_show(this.nativePtr);
	}

	hide() {
		Module._Window_hide(this.nativePtr);
	}

	hideImmediately() {
		Module._Window_hideImmediately(this.nativePtr);
	}

	toggleStatus() {
		Module._Window_toggleStatus(this.nativePtr);
	}

	bringToFront() {
		Module._Window_bringToFront(this.nativePtr);
	}

	isShowing() {
		var __result = Module._Window_isShowing(this.nativePtr);
		return __result;
	}

	isTop() {
		var __result = Module._Window_isTop(this.nativePtr);
		return __result;
	}

	isModal() {
		var __result = Module._Window_isModal(this.nativePtr);
		return __result;
	}

	setModal(value) {
		Module._Window_setModal(this.nativePtr, value);
	}

	showModalWait() {
		Module._Window_showModalWait(this.nativePtr);
	}

	showModalWait2(requestingCmd) {
		Module._Window_showModalWait2(this.nativePtr, requestingCmd);
	}

	closeModalWait() {
		var __result = Module._Window_closeModalWait(this.nativePtr);
		return __result;
	}

	closeModalWait2(requestingCmd) {
		var __result = Module._Window_closeModalWait2(this.nativePtr, requestingCmd);
		return __result;
	}

	isBringToFrontOnClick() {
		var __result = Module._Window_isBringToFrontOnClick(this.nativePtr);
		return __result;
	}

	setBringToFrontOnClick(value) {
		Module._Window_setBringToFrontOnClick(this.nativePtr, value);
	}

	getContentPane() {
		var __result = Module._Window_getContentPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	setContentPane(value) {
		Module._Window_setContentPane(this.nativePtr, value.nativePtr);
	}

	getFrame() {
		var __result = Module._Window_getFrame(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	getCloseButton() {
		var __result = Module._Window_getCloseButton(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	setCloseButton(value) {
		Module._Window_setCloseButton(this.nativePtr, value.nativePtr);
	}

	getDragArea() {
		var __result = Module._Window_getDragArea(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	setDragArea(value) {
		Module._Window_setDragArea(this.nativePtr, value.nativePtr);
	}

	getContentArea() {
		var __result = Module._Window_getContentArea(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	setContentArea(value) {
		Module._Window_setContentArea(this.nativePtr, value.nativePtr);
	}

	getModalWaitingPane() {
		var __result = Module._Window_getModalWaitingPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChild(child) {
		var __result = Module._Window_addChild(this.nativePtr, child.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	addChildAt(child, index) {
		var __result = Module._Window_addChildAt(this.nativePtr, child.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	removeChild(child) {
		Module._Window_removeChild(this.nativePtr, child.nativePtr);
	}

	removeChildAt(index) {
		Module._Window_removeChildAt(this.nativePtr, index);
	}

	removeChildren(beginIndex, endIndex) {
		Module._Window_removeChildren(this.nativePtr, beginIndex, endIndex);
	}

	removeAllChildren() {
		Module._Window_removeAllChildren(this.nativePtr);
	}

	getChildAt(index) {
		var __result = Module._Window_getChildAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getChildIndex(child) {
		var __result = Module._Window_getChildIndex(this.nativePtr, child.nativePtr);
		return __result;
	}

	setChildIndex(child, index) {
		Module._Window_setChildIndex(this.nativePtr, child.nativePtr, index);
	}

	setChildIndexBefore(child, index) {
		var __result = Module._Window_setChildIndexBefore(this.nativePtr, child.nativePtr, index);
		return __result;
	}

	swapChildren(child1, child2) {
		Module._Window_swapChildren(this.nativePtr, child1.nativePtr, child2.nativePtr);
	}

	swapChildrenAt(index1, index2) {
		Module._Window_swapChildrenAt(this.nativePtr, index1, index2);
	}

	numChildren() {
		var __result = Module._Window_numChildren(this.nativePtr);
		return __result;
	}

	isAncestorOf(obj) {
		var __result = Module._Window_isAncestorOf(this.nativePtr, obj.nativePtr);
		return __result;
	}

	isChildInView(child) {
		var __result = Module._Window_isChildInView(this.nativePtr, child.nativePtr);
		return __result;
	}

	getFirstChildInView() {
		var __result = Module._Window_getFirstChildInView(this.nativePtr);
		return __result;
	}

	addController(c) {
		Module._Window_addController(this.nativePtr, c.nativePtr);
	}

	getControllerAt(index) {
		var __result = Module._Window_getControllerAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GController(__result);
		}
	}

	removeController(c) {
		Module._Window_removeController(this.nativePtr, c.nativePtr);
	}

	applyController(c) {
		Module._Window_applyController(this.nativePtr, c.nativePtr);
	}

	applyAllControllers() {
		Module._Window_applyAllControllers(this.nativePtr);
	}

	getTransitionAt(index) {
		var __result = Module._Window_getTransitionAt(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Transition(__result);
		}
	}

	getOpaque() {
		var __result = Module._Window_getOpaque(this.nativePtr);
		return __result;
	}

	setOpaque(value) {
		Module._Window_setOpaque(this.nativePtr, value);
	}

	setMargin(value) {
		var pbvalue = PBVector4.create();
		pbvalue.x = value.x;
		pbvalue.y = value.y;
		pbvalue.z = value.z;
		pbvalue.w = value.w;
		const valueBuffer = PBVector4.buffer(pbvalue);
		Module._Window_setMargin(this.nativePtr, valueBuffer);
		PBVector4.freeBuffer(valueBuffer);
	}

	getMask() {
		var __result = Module._Window_getMask(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	setMask(value, inverted) {
		Module._Window_setMask(this.nativePtr, value.nativePtr, inverted);
	}

	getScrollPane() {
		var __result = Module._Window_getScrollPane(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ScrollPane(__result);
		}
	}

	getViewWidth() {
		var __result = Module._Window_getViewWidth(this.nativePtr);
		return __result;
	}

	setViewWidth(value) {
		Module._Window_setViewWidth(this.nativePtr, value);
	}

	getViewHeight() {
		var __result = Module._Window_getViewHeight(this.nativePtr);
		return __result;
	}

	setViewHeight(value) {
		Module._Window_setViewHeight(this.nativePtr, value);
	}

	setBoundsChangedFlag() {
		Module._Window_setBoundsChangedFlag(this.nativePtr);
	}

	ensureBoundsCorrect() {
		Module._Window_ensureBoundsCorrect(this.nativePtr);
	}

	hitTest(worldPoint, camera) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		var __result = Module._Window_hitTest(this.nativePtr, worldPointBuffer, camera.nativePtr);
		PBVector2.freeBuffer(worldPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	getSnappingPosition(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._Window_getSnappingPosition(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getSourceSize() {
		Module._Window_getSourceSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getInitSize() {
		Module._Window_getInitSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMinSize() {
		Module._Window_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getMaxSize() {
		Module._Window_getMaxSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getX() {
		var __result = Module._Window_getX(this.nativePtr);
		return __result;
	}

	setX(value) {
		Module._Window_setX(this.nativePtr, value);
	}

	getY() {
		var __result = Module._Window_getY(this.nativePtr);
		return __result;
	}

	setY(value) {
		Module._Window_setY(this.nativePtr, value);
	}

	getPosition() {
		Module._Window_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._Window_setPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getXMin() {
		var __result = Module._Window_getXMin(this.nativePtr);
		return __result;
	}

	setXMin(value) {
		Module._Window_setXMin(this.nativePtr, value);
	}

	getYMin() {
		var __result = Module._Window_getYMin(this.nativePtr);
		return __result;
	}

	setYMin(value) {
		Module._Window_setYMin(this.nativePtr, value);
	}

	isPixelSnapping() {
		var __result = Module._Window_isPixelSnapping(this.nativePtr);
		return __result;
	}

	setPixelSnapping(value) {
		Module._Window_setPixelSnapping(this.nativePtr, value);
	}

	getWidth() {
		var __result = Module._Window_getWidth(this.nativePtr);
		return __result;
	}

	setWidth(value) {
		Module._Window_setWidth(this.nativePtr, value);
	}

	getHeight() {
		var __result = Module._Window_getHeight(this.nativePtr);
		return __result;
	}

	setHeight(value) {
		Module._Window_setHeight(this.nativePtr, value);
	}

	getSize() {
		Module._Window_getSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setSize(wv, hv, ignorePivot) {
		Module._Window_setSize(this.nativePtr, wv, hv, ignorePivot);
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Window_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Window_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	center(restraint) {
		Module._Window_center(this.nativePtr, restraint);
	}

	makeFullScreen() {
		Module._Window_makeFullScreen(this.nativePtr);
	}

	getPivot() {
		Module._Window_getPivot(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPivot(xv, yv, asAnchor) {
		Module._Window_setPivot(this.nativePtr, xv, yv, asAnchor);
	}

	isPivotAsAnchor() {
		var __result = Module._Window_isPivotAsAnchor(this.nativePtr);
		return __result;
	}

	getScaleX() {
		var __result = Module._Window_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleX(value) {
		Module._Window_setScaleX(this.nativePtr, value);
	}

	getScaleY() {
		var __result = Module._Window_getScaleY(this.nativePtr);
		return __result;
	}

	setScaleY(value) {
		Module._Window_setScaleY(this.nativePtr, value);
	}

	getScale() {
		Module._Window_getScale(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setScale(xv, yv) {
		Module._Window_setScale(this.nativePtr, xv, yv);
	}

	getSkewX() {
		var __result = Module._Window_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewX(value) {
		Module._Window_setSkewX(this.nativePtr, value);
	}

	getSkewY() {
		var __result = Module._Window_getSkewY(this.nativePtr);
		return __result;
	}

	setSkewY(value) {
		Module._Window_setSkewY(this.nativePtr, value);
	}

	getRotation() {
		var __result = Module._Window_getRotation(this.nativePtr);
		return __result;
	}

	setRotation(value) {
		Module._Window_setRotation(this.nativePtr, value);
	}

	getAlpha() {
		var __result = Module._Window_getAlpha(this.nativePtr);
		return __result;
	}

	setAlpha(value) {
		Module._Window_setAlpha(this.nativePtr, value);
	}

	isGrayed() {
		var __result = Module._Window_isGrayed(this.nativePtr);
		return __result;
	}

	setGrayed(value) {
		Module._Window_setGrayed(this.nativePtr, value);
	}

	isVisible() {
		var __result = Module._Window_isVisible(this.nativePtr);
		return __result;
	}

	setVisible(value) {
		Module._Window_setVisible(this.nativePtr, value);
	}

	isTouchable() {
		var __result = Module._Window_isTouchable(this.nativePtr);
		return __result;
	}

	setTouchable(value) {
		Module._Window_setTouchable(this.nativePtr, value);
	}

	getSortingOrder() {
		var __result = Module._Window_getSortingOrder(this.nativePtr);
		return __result;
	}

	setSortingOrder(value) {
		Module._Window_setSortingOrder(this.nativePtr, value);
	}

	getGroup() {
		var __result = Module._Window_getGroup(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GGroup(__result);
		}
	}

	setGroup(value) {
		Module._Window_setGroup(this.nativePtr, value.nativePtr);
	}

	isDraggable() {
		var __result = Module._Window_isDraggable(this.nativePtr);
		return __result;
	}

	setDraggable(value) {
		Module._Window_setDraggable(this.nativePtr, value);
	}

	setDragBounds(value) {
		var pbvalue = PBBKRectF.create();
		pbvalue.left = value.left;
		pbvalue.top = value.top;
		pbvalue.width = value.width;
		pbvalue.height = value.height;
		const valueBuffer = PBBKRectF.buffer(pbvalue);
		Module._Window_setDragBounds(this.nativePtr, valueBuffer);
		PBBKRectF.freeBuffer(valueBuffer);
	}

	startDrag(touchId) {
		Module._Window_startDrag(this.nativePtr, touchId);
	}

	stopDrag() {
		Module._Window_stopDrag(this.nativePtr);
	}

	globalToLocal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._Window_globalToLocal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	globalRectToLocal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Window_globalRectToLocal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	localToGlobal(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		Module._Window_localToGlobal(this.nativePtr, ptBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	localRectToGlobal(rect) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Window_localRectToGlobal(this.nativePtr, rectBuffer, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	transformRect(rect, targetSpace) {
		var pbrect = PBBKRectF.create();
		pbrect.left = rect.left;
		pbrect.top = rect.top;
		pbrect.width = rect.width;
		pbrect.height = rect.height;
		const rectBuffer = PBBKRectF.buffer(pbrect);
		Module._Window_transformRect(this.nativePtr, rectBuffer, targetSpace.nativePtr, PBBKRectF.nativeBuffer);
		PBBKRectF.freeBuffer(rectBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	addRelation(target, relationType, usePercent) {
		Module._Window_addRelation(this.nativePtr, target.nativePtr, relationType, usePercent);
	}

	removeRelation(target, relationType) {
		Module._Window_removeRelation(this.nativePtr, target.nativePtr, relationType);
	}

	checkGearController(index, c) {
		var __result = Module._Window_checkGearController(this.nativePtr, index, c.nativePtr);
		return __result;
	}

	getParent() {
		var __result = Module._Window_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GComponent(__result);
		}
	}

	findParent() {
		var __result = Module._Window_findParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GObject(__result);
		}
	}

	displayObject() {
		var __result = Module._Window_displayObject(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRoot() {
		var __result = Module._Window_getRoot(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GRoot(__result);
		}
	}

	onStage() {
		var __result = Module._Window_onStage(this.nativePtr);
		return __result;
	}

	removeFromParent() {
		Module._Window_removeFromParent(this.nativePtr);
	}

	removeClickListener(eventTag) {
		Module._Window_removeClickListener(this.nativePtr, eventTag);
	}

	treeNode() {
		var __result = Module._Window_treeNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new GTreeNode(__result);
		}
	}

	removeEventListener(eventType, eventTag) {
		Module._Window_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._Window_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._Window_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._Window_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._Window_destroy(this.nativePtr);
	}

	release() {
		Module._Window_release(this.nativePtr);
	}

	retain() {
		Module._Window_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._Window_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Window_activate(this.nativePtr);
	}

	deactivate() {
		Module._Window_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Window_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIEventDispatcher {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIEventDispatcher_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	removeEventListener(eventType, eventTag) {
		Module._UIEventDispatcher_removeEventListener(this.nativePtr, eventType, eventTag);
	}

	removeEventListeners() {
		Module._UIEventDispatcher_removeEventListeners(this.nativePtr);
	}

	hasEventListener(eventType, eventTag) {
		var __result = Module._UIEventDispatcher_hasEventListener(this.nativePtr, eventType, eventTag);
		return __result;
	}

	isDispatchingEvent(eventType) {
		var __result = Module._UIEventDispatcher_isDispatchingEvent(this.nativePtr, eventType);
		return __result;
	}

	destroy() {
		Module._UIEventDispatcher_destroy(this.nativePtr);
	}

	release() {
		Module._UIEventDispatcher_release(this.nativePtr);
	}

	retain() {
		Module._UIEventDispatcher_retain(this.nativePtr);
	}

	getClassName() {
		var __result = Module._UIEventDispatcher_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIEventDispatcher_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIEventDispatcher_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIEventDispatcher_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Physics2DBody {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Physics2DBody_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setAwake(flag) {
		Module._Physics2DBody_setAwake(this.nativePtr, flag);
	}

	isAwake() {
		var __result = Module._Physics2DBody_isAwake(this.nativePtr);
		return __result;
	}

	getMass() {
		var __result = Module._Physics2DBody_getMass(this.nativePtr);
		return __result;
	}

	setMassData(mass, center, i) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		Module._Physics2DBody_setMassData(this.nativePtr, mass, centerBuffer, i);
		PBVector2.freeBuffer(centerBuffer);
	}

	resetMassData() {
		Module._Physics2DBody_resetMassData(this.nativePtr);
	}

	setLinearVelocity(v) {
		var pbv = PBVector2.create();
		pbv.x = v.x;
		pbv.y = v.y;
		const vBuffer = PBVector2.buffer(pbv);
		Module._Physics2DBody_setLinearVelocity(this.nativePtr, vBuffer);
		PBVector2.freeBuffer(vBuffer);
	}

	getLinearVelocity() {
		Module._Physics2DBody_getLinearVelocity(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAngularVelocity(omega) {
		Module._Physics2DBody_setAngularVelocity(this.nativePtr, omega);
	}

	getAngularVelocity() {
		var __result = Module._Physics2DBody_getAngularVelocity(this.nativePtr);
		return __result;
	}

	applyForce(force, point, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DBody_applyForce(this.nativePtr, forceBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyForceToCenter(force, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		Module._Physics2DBody_applyForceToCenter(this.nativePtr, forceBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
	}

	applyTorque(torque, wake) {
		Module._Physics2DBody_applyTorque(this.nativePtr, torque, wake);
	}

	applyLinearImpulse(impulse, point, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DBody_applyLinearImpulse(this.nativePtr, impulseBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyLinearImpulseToCenter(impulse, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		Module._Physics2DBody_applyLinearImpulseToCenter(this.nativePtr, impulseBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
	}

	applyAngularImpulse(impulse, wake) {
		Module._Physics2DBody_applyAngularImpulse(this.nativePtr, impulse, wake);
	}

	getInertia() {
		var __result = Module._Physics2DBody_getInertia(this.nativePtr);
		return __result;
	}

	getLinearVelocityFromWorldPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DBody_getLinearVelocityFromWorldPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearVelocityFromLocalPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DBody_getLinearVelocityFromLocalPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearDamping() {
		var __result = Module._Physics2DBody_getLinearDamping(this.nativePtr);
		return __result;
	}

	setLinearDamping(linearDamping) {
		Module._Physics2DBody_setLinearDamping(this.nativePtr, linearDamping);
	}

	getAngularDamping() {
		var __result = Module._Physics2DBody_getAngularDamping(this.nativePtr);
		return __result;
	}

	setAngularDamping(angularDamping) {
		Module._Physics2DBody_setAngularDamping(this.nativePtr, angularDamping);
	}

	getGravityScale() {
		var __result = Module._Physics2DBody_getGravityScale(this.nativePtr);
		return __result;
	}

	setGravityScale(scale) {
		Module._Physics2DBody_setGravityScale(this.nativePtr, scale);
	}

	setBullet(flag) {
		Module._Physics2DBody_setBullet(this.nativePtr, flag);
	}

	isBullet() {
		var __result = Module._Physics2DBody_isBullet(this.nativePtr);
		return __result;
	}

	setEnabled(flag) {
		Module._Physics2DBody_setEnabled(this.nativePtr, flag);
	}

	isEnabled() {
		var __result = Module._Physics2DBody_isEnabled(this.nativePtr);
		return __result;
	}

	setFixedRotation(flag) {
		Module._Physics2DBody_setFixedRotation(this.nativePtr, flag);
	}

	isFixedRotation() {
		var __result = Module._Physics2DBody_isFixedRotation(this.nativePtr);
		return __result;
	}

	getFixtureList() {
		var __result = Module._Physics2DBody_getFixtureList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	getJointList() {
		var __result = Module._Physics2DBody_getJointList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DJoint(__result);
		}
	}

	getWorldPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DBody_getWorldPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DBody_getLocalPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldVector(localVector) {
		var pblocalVector = PBVector2.create();
		pblocalVector.x = localVector.x;
		pblocalVector.y = localVector.y;
		const localVectorBuffer = PBVector2.buffer(pblocalVector);
		Module._Physics2DBody_getWorldVector(this.nativePtr, localVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalVector(worldVector) {
		var pbworldVector = PBVector2.create();
		pbworldVector.x = worldVector.x;
		pbworldVector.y = worldVector.y;
		const worldVectorBuffer = PBVector2.buffer(pbworldVector);
		Module._Physics2DBody_getLocalVector(this.nativePtr, worldVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldCenter() {
		Module._Physics2DBody_getWorldCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalCenter() {
		Module._Physics2DBody_getLocalCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAngle() {
		var __result = Module._Physics2DBody_getAngle(this.nativePtr);
		return __result;
	}

	getBodyType() {
		var __result = Module._Physics2DBody_getBodyType(this.nativePtr);
		return __result;
	}

	addCircleShape(center, radius) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DBody_addCircleShape(this.nativePtr, centerBuffer, radius);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addTwoSidedEdgeShape(v1, v2) {
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var __result = Module._Physics2DBody_addTwoSidedEdgeShape(this.nativePtr, v1Buffer, v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v2Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addOneSidedEdgeShape(v0, v2, v1, v3) {
		var pbv0 = PBVector2.create();
		pbv0.x = v0.x;
		pbv0.y = v0.y;
		const v0Buffer = PBVector2.buffer(pbv0);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv3 = PBVector2.create();
		pbv3.x = v3.x;
		pbv3.y = v3.y;
		const v3Buffer = PBVector2.buffer(pbv3);
		var __result = Module._Physics2DBody_addOneSidedEdgeShape(this.nativePtr, v0Buffer, v2Buffer, v1Buffer, v3Buffer);
		PBVector2.freeBuffer(v0Buffer);
		PBVector2.freeBuffer(v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v3Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShapeWithSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Physics2DBody_addBoxShapeWithSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShape(size, center, angle) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DBody_addBoxShape(this.nativePtr, sizeBuffer, centerBuffer, angle);
		PBBKSizeF.freeBuffer(sizeBuffer);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	setScaleX(scaleX) {
		Module._Physics2DBody_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Physics2DBody_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Physics2DBody_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Physics2DBody_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Physics2DBody_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Physics2DBody_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Physics2DBody_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Physics2DBody_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Physics2DBody_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Physics2DBody_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Physics2DBody_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Physics2DBody_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Physics2DBody_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Physics2DBody_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Physics2DBody_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Physics2DBody_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Physics2DBody_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Physics2DBody_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Physics2DBody_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Physics2DBody_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Physics2DBody_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Physics2DBody_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Physics2DBody_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Physics2DBody_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Physics2DBody_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Physics2DBody_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Physics2DBody_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Physics2DBody_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Physics2DBody_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Physics2DBody_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Physics2DBody_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Physics2DBody_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Physics2DBody_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Physics2DBody_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Physics2DBody_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Physics2DBody_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Physics2DBody_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Physics2DBody_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Physics2DBody_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Physics2DBody_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Physics2DBody_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Physics2DBody_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Physics2DBody_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Physics2DBody_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Physics2DBody_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Physics2DBody_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Physics2DBody_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Physics2DBody_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Physics2DBody_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Physics2DBody_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Physics2DBody_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Physics2DBody_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Physics2DBody_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Physics2DBody_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Physics2DBody_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Physics2DBody_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Physics2DBody_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Physics2DBody_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Physics2DBody_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DBody_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Physics2DBody_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Physics2DBody_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Physics2DBody_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Physics2DBody_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Physics2DBody_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Physics2DBody_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Physics2DBody_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Physics2DBody_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Physics2DBody_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Physics2DBody_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Physics2DBody_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Physics2DBody_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Physics2DBody_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Physics2DBody_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Physics2DBody_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Physics2DBody_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Physics2DBody_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Physics2DBody_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Physics2DBody_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Physics2DBody_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Physics2DBody_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Physics2DBody_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Physics2DBody_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Physics2DBody_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Physics2DBody_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Physics2DBody_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Physics2DBody_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Physics2DBody_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Physics2DBody_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Physics2DBody_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Physics2DBody_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Physics2DBody_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Physics2DBody_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Physics2DBody_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Physics2DBody_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Physics2DBody_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Physics2DBody_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Physics2DBody_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Physics2DBody_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Physics2DBody_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Physics2DBody_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Physics2DBody_activate(this.nativePtr);
	}

	deactivate() {
		Module._Physics2DBody_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Physics2DBody_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Physics2DDynamicBody {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Physics2DDynamicBody_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Physics2DDynamicBody_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DDynamicBody(__result);
		}
	}

	setAwake(flag) {
		Module._Physics2DDynamicBody_setAwake(this.nativePtr, flag);
	}

	isAwake() {
		var __result = Module._Physics2DDynamicBody_isAwake(this.nativePtr);
		return __result;
	}

	getMass() {
		var __result = Module._Physics2DDynamicBody_getMass(this.nativePtr);
		return __result;
	}

	setMassData(mass, center, i) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		Module._Physics2DDynamicBody_setMassData(this.nativePtr, mass, centerBuffer, i);
		PBVector2.freeBuffer(centerBuffer);
	}

	resetMassData() {
		Module._Physics2DDynamicBody_resetMassData(this.nativePtr);
	}

	setLinearVelocity(v) {
		var pbv = PBVector2.create();
		pbv.x = v.x;
		pbv.y = v.y;
		const vBuffer = PBVector2.buffer(pbv);
		Module._Physics2DDynamicBody_setLinearVelocity(this.nativePtr, vBuffer);
		PBVector2.freeBuffer(vBuffer);
	}

	getLinearVelocity() {
		Module._Physics2DDynamicBody_getLinearVelocity(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAngularVelocity(omega) {
		Module._Physics2DDynamicBody_setAngularVelocity(this.nativePtr, omega);
	}

	getAngularVelocity() {
		var __result = Module._Physics2DDynamicBody_getAngularVelocity(this.nativePtr);
		return __result;
	}

	applyForce(force, point, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DDynamicBody_applyForce(this.nativePtr, forceBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyForceToCenter(force, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		Module._Physics2DDynamicBody_applyForceToCenter(this.nativePtr, forceBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
	}

	applyTorque(torque, wake) {
		Module._Physics2DDynamicBody_applyTorque(this.nativePtr, torque, wake);
	}

	applyLinearImpulse(impulse, point, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DDynamicBody_applyLinearImpulse(this.nativePtr, impulseBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyLinearImpulseToCenter(impulse, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		Module._Physics2DDynamicBody_applyLinearImpulseToCenter(this.nativePtr, impulseBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
	}

	applyAngularImpulse(impulse, wake) {
		Module._Physics2DDynamicBody_applyAngularImpulse(this.nativePtr, impulse, wake);
	}

	getInertia() {
		var __result = Module._Physics2DDynamicBody_getInertia(this.nativePtr);
		return __result;
	}

	getLinearVelocityFromWorldPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DDynamicBody_getLinearVelocityFromWorldPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearVelocityFromLocalPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DDynamicBody_getLinearVelocityFromLocalPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearDamping() {
		var __result = Module._Physics2DDynamicBody_getLinearDamping(this.nativePtr);
		return __result;
	}

	setLinearDamping(linearDamping) {
		Module._Physics2DDynamicBody_setLinearDamping(this.nativePtr, linearDamping);
	}

	getAngularDamping() {
		var __result = Module._Physics2DDynamicBody_getAngularDamping(this.nativePtr);
		return __result;
	}

	setAngularDamping(angularDamping) {
		Module._Physics2DDynamicBody_setAngularDamping(this.nativePtr, angularDamping);
	}

	getGravityScale() {
		var __result = Module._Physics2DDynamicBody_getGravityScale(this.nativePtr);
		return __result;
	}

	setGravityScale(scale) {
		Module._Physics2DDynamicBody_setGravityScale(this.nativePtr, scale);
	}

	setBullet(flag) {
		Module._Physics2DDynamicBody_setBullet(this.nativePtr, flag);
	}

	isBullet() {
		var __result = Module._Physics2DDynamicBody_isBullet(this.nativePtr);
		return __result;
	}

	setEnabled(flag) {
		Module._Physics2DDynamicBody_setEnabled(this.nativePtr, flag);
	}

	isEnabled() {
		var __result = Module._Physics2DDynamicBody_isEnabled(this.nativePtr);
		return __result;
	}

	setFixedRotation(flag) {
		Module._Physics2DDynamicBody_setFixedRotation(this.nativePtr, flag);
	}

	isFixedRotation() {
		var __result = Module._Physics2DDynamicBody_isFixedRotation(this.nativePtr);
		return __result;
	}

	getFixtureList() {
		var __result = Module._Physics2DDynamicBody_getFixtureList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	getJointList() {
		var __result = Module._Physics2DDynamicBody_getJointList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DJoint(__result);
		}
	}

	getWorldPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DDynamicBody_getWorldPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DDynamicBody_getLocalPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldVector(localVector) {
		var pblocalVector = PBVector2.create();
		pblocalVector.x = localVector.x;
		pblocalVector.y = localVector.y;
		const localVectorBuffer = PBVector2.buffer(pblocalVector);
		Module._Physics2DDynamicBody_getWorldVector(this.nativePtr, localVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalVector(worldVector) {
		var pbworldVector = PBVector2.create();
		pbworldVector.x = worldVector.x;
		pbworldVector.y = worldVector.y;
		const worldVectorBuffer = PBVector2.buffer(pbworldVector);
		Module._Physics2DDynamicBody_getLocalVector(this.nativePtr, worldVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldCenter() {
		Module._Physics2DDynamicBody_getWorldCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalCenter() {
		Module._Physics2DDynamicBody_getLocalCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAngle() {
		var __result = Module._Physics2DDynamicBody_getAngle(this.nativePtr);
		return __result;
	}

	getBodyType() {
		var __result = Module._Physics2DDynamicBody_getBodyType(this.nativePtr);
		return __result;
	}

	addCircleShape(center, radius) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DDynamicBody_addCircleShape(this.nativePtr, centerBuffer, radius);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addTwoSidedEdgeShape(v1, v2) {
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var __result = Module._Physics2DDynamicBody_addTwoSidedEdgeShape(this.nativePtr, v1Buffer, v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v2Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addOneSidedEdgeShape(v0, v2, v1, v3) {
		var pbv0 = PBVector2.create();
		pbv0.x = v0.x;
		pbv0.y = v0.y;
		const v0Buffer = PBVector2.buffer(pbv0);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv3 = PBVector2.create();
		pbv3.x = v3.x;
		pbv3.y = v3.y;
		const v3Buffer = PBVector2.buffer(pbv3);
		var __result = Module._Physics2DDynamicBody_addOneSidedEdgeShape(this.nativePtr, v0Buffer, v2Buffer, v1Buffer, v3Buffer);
		PBVector2.freeBuffer(v0Buffer);
		PBVector2.freeBuffer(v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v3Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShapeWithSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Physics2DDynamicBody_addBoxShapeWithSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShape(size, center, angle) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DDynamicBody_addBoxShape(this.nativePtr, sizeBuffer, centerBuffer, angle);
		PBBKSizeF.freeBuffer(sizeBuffer);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	setScaleX(scaleX) {
		Module._Physics2DDynamicBody_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Physics2DDynamicBody_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Physics2DDynamicBody_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Physics2DDynamicBody_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Physics2DDynamicBody_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Physics2DDynamicBody_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Physics2DDynamicBody_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Physics2DDynamicBody_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Physics2DDynamicBody_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Physics2DDynamicBody_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Physics2DDynamicBody_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Physics2DDynamicBody_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Physics2DDynamicBody_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Physics2DDynamicBody_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Physics2DDynamicBody_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Physics2DDynamicBody_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Physics2DDynamicBody_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Physics2DDynamicBody_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Physics2DDynamicBody_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Physics2DDynamicBody_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Physics2DDynamicBody_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Physics2DDynamicBody_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Physics2DDynamicBody_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Physics2DDynamicBody_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Physics2DDynamicBody_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Physics2DDynamicBody_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Physics2DDynamicBody_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Physics2DDynamicBody_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Physics2DDynamicBody_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Physics2DDynamicBody_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Physics2DDynamicBody_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Physics2DDynamicBody_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Physics2DDynamicBody_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Physics2DDynamicBody_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Physics2DDynamicBody_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Physics2DDynamicBody_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Physics2DDynamicBody_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Physics2DDynamicBody_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Physics2DDynamicBody_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Physics2DDynamicBody_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Physics2DDynamicBody_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Physics2DDynamicBody_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Physics2DDynamicBody_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Physics2DDynamicBody_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Physics2DDynamicBody_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Physics2DDynamicBody_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Physics2DDynamicBody_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Physics2DDynamicBody_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Physics2DDynamicBody_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Physics2DDynamicBody_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Physics2DDynamicBody_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Physics2DDynamicBody_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Physics2DDynamicBody_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Physics2DDynamicBody_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Physics2DDynamicBody_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Physics2DDynamicBody_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Physics2DDynamicBody_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Physics2DDynamicBody_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Physics2DDynamicBody_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DDynamicBody_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Physics2DDynamicBody_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Physics2DDynamicBody_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Physics2DDynamicBody_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Physics2DDynamicBody_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Physics2DDynamicBody_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Physics2DDynamicBody_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Physics2DDynamicBody_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Physics2DDynamicBody_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Physics2DDynamicBody_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Physics2DDynamicBody_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Physics2DDynamicBody_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Physics2DDynamicBody_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Physics2DDynamicBody_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Physics2DDynamicBody_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Physics2DDynamicBody_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Physics2DDynamicBody_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Physics2DDynamicBody_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Physics2DDynamicBody_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Physics2DDynamicBody_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Physics2DDynamicBody_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Physics2DDynamicBody_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Physics2DDynamicBody_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Physics2DDynamicBody_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Physics2DDynamicBody_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Physics2DDynamicBody_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Physics2DDynamicBody_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Physics2DDynamicBody_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Physics2DDynamicBody_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Physics2DDynamicBody_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Physics2DDynamicBody_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Physics2DDynamicBody_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Physics2DDynamicBody_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Physics2DDynamicBody_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Physics2DDynamicBody_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Physics2DDynamicBody_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Physics2DDynamicBody_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Physics2DDynamicBody_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Physics2DDynamicBody_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Physics2DDynamicBody_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Physics2DDynamicBody_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Physics2DDynamicBody_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Physics2DDynamicBody_activate(this.nativePtr);
	}

	deactivate() {
		Module._Physics2DDynamicBody_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Physics2DDynamicBody_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Physics2DFixture {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Physics2DFixture_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setFriction(friction) {
		Module._Physics2DFixture_setFriction(this.nativePtr, friction);
	}

	getFriction() {
		var __result = Module._Physics2DFixture_getFriction(this.nativePtr);
		return __result;
	}

	setRestitution(restitution) {
		Module._Physics2DFixture_setRestitution(this.nativePtr, restitution);
	}

	getRestitution() {
		var __result = Module._Physics2DFixture_getRestitution(this.nativePtr);
		return __result;
	}

	setRestitutionThreshold(restitutionThreshold) {
		Module._Physics2DFixture_setRestitutionThreshold(this.nativePtr, restitutionThreshold);
	}

	getRestitutionThreshold() {
		var __result = Module._Physics2DFixture_getRestitutionThreshold(this.nativePtr);
		return __result;
	}

	setDensity(density) {
		Module._Physics2DFixture_setDensity(this.nativePtr, density);
	}

	getDensity() {
		var __result = Module._Physics2DFixture_getDensity(this.nativePtr);
		return __result;
	}

	setAsSensor(flag) {
		Module._Physics2DFixture_setAsSensor(this.nativePtr, flag);
	}

	isSensor() {
		var __result = Module._Physics2DFixture_isSensor(this.nativePtr);
		return __result;
	}

	setCategoryBits(bits) {
		Module._Physics2DFixture_setCategoryBits(this.nativePtr, bits);
	}

	getCategoryBits() {
		var __result = Module._Physics2DFixture_getCategoryBits(this.nativePtr);
		return __result;
	}

	setMaskBits(bits) {
		Module._Physics2DFixture_setMaskBits(this.nativePtr, bits);
	}

	getMaskBits() {
		var __result = Module._Physics2DFixture_getMaskBits(this.nativePtr);
		return __result;
	}

	setGroupIndex(index) {
		Module._Physics2DFixture_setGroupIndex(this.nativePtr, index);
	}

	getGroupIndex() {
		var __result = Module._Physics2DFixture_getGroupIndex(this.nativePtr);
		return __result;
	}

	getNext() {
		var __result = Module._Physics2DFixture_getNext(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	getBody() {
		var __result = Module._Physics2DFixture_getBody(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DBody(__result);
		}
	}

	setScaleX(scaleX) {
		Module._Physics2DFixture_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Physics2DFixture_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Physics2DFixture_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Physics2DFixture_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Physics2DFixture_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Physics2DFixture_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Physics2DFixture_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Physics2DFixture_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Physics2DFixture_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Physics2DFixture_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Physics2DFixture_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Physics2DFixture_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Physics2DFixture_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Physics2DFixture_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Physics2DFixture_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Physics2DFixture_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Physics2DFixture_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Physics2DFixture_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Physics2DFixture_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Physics2DFixture_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Physics2DFixture_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Physics2DFixture_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Physics2DFixture_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Physics2DFixture_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Physics2DFixture_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Physics2DFixture_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Physics2DFixture_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Physics2DFixture_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Physics2DFixture_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Physics2DFixture_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Physics2DFixture_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Physics2DFixture_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Physics2DFixture_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Physics2DFixture_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Physics2DFixture_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Physics2DFixture_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Physics2DFixture_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Physics2DFixture_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Physics2DFixture_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Physics2DFixture_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Physics2DFixture_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Physics2DFixture_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Physics2DFixture_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Physics2DFixture_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Physics2DFixture_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Physics2DFixture_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Physics2DFixture_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Physics2DFixture_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Physics2DFixture_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Physics2DFixture_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Physics2DFixture_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Physics2DFixture_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Physics2DFixture_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Physics2DFixture_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Physics2DFixture_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Physics2DFixture_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Physics2DFixture_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Physics2DFixture_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Physics2DFixture_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DFixture_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Physics2DFixture_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Physics2DFixture_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Physics2DFixture_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Physics2DFixture_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Physics2DFixture_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Physics2DFixture_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Physics2DFixture_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Physics2DFixture_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Physics2DFixture_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Physics2DFixture_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Physics2DFixture_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Physics2DFixture_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Physics2DFixture_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Physics2DFixture_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Physics2DFixture_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Physics2DFixture_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Physics2DFixture_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Physics2DFixture_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Physics2DFixture_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Physics2DFixture_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Physics2DFixture_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Physics2DFixture_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Physics2DFixture_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Physics2DFixture_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Physics2DFixture_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Physics2DFixture_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Physics2DFixture_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Physics2DFixture_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Physics2DFixture_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Physics2DFixture_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Physics2DFixture_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Physics2DFixture_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Physics2DFixture_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Physics2DFixture_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Physics2DFixture_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Physics2DFixture_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Physics2DFixture_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Physics2DFixture_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Physics2DFixture_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Physics2DFixture_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Physics2DFixture_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Physics2DFixture_activate(this.nativePtr);
	}

	deactivate() {
		Module._Physics2DFixture_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Physics2DFixture_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Physics2DKinematicBody {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Physics2DKinematicBody_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Physics2DKinematicBody_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DKinematicBody(__result);
		}
	}

	setAwake(flag) {
		Module._Physics2DKinematicBody_setAwake(this.nativePtr, flag);
	}

	isAwake() {
		var __result = Module._Physics2DKinematicBody_isAwake(this.nativePtr);
		return __result;
	}

	getMass() {
		var __result = Module._Physics2DKinematicBody_getMass(this.nativePtr);
		return __result;
	}

	setMassData(mass, center, i) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		Module._Physics2DKinematicBody_setMassData(this.nativePtr, mass, centerBuffer, i);
		PBVector2.freeBuffer(centerBuffer);
	}

	resetMassData() {
		Module._Physics2DKinematicBody_resetMassData(this.nativePtr);
	}

	setLinearVelocity(v) {
		var pbv = PBVector2.create();
		pbv.x = v.x;
		pbv.y = v.y;
		const vBuffer = PBVector2.buffer(pbv);
		Module._Physics2DKinematicBody_setLinearVelocity(this.nativePtr, vBuffer);
		PBVector2.freeBuffer(vBuffer);
	}

	getLinearVelocity() {
		Module._Physics2DKinematicBody_getLinearVelocity(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAngularVelocity(omega) {
		Module._Physics2DKinematicBody_setAngularVelocity(this.nativePtr, omega);
	}

	getAngularVelocity() {
		var __result = Module._Physics2DKinematicBody_getAngularVelocity(this.nativePtr);
		return __result;
	}

	applyForce(force, point, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DKinematicBody_applyForce(this.nativePtr, forceBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyForceToCenter(force, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		Module._Physics2DKinematicBody_applyForceToCenter(this.nativePtr, forceBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
	}

	applyTorque(torque, wake) {
		Module._Physics2DKinematicBody_applyTorque(this.nativePtr, torque, wake);
	}

	applyLinearImpulse(impulse, point, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DKinematicBody_applyLinearImpulse(this.nativePtr, impulseBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyLinearImpulseToCenter(impulse, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		Module._Physics2DKinematicBody_applyLinearImpulseToCenter(this.nativePtr, impulseBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
	}

	applyAngularImpulse(impulse, wake) {
		Module._Physics2DKinematicBody_applyAngularImpulse(this.nativePtr, impulse, wake);
	}

	getInertia() {
		var __result = Module._Physics2DKinematicBody_getInertia(this.nativePtr);
		return __result;
	}

	getLinearVelocityFromWorldPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DKinematicBody_getLinearVelocityFromWorldPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearVelocityFromLocalPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DKinematicBody_getLinearVelocityFromLocalPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearDamping() {
		var __result = Module._Physics2DKinematicBody_getLinearDamping(this.nativePtr);
		return __result;
	}

	setLinearDamping(linearDamping) {
		Module._Physics2DKinematicBody_setLinearDamping(this.nativePtr, linearDamping);
	}

	getAngularDamping() {
		var __result = Module._Physics2DKinematicBody_getAngularDamping(this.nativePtr);
		return __result;
	}

	setAngularDamping(angularDamping) {
		Module._Physics2DKinematicBody_setAngularDamping(this.nativePtr, angularDamping);
	}

	getGravityScale() {
		var __result = Module._Physics2DKinematicBody_getGravityScale(this.nativePtr);
		return __result;
	}

	setGravityScale(scale) {
		Module._Physics2DKinematicBody_setGravityScale(this.nativePtr, scale);
	}

	setBullet(flag) {
		Module._Physics2DKinematicBody_setBullet(this.nativePtr, flag);
	}

	isBullet() {
		var __result = Module._Physics2DKinematicBody_isBullet(this.nativePtr);
		return __result;
	}

	setEnabled(flag) {
		Module._Physics2DKinematicBody_setEnabled(this.nativePtr, flag);
	}

	isEnabled() {
		var __result = Module._Physics2DKinematicBody_isEnabled(this.nativePtr);
		return __result;
	}

	setFixedRotation(flag) {
		Module._Physics2DKinematicBody_setFixedRotation(this.nativePtr, flag);
	}

	isFixedRotation() {
		var __result = Module._Physics2DKinematicBody_isFixedRotation(this.nativePtr);
		return __result;
	}

	getFixtureList() {
		var __result = Module._Physics2DKinematicBody_getFixtureList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	getJointList() {
		var __result = Module._Physics2DKinematicBody_getJointList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DJoint(__result);
		}
	}

	getWorldPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DKinematicBody_getWorldPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DKinematicBody_getLocalPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldVector(localVector) {
		var pblocalVector = PBVector2.create();
		pblocalVector.x = localVector.x;
		pblocalVector.y = localVector.y;
		const localVectorBuffer = PBVector2.buffer(pblocalVector);
		Module._Physics2DKinematicBody_getWorldVector(this.nativePtr, localVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalVector(worldVector) {
		var pbworldVector = PBVector2.create();
		pbworldVector.x = worldVector.x;
		pbworldVector.y = worldVector.y;
		const worldVectorBuffer = PBVector2.buffer(pbworldVector);
		Module._Physics2DKinematicBody_getLocalVector(this.nativePtr, worldVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldCenter() {
		Module._Physics2DKinematicBody_getWorldCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalCenter() {
		Module._Physics2DKinematicBody_getLocalCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAngle() {
		var __result = Module._Physics2DKinematicBody_getAngle(this.nativePtr);
		return __result;
	}

	getBodyType() {
		var __result = Module._Physics2DKinematicBody_getBodyType(this.nativePtr);
		return __result;
	}

	addCircleShape(center, radius) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DKinematicBody_addCircleShape(this.nativePtr, centerBuffer, radius);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addTwoSidedEdgeShape(v1, v2) {
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var __result = Module._Physics2DKinematicBody_addTwoSidedEdgeShape(this.nativePtr, v1Buffer, v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v2Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addOneSidedEdgeShape(v0, v2, v1, v3) {
		var pbv0 = PBVector2.create();
		pbv0.x = v0.x;
		pbv0.y = v0.y;
		const v0Buffer = PBVector2.buffer(pbv0);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv3 = PBVector2.create();
		pbv3.x = v3.x;
		pbv3.y = v3.y;
		const v3Buffer = PBVector2.buffer(pbv3);
		var __result = Module._Physics2DKinematicBody_addOneSidedEdgeShape(this.nativePtr, v0Buffer, v2Buffer, v1Buffer, v3Buffer);
		PBVector2.freeBuffer(v0Buffer);
		PBVector2.freeBuffer(v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v3Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShapeWithSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Physics2DKinematicBody_addBoxShapeWithSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShape(size, center, angle) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DKinematicBody_addBoxShape(this.nativePtr, sizeBuffer, centerBuffer, angle);
		PBBKSizeF.freeBuffer(sizeBuffer);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	setScaleX(scaleX) {
		Module._Physics2DKinematicBody_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Physics2DKinematicBody_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Physics2DKinematicBody_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Physics2DKinematicBody_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Physics2DKinematicBody_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Physics2DKinematicBody_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Physics2DKinematicBody_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Physics2DKinematicBody_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Physics2DKinematicBody_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Physics2DKinematicBody_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Physics2DKinematicBody_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Physics2DKinematicBody_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Physics2DKinematicBody_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Physics2DKinematicBody_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Physics2DKinematicBody_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Physics2DKinematicBody_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Physics2DKinematicBody_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Physics2DKinematicBody_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Physics2DKinematicBody_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Physics2DKinematicBody_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Physics2DKinematicBody_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Physics2DKinematicBody_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Physics2DKinematicBody_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Physics2DKinematicBody_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Physics2DKinematicBody_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Physics2DKinematicBody_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Physics2DKinematicBody_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Physics2DKinematicBody_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Physics2DKinematicBody_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Physics2DKinematicBody_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Physics2DKinematicBody_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Physics2DKinematicBody_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Physics2DKinematicBody_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Physics2DKinematicBody_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Physics2DKinematicBody_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Physics2DKinematicBody_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Physics2DKinematicBody_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Physics2DKinematicBody_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Physics2DKinematicBody_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Physics2DKinematicBody_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Physics2DKinematicBody_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Physics2DKinematicBody_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Physics2DKinematicBody_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Physics2DKinematicBody_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Physics2DKinematicBody_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Physics2DKinematicBody_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Physics2DKinematicBody_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Physics2DKinematicBody_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Physics2DKinematicBody_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Physics2DKinematicBody_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Physics2DKinematicBody_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Physics2DKinematicBody_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Physics2DKinematicBody_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Physics2DKinematicBody_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Physics2DKinematicBody_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Physics2DKinematicBody_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Physics2DKinematicBody_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Physics2DKinematicBody_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Physics2DKinematicBody_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DKinematicBody_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Physics2DKinematicBody_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Physics2DKinematicBody_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Physics2DKinematicBody_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Physics2DKinematicBody_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Physics2DKinematicBody_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Physics2DKinematicBody_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Physics2DKinematicBody_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Physics2DKinematicBody_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Physics2DKinematicBody_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Physics2DKinematicBody_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Physics2DKinematicBody_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Physics2DKinematicBody_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Physics2DKinematicBody_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Physics2DKinematicBody_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Physics2DKinematicBody_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Physics2DKinematicBody_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Physics2DKinematicBody_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Physics2DKinematicBody_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Physics2DKinematicBody_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Physics2DKinematicBody_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Physics2DKinematicBody_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Physics2DKinematicBody_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Physics2DKinematicBody_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Physics2DKinematicBody_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Physics2DKinematicBody_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Physics2DKinematicBody_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Physics2DKinematicBody_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Physics2DKinematicBody_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Physics2DKinematicBody_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Physics2DKinematicBody_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Physics2DKinematicBody_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Physics2DKinematicBody_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Physics2DKinematicBody_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Physics2DKinematicBody_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Physics2DKinematicBody_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Physics2DKinematicBody_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Physics2DKinematicBody_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Physics2DKinematicBody_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Physics2DKinematicBody_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Physics2DKinematicBody_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Physics2DKinematicBody_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Physics2DKinematicBody_activate(this.nativePtr);
	}

	deactivate() {
		Module._Physics2DKinematicBody_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Physics2DKinematicBody_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Physics2DStaticBody {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Physics2DStaticBody_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Physics2DStaticBody_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DStaticBody(__result);
		}
	}

	setAwake(flag) {
		Module._Physics2DStaticBody_setAwake(this.nativePtr, flag);
	}

	isAwake() {
		var __result = Module._Physics2DStaticBody_isAwake(this.nativePtr);
		return __result;
	}

	getMass() {
		var __result = Module._Physics2DStaticBody_getMass(this.nativePtr);
		return __result;
	}

	setMassData(mass, center, i) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		Module._Physics2DStaticBody_setMassData(this.nativePtr, mass, centerBuffer, i);
		PBVector2.freeBuffer(centerBuffer);
	}

	resetMassData() {
		Module._Physics2DStaticBody_resetMassData(this.nativePtr);
	}

	setLinearVelocity(v) {
		var pbv = PBVector2.create();
		pbv.x = v.x;
		pbv.y = v.y;
		const vBuffer = PBVector2.buffer(pbv);
		Module._Physics2DStaticBody_setLinearVelocity(this.nativePtr, vBuffer);
		PBVector2.freeBuffer(vBuffer);
	}

	getLinearVelocity() {
		Module._Physics2DStaticBody_getLinearVelocity(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAngularVelocity(omega) {
		Module._Physics2DStaticBody_setAngularVelocity(this.nativePtr, omega);
	}

	getAngularVelocity() {
		var __result = Module._Physics2DStaticBody_getAngularVelocity(this.nativePtr);
		return __result;
	}

	applyForce(force, point, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DStaticBody_applyForce(this.nativePtr, forceBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyForceToCenter(force, wake) {
		var pbforce = PBVector2.create();
		pbforce.x = force.x;
		pbforce.y = force.y;
		const forceBuffer = PBVector2.buffer(pbforce);
		Module._Physics2DStaticBody_applyForceToCenter(this.nativePtr, forceBuffer, wake);
		PBVector2.freeBuffer(forceBuffer);
	}

	applyTorque(torque, wake) {
		Module._Physics2DStaticBody_applyTorque(this.nativePtr, torque, wake);
	}

	applyLinearImpulse(impulse, point, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		var pbpoint = PBVector2.create();
		pbpoint.x = point.x;
		pbpoint.y = point.y;
		const pointBuffer = PBVector2.buffer(pbpoint);
		Module._Physics2DStaticBody_applyLinearImpulse(this.nativePtr, impulseBuffer, pointBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
		PBVector2.freeBuffer(pointBuffer);
	}

	applyLinearImpulseToCenter(impulse, wake) {
		var pbimpulse = PBVector2.create();
		pbimpulse.x = impulse.x;
		pbimpulse.y = impulse.y;
		const impulseBuffer = PBVector2.buffer(pbimpulse);
		Module._Physics2DStaticBody_applyLinearImpulseToCenter(this.nativePtr, impulseBuffer, wake);
		PBVector2.freeBuffer(impulseBuffer);
	}

	applyAngularImpulse(impulse, wake) {
		Module._Physics2DStaticBody_applyAngularImpulse(this.nativePtr, impulse, wake);
	}

	getInertia() {
		var __result = Module._Physics2DStaticBody_getInertia(this.nativePtr);
		return __result;
	}

	getLinearVelocityFromWorldPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DStaticBody_getLinearVelocityFromWorldPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearVelocityFromLocalPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DStaticBody_getLinearVelocityFromLocalPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLinearDamping() {
		var __result = Module._Physics2DStaticBody_getLinearDamping(this.nativePtr);
		return __result;
	}

	setLinearDamping(linearDamping) {
		Module._Physics2DStaticBody_setLinearDamping(this.nativePtr, linearDamping);
	}

	getAngularDamping() {
		var __result = Module._Physics2DStaticBody_getAngularDamping(this.nativePtr);
		return __result;
	}

	setAngularDamping(angularDamping) {
		Module._Physics2DStaticBody_setAngularDamping(this.nativePtr, angularDamping);
	}

	getGravityScale() {
		var __result = Module._Physics2DStaticBody_getGravityScale(this.nativePtr);
		return __result;
	}

	setGravityScale(scale) {
		Module._Physics2DStaticBody_setGravityScale(this.nativePtr, scale);
	}

	setBullet(flag) {
		Module._Physics2DStaticBody_setBullet(this.nativePtr, flag);
	}

	isBullet() {
		var __result = Module._Physics2DStaticBody_isBullet(this.nativePtr);
		return __result;
	}

	setEnabled(flag) {
		Module._Physics2DStaticBody_setEnabled(this.nativePtr, flag);
	}

	isEnabled() {
		var __result = Module._Physics2DStaticBody_isEnabled(this.nativePtr);
		return __result;
	}

	setFixedRotation(flag) {
		Module._Physics2DStaticBody_setFixedRotation(this.nativePtr, flag);
	}

	isFixedRotation() {
		var __result = Module._Physics2DStaticBody_isFixedRotation(this.nativePtr);
		return __result;
	}

	getFixtureList() {
		var __result = Module._Physics2DStaticBody_getFixtureList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	getJointList() {
		var __result = Module._Physics2DStaticBody_getJointList(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DJoint(__result);
		}
	}

	getWorldPoint(localPoint) {
		var pblocalPoint = PBVector2.create();
		pblocalPoint.x = localPoint.x;
		pblocalPoint.y = localPoint.y;
		const localPointBuffer = PBVector2.buffer(pblocalPoint);
		Module._Physics2DStaticBody_getWorldPoint(this.nativePtr, localPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalPoint(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DStaticBody_getLocalPoint(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldVector(localVector) {
		var pblocalVector = PBVector2.create();
		pblocalVector.x = localVector.x;
		pblocalVector.y = localVector.y;
		const localVectorBuffer = PBVector2.buffer(pblocalVector);
		Module._Physics2DStaticBody_getWorldVector(this.nativePtr, localVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(localVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalVector(worldVector) {
		var pbworldVector = PBVector2.create();
		pbworldVector.x = worldVector.x;
		pbworldVector.y = worldVector.y;
		const worldVectorBuffer = PBVector2.buffer(pbworldVector);
		Module._Physics2DStaticBody_getLocalVector(this.nativePtr, worldVectorBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldVectorBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getWorldCenter() {
		Module._Physics2DStaticBody_getWorldCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getLocalCenter() {
		Module._Physics2DStaticBody_getLocalCenter(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAngle() {
		var __result = Module._Physics2DStaticBody_getAngle(this.nativePtr);
		return __result;
	}

	getBodyType() {
		var __result = Module._Physics2DStaticBody_getBodyType(this.nativePtr);
		return __result;
	}

	addCircleShape(center, radius) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DStaticBody_addCircleShape(this.nativePtr, centerBuffer, radius);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addTwoSidedEdgeShape(v1, v2) {
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var __result = Module._Physics2DStaticBody_addTwoSidedEdgeShape(this.nativePtr, v1Buffer, v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v2Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addOneSidedEdgeShape(v0, v2, v1, v3) {
		var pbv0 = PBVector2.create();
		pbv0.x = v0.x;
		pbv0.y = v0.y;
		const v0Buffer = PBVector2.buffer(pbv0);
		var pbv2 = PBVector2.create();
		pbv2.x = v2.x;
		pbv2.y = v2.y;
		const v2Buffer = PBVector2.buffer(pbv2);
		var pbv1 = PBVector2.create();
		pbv1.x = v1.x;
		pbv1.y = v1.y;
		const v1Buffer = PBVector2.buffer(pbv1);
		var pbv3 = PBVector2.create();
		pbv3.x = v3.x;
		pbv3.y = v3.y;
		const v3Buffer = PBVector2.buffer(pbv3);
		var __result = Module._Physics2DStaticBody_addOneSidedEdgeShape(this.nativePtr, v0Buffer, v2Buffer, v1Buffer, v3Buffer);
		PBVector2.freeBuffer(v0Buffer);
		PBVector2.freeBuffer(v2Buffer);
		PBVector2.freeBuffer(v1Buffer);
		PBVector2.freeBuffer(v3Buffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShapeWithSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Physics2DStaticBody_addBoxShapeWithSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	addBoxShape(size, center, angle) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var __result = Module._Physics2DStaticBody_addBoxShape(this.nativePtr, sizeBuffer, centerBuffer, angle);
		PBBKSizeF.freeBuffer(sizeBuffer);
		PBVector2.freeBuffer(centerBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Physics2DFixture(__result);
		}
	}

	setScaleX(scaleX) {
		Module._Physics2DStaticBody_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Physics2DStaticBody_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Physics2DStaticBody_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Physics2DStaticBody_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Physics2DStaticBody_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Physics2DStaticBody_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Physics2DStaticBody_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Physics2DStaticBody_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Physics2DStaticBody_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Physics2DStaticBody_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Physics2DStaticBody_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Physics2DStaticBody_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Physics2DStaticBody_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Physics2DStaticBody_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Physics2DStaticBody_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Physics2DStaticBody_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Physics2DStaticBody_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Physics2DStaticBody_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Physics2DStaticBody_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Physics2DStaticBody_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Physics2DStaticBody_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Physics2DStaticBody_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Physics2DStaticBody_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Physics2DStaticBody_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Physics2DStaticBody_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Physics2DStaticBody_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Physics2DStaticBody_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Physics2DStaticBody_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Physics2DStaticBody_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Physics2DStaticBody_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Physics2DStaticBody_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Physics2DStaticBody_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Physics2DStaticBody_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Physics2DStaticBody_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Physics2DStaticBody_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Physics2DStaticBody_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Physics2DStaticBody_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Physics2DStaticBody_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Physics2DStaticBody_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Physics2DStaticBody_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Physics2DStaticBody_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Physics2DStaticBody_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Physics2DStaticBody_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Physics2DStaticBody_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Physics2DStaticBody_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Physics2DStaticBody_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Physics2DStaticBody_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Physics2DStaticBody_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Physics2DStaticBody_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Physics2DStaticBody_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Physics2DStaticBody_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Physics2DStaticBody_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Physics2DStaticBody_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Physics2DStaticBody_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Physics2DStaticBody_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Physics2DStaticBody_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Physics2DStaticBody_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Physics2DStaticBody_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Physics2DStaticBody_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Physics2DStaticBody_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Physics2DStaticBody_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Physics2DStaticBody_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Physics2DStaticBody_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Physics2DStaticBody_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Physics2DStaticBody_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Physics2DStaticBody_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Physics2DStaticBody_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Physics2DStaticBody_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Physics2DStaticBody_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Physics2DStaticBody_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Physics2DStaticBody_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Physics2DStaticBody_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Physics2DStaticBody_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Physics2DStaticBody_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Physics2DStaticBody_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Physics2DStaticBody_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Physics2DStaticBody_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Physics2DStaticBody_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Physics2DStaticBody_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Physics2DStaticBody_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Physics2DStaticBody_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Physics2DStaticBody_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Physics2DStaticBody_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Physics2DStaticBody_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Physics2DStaticBody_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Physics2DStaticBody_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Physics2DStaticBody_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Physics2DStaticBody_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Physics2DStaticBody_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Physics2DStaticBody_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Physics2DStaticBody_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Physics2DStaticBody_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Physics2DStaticBody_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Physics2DStaticBody_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Physics2DStaticBody_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Physics2DStaticBody_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Physics2DStaticBody_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Physics2DStaticBody_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Physics2DStaticBody_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Physics2DStaticBody_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Physics2DStaticBody_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Physics2DStaticBody_activate(this.nativePtr);
	}

	deactivate() {
		Module._Physics2DStaticBody_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Physics2DStaticBody_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Bone {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Bone_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setToSetupPose() {
		Module._Bone_setToSetupPose(this.nativePtr);
	}

	isActive() {
		var __result = Module._Bone_isActive(this.nativePtr);
		return __result;
	}

	setActive(inValue) {
		Module._Bone_setActive(this.nativePtr, inValue);
	}

	setScaleX(scaleX) {
		Module._Bone_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Bone_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Bone_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Bone_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Bone_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Bone_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Bone_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Bone_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Bone_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Bone_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Bone_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Bone_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Bone_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Bone_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Bone_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Bone_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Bone_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Bone_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Bone_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Bone_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Bone_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Bone_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Bone_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Bone_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Bone_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Bone_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Bone_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Bone_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Bone_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Bone_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Bone_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Bone_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Bone_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Bone_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Bone_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Bone_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Bone_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Bone_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Bone_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Bone_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Bone_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Bone_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Bone_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Bone_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Bone_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Bone_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Bone_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Bone_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Bone_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Bone_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Bone_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Bone_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Bone_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Bone_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Bone_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Bone_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Bone_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Bone_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Bone_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Bone_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Bone_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Bone_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Bone_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Bone_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Bone_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Bone_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Bone_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Bone_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Bone_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Bone_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Bone_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Bone_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Bone_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Bone_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Bone_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Bone_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Bone_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Bone_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Bone_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Bone_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Bone_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Bone_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Bone_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Bone_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Bone_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Bone_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Bone_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Bone_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Bone_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Bone_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Bone_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Bone_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Bone_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Bone_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Bone_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Bone_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Bone_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Bone_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Bone_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Bone_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Bone_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Bone_activate(this.nativePtr);
	}

	deactivate() {
		Module._Bone_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Bone_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Skeleton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Skeleton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setScaleX(scaleX) {
		Module._Skeleton_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Skeleton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Skeleton_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Skeleton_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Skeleton_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Skeleton_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Skeleton_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Skeleton_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Skeleton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Skeleton_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Skeleton_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Skeleton_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Skeleton_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Skeleton_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Skeleton_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Skeleton_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Skeleton_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Skeleton_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Skeleton_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Skeleton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Skeleton_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Skeleton_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Skeleton_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Skeleton_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Skeleton_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Skeleton_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Skeleton_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Skeleton_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Skeleton_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Skeleton_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Skeleton_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Skeleton_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Skeleton_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Skeleton_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Skeleton_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Skeleton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Skeleton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Skeleton_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Skeleton_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Skeleton_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Skeleton_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Skeleton_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Skeleton_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Skeleton_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Skeleton_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Skeleton_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Skeleton_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Skeleton_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Skeleton_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Skeleton_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Skeleton_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Skeleton_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Skeleton_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Skeleton_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Skeleton_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Skeleton_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Skeleton_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Skeleton_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Skeleton_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Skeleton_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Skeleton_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Skeleton_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Skeleton_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Skeleton_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Skeleton_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Skeleton_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Skeleton_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Skeleton_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Skeleton_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Skeleton_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Skeleton_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Skeleton_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Skeleton_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Skeleton_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Skeleton_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Skeleton_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Skeleton_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Skeleton_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Skeleton_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Skeleton_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Skeleton_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Skeleton_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Skeleton_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Skeleton_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Skeleton_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Skeleton_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Skeleton_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Skeleton_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Skeleton_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Skeleton_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Skeleton_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Skeleton_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Skeleton_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Skeleton_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Skeleton_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Skeleton_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Skeleton_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Skeleton_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Skeleton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Skeleton_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Skeleton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Skeleton_activate(this.nativePtr);
	}

	deactivate() {
		Module._Skeleton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Skeleton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class SkeletonSprite {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._SkeletonSprite_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(skeletonFile, atlasFile) {
		const skeletonFileBuffer = Module._malloc(skeletonFile.length+1);
		Module.stringToUTF8(skeletonFile, skeletonFileBuffer, skeletonFile.length+1);
		const atlasFileBuffer = Module._malloc(atlasFile.length+1);
		Module.stringToUTF8(atlasFile, atlasFileBuffer, atlasFile.length+1);
		var __result = Module._SkeletonSprite_create(skeletonFileBuffer, atlasFileBuffer);
		Module._free(skeletonFileBuffer);
		Module._free(atlasFileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SkeletonSprite(__result);
		}
	}

	enableLoadAtlasSynchronize(flag) {
		Module._SkeletonSprite_enableLoadAtlasSynchronize(this.nativePtr, flag);
	}

	enableMipmap(flag) {
		Module._SkeletonSprite_enableMipmap(this.nativePtr, flag);
	}

	enableMsaa(flag) {
		Module._SkeletonSprite_enableMsaa(this.nativePtr, flag);
	}

	loadSkeleton(skeletonFile, atlasFile) {
		const skeletonFileBuffer = Module._malloc(skeletonFile.length+1);
		Module.stringToUTF8(skeletonFile, skeletonFileBuffer, skeletonFile.length+1);
		const atlasFileBuffer = Module._malloc(atlasFile.length+1);
		Module.stringToUTF8(atlasFile, atlasFileBuffer, atlasFile.length+1);
		var __result = Module._SkeletonSprite_loadSkeleton(this.nativePtr, skeletonFileBuffer, atlasFileBuffer);
		Module._free(skeletonFileBuffer);
		Module._free(atlasFileBuffer);
		return __result;
	}

	getSkeleton() {
		var __result = Module._SkeletonSprite_getSkeleton(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Skeleton(__result);
		}
	}

	setAnimation(trackIndex, animationName, loop) {
		const animationNameBuffer = Module._malloc(animationName.length+1);
		Module.stringToUTF8(animationName, animationNameBuffer, animationName.length+1);
		var __result = Module._SkeletonSprite_setAnimation(this.nativePtr, trackIndex, animationNameBuffer, loop);
		Module._free(animationNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TrackEntry(__result);
		}
	}

	addAnimation(trackIndex, animationName, loop, delay) {
		const animationNameBuffer = Module._malloc(animationName.length+1);
		Module.stringToUTF8(animationName, animationNameBuffer, animationName.length+1);
		var __result = Module._SkeletonSprite_addAnimation(this.nativePtr, trackIndex, animationNameBuffer, loop, delay);
		Module._free(animationNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TrackEntry(__result);
		}
	}

	setEmptyAnimation(trackIndex, mixDuration) {
		var __result = Module._SkeletonSprite_setEmptyAnimation(this.nativePtr, trackIndex, mixDuration);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TrackEntry(__result);
		}
	}

	addEmptyAnimation(trackIndex, mixDuration, delay) {
		var __result = Module._SkeletonSprite_addEmptyAnimation(this.nativePtr, trackIndex, mixDuration, delay);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TrackEntry(__result);
		}
	}

	setEmptyAnimations(mixDuration) {
		Module._SkeletonSprite_setEmptyAnimations(this.nativePtr, mixDuration);
	}

	getCurrentAnimation(trackIndex) {
		var __result = Module._SkeletonSprite_getCurrentAnimation(this.nativePtr, trackIndex);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TrackEntry(__result);
		}
	}

	clearTracks() {
		Module._SkeletonSprite_clearTracks(this.nativePtr);
	}

	clearTrack(trackIndex) {
		Module._SkeletonSprite_clearTrack(this.nativePtr, trackIndex);
	}

	setMixBetweenTwoAnimations(from, to, duration) {
		const fromBuffer = Module._malloc(from.length+1);
		Module.stringToUTF8(from, fromBuffer, from.length+1);
		const toBuffer = Module._malloc(to.length+1);
		Module.stringToUTF8(to, toBuffer, to.length+1);
		Module._SkeletonSprite_setMixBetweenTwoAnimations(this.nativePtr, fromBuffer, toBuffer, duration);
		Module._free(fromBuffer);
		Module._free(toBuffer);
	}

	getDefaultAnimationMix() {
		var __result = Module._SkeletonSprite_getDefaultAnimationMix(this.nativePtr);
		return __result;
	}

	setDefaultAnimationMix(duration) {
		Module._SkeletonSprite_setDefaultAnimationMix(this.nativePtr, duration);
	}

	getTimeScale() {
		var __result = Module._SkeletonSprite_getTimeScale(this.nativePtr);
		return __result;
	}

	setTimeScale(timeScale) {
		Module._SkeletonSprite_setTimeScale(this.nativePtr, timeScale);
	}

	disableAnimationStateQueue() {
		Module._SkeletonSprite_disableAnimationStateQueue(this.nativePtr);
	}

	enableAnimationStateQueue() {
		Module._SkeletonSprite_enableAnimationStateQueue(this.nativePtr);
	}

	setToSetupPose() {
		Module._SkeletonSprite_setToSetupPose(this.nativePtr);
	}

	setBonesToSetupPose() {
		Module._SkeletonSprite_setBonesToSetupPose(this.nativePtr);
	}

	setSlotsToSetupPose() {
		Module._SkeletonSprite_setSlotsToSetupPose(this.nativePtr);
	}

	findBone(boneName) {
		const boneNameBuffer = Module._malloc(boneName.length+1);
		Module.stringToUTF8(boneName, boneNameBuffer, boneName.length+1);
		var __result = Module._SkeletonSprite_findBone(this.nativePtr, boneNameBuffer);
		Module._free(boneNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Bone(__result);
		}
	}

	findBoneIndex(boneName) {
		const boneNameBuffer = Module._malloc(boneName.length+1);
		Module.stringToUTF8(boneName, boneNameBuffer, boneName.length+1);
		var __result = Module._SkeletonSprite_findBoneIndex(this.nativePtr, boneNameBuffer);
		Module._free(boneNameBuffer);
		return __result;
	}

	findSlot(slotName) {
		const slotNameBuffer = Module._malloc(slotName.length+1);
		Module.stringToUTF8(slotName, slotNameBuffer, slotName.length+1);
		var __result = Module._SkeletonSprite_findSlot(this.nativePtr, slotNameBuffer);
		Module._free(slotNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Slot(__result);
		}
	}

	findSlotIndex(slotName) {
		const slotNameBuffer = Module._malloc(slotName.length+1);
		Module.stringToUTF8(slotName, slotNameBuffer, slotName.length+1);
		var __result = Module._SkeletonSprite_findSlotIndex(this.nativePtr, slotNameBuffer);
		Module._free(slotNameBuffer);
		return __result;
	}

	setSkinWithName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._SkeletonSprite_setSkinWithName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	setSkin(skin) {
		Module._SkeletonSprite_setSkin(this.nativePtr, skin.nativePtr);
	}

	findSkin(skinName) {
		const skinNameBuffer = Module._malloc(skinName.length+1);
		Module.stringToUTF8(skinName, skinNameBuffer, skinName.length+1);
		var __result = Module._SkeletonSprite_findSkin(this.nativePtr, skinNameBuffer);
		Module._free(skinNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Skin(__result);
		}
	}

	getRootBone() {
		var __result = Module._SkeletonSprite_getRootBone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Bone(__result);
		}
	}

	getSkin() {
		var __result = Module._SkeletonSprite_getSkin(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Skin(__result);
		}
	}

	getSkeletonBoundingBox() {
		var __result = Module._SkeletonSprite_getSkeletonBoundingBox(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new SkeletonBounds(__result);
		}
	}

	setScaleX(scaleX) {
		Module._SkeletonSprite_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._SkeletonSprite_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._SkeletonSprite_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._SkeletonSprite_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._SkeletonSprite_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._SkeletonSprite_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._SkeletonSprite_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._SkeletonSprite_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._SkeletonSprite_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._SkeletonSprite_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._SkeletonSprite_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._SkeletonSprite_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._SkeletonSprite_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._SkeletonSprite_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._SkeletonSprite_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._SkeletonSprite_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._SkeletonSprite_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._SkeletonSprite_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._SkeletonSprite_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._SkeletonSprite_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._SkeletonSprite_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._SkeletonSprite_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._SkeletonSprite_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._SkeletonSprite_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._SkeletonSprite_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._SkeletonSprite_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._SkeletonSprite_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._SkeletonSprite_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._SkeletonSprite_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._SkeletonSprite_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._SkeletonSprite_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._SkeletonSprite_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._SkeletonSprite_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._SkeletonSprite_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._SkeletonSprite_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._SkeletonSprite_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._SkeletonSprite_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._SkeletonSprite_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._SkeletonSprite_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._SkeletonSprite_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._SkeletonSprite_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._SkeletonSprite_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._SkeletonSprite_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._SkeletonSprite_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._SkeletonSprite_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._SkeletonSprite_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._SkeletonSprite_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._SkeletonSprite_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._SkeletonSprite_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._SkeletonSprite_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._SkeletonSprite_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._SkeletonSprite_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._SkeletonSprite_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._SkeletonSprite_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._SkeletonSprite_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._SkeletonSprite_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._SkeletonSprite_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._SkeletonSprite_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._SkeletonSprite_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._SkeletonSprite_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._SkeletonSprite_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._SkeletonSprite_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._SkeletonSprite_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._SkeletonSprite_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._SkeletonSprite_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._SkeletonSprite_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._SkeletonSprite_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._SkeletonSprite_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._SkeletonSprite_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._SkeletonSprite_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._SkeletonSprite_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._SkeletonSprite_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._SkeletonSprite_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._SkeletonSprite_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._SkeletonSprite_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._SkeletonSprite_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._SkeletonSprite_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._SkeletonSprite_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._SkeletonSprite_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._SkeletonSprite_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._SkeletonSprite_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._SkeletonSprite_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._SkeletonSprite_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._SkeletonSprite_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._SkeletonSprite_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._SkeletonSprite_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._SkeletonSprite_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._SkeletonSprite_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._SkeletonSprite_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._SkeletonSprite_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._SkeletonSprite_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._SkeletonSprite_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._SkeletonSprite_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._SkeletonSprite_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._SkeletonSprite_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._SkeletonSprite_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._SkeletonSprite_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._SkeletonSprite_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._SkeletonSprite_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._SkeletonSprite_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._SkeletonSprite_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._SkeletonSprite_activate(this.nativePtr);
	}

	deactivate() {
		Module._SkeletonSprite_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._SkeletonSprite_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Canvas {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Canvas_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._Canvas_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setCamera(camera) {
		Module._Canvas_setCamera(this.nativePtr, camera.nativePtr);
	}

	setEnableAutoScaleContent(flag, designedSize) {
		var pbdesignedSize = PBBKSizeF.create();
		pbdesignedSize.width = designedSize.width;
		pbdesignedSize.height = designedSize.height;
		const designedSizeBuffer = PBBKSizeF.buffer(pbdesignedSize);
		Module._Canvas_setEnableAutoScaleContent(this.nativePtr, flag, designedSizeBuffer);
		PBBKSizeF.freeBuffer(designedSizeBuffer);
	}

	disableAutoBatch() {
		Module._Canvas_disableAutoBatch(this.nativePtr);
	}

	enableAutoBatch() {
		Module._Canvas_enableAutoBatch(this.nativePtr);
	}

	calculateStringSize(str, fontPath, emojiFontPath, fontSize, enableBold, outlineSize, useGlowEffect) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._Canvas_calculateStringSize(this.nativePtr, strBuffer, fontPathBuffer, emojiFontPathBuffer, fontSize, enableBold, outlineSize, useGlowEffect, PBBKSizeF.nativeBuffer);
		Module._free(strBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	createAtlas(width, height) {
		var __result = Module._Canvas_createAtlas(this.nativePtr, width, height);
		return __result;
	}

	releaseAtlas(atlasId) {
		Module._Canvas_releaseAtlas(this.nativePtr, atlasId);
	}

	getCurrentAtlas() {
		var __result = Module._Canvas_getCurrentAtlas(this.nativePtr);
		return __result;
	}

	addImageToAtlas(atlasId, filePath, capInsets) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		var __result = Module._Canvas_addImageToAtlas(this.nativePtr, atlasId, filePathBuffer, capInsetsBuffer);
		Module._free(filePathBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
		return __result;
	}

	addCanvasImageToAtlas(atlasId, canvasImage, name, capInsets) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		var __result = Module._Canvas_addCanvasImageToAtlas(this.nativePtr, atlasId, canvasImage.nativePtr, nameBuffer, capInsetsBuffer);
		Module._free(nameBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
		return __result;
	}

	setScaleX(scaleX) {
		Module._Canvas_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Canvas_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Canvas_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Canvas_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Canvas_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Canvas_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Canvas_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Canvas_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Canvas_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Canvas_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Canvas_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Canvas_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Canvas_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Canvas_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Canvas_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Canvas_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Canvas_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Canvas_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Canvas_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Canvas_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Canvas_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Canvas_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Canvas_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Canvas_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Canvas_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Canvas_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Canvas_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Canvas_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Canvas_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Canvas_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Canvas_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Canvas_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Canvas_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Canvas_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Canvas_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Canvas_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Canvas_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Canvas_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Canvas_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Canvas_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Canvas_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Canvas_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Canvas_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Canvas_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Canvas_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Canvas_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Canvas_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Canvas_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Canvas_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Canvas_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Canvas_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Canvas_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Canvas_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Canvas_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Canvas_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Canvas_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Canvas_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Canvas_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Canvas_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Canvas_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Canvas_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Canvas_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Canvas_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Canvas_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Canvas_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Canvas_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Canvas_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Canvas_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Canvas_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Canvas_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Canvas_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Canvas_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Canvas_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Canvas_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Canvas_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Canvas_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Canvas_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Canvas_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Canvas_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Canvas_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Canvas_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Canvas_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Canvas_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Canvas_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Canvas_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Canvas_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Canvas_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Canvas_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Canvas_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Canvas_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Canvas_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Canvas_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Canvas_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Canvas_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Canvas_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Canvas_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Canvas_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Canvas_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Canvas_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Canvas_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Canvas_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Canvas_activate(this.nativePtr);
	}

	deactivate() {
		Module._Canvas_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Canvas_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIButton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIButton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(title) {
		const titleBuffer = Module._malloc(title.length+1);
		Module.stringToUTF8(title, titleBuffer, title.length+1);
		var __result = Module._UIButton_create(titleBuffer);
		Module._free(titleBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIButton(__result);
		}
	}

	setEnableAutoAdjustContentSize(flag) {
		Module._UIButton_setEnableAutoAdjustContentSize(this.nativePtr, flag);
	}

	isEnableAutoAdjustContentSize() {
		var __result = Module._UIButton_isEnableAutoAdjustContentSize(this.nativePtr);
		return __result;
	}

	isImagesScale9RenderEnabled() {
		var __result = Module._UIButton_isImagesScale9RenderEnabled(this.nativePtr);
		return __result;
	}

	setEnableImagesScale9Render(flag) {
		Module._UIButton_setEnableImagesScale9Render(this.nativePtr, flag);
	}

	setNormalImage(normalImagePath) {
		const normalImagePathBuffer = Module._malloc(normalImagePath.length+1);
		Module.stringToUTF8(normalImagePath, normalImagePathBuffer, normalImagePath.length+1);
		Module._UIButton_setNormalImage(this.nativePtr, normalImagePathBuffer);
		Module._free(normalImagePathBuffer);
	}

	getNormalImage() {
		var __result = Module._UIButton_getNormalImage(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setNormalImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UIButton_setNormalImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getNormalImageCapInsets() {
		Module._UIButton_getNormalImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setPressedImage(pressedImagePath) {
		const pressedImagePathBuffer = Module._malloc(pressedImagePath.length+1);
		Module.stringToUTF8(pressedImagePath, pressedImagePathBuffer, pressedImagePath.length+1);
		Module._UIButton_setPressedImage(this.nativePtr, pressedImagePathBuffer);
		Module._free(pressedImagePathBuffer);
	}

	getPressedImage() {
		var __result = Module._UIButton_getPressedImage(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setPressedImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UIButton_setPressedImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getPressedImageCapInsets() {
		Module._UIButton_getPressedImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setDisabledImage(disabledImagePath) {
		const disabledImagePathBuffer = Module._malloc(disabledImagePath.length+1);
		Module.stringToUTF8(disabledImagePath, disabledImagePathBuffer, disabledImagePath.length+1);
		Module._UIButton_setDisabledImage(this.nativePtr, disabledImagePathBuffer);
		Module._free(disabledImagePathBuffer);
	}

	getDisabledImage() {
		var __result = Module._UIButton_getDisabledImage(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setDisabledImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UIButton_setDisabledImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getDisabledImageCapInsets() {
		Module._UIButton_getDisabledImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UIButton_setCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	setTitle(title) {
		const titleBuffer = Module._malloc(title.length+1);
		Module.stringToUTF8(title, titleBuffer, title.length+1);
		Module._UIButton_setTitle(this.nativePtr, titleBuffer);
		Module._free(titleBuffer);
	}

	getTitle() {
		var __result = Module._UIButton_getTitle(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleFontSize(size) {
		Module._UIButton_setTitleFontSize(this.nativePtr, size);
	}

	getTitleFontSize() {
		var __result = Module._UIButton_getTitleFontSize(this.nativePtr);
		return __result;
	}

	setTitleColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIButton_setTitleColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleColor() {
		Module._UIButton_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleDisableColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIButton_setTitleDisableColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleDisableColor() {
		Module._UIButton_getTitleDisableColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleFont(fontPath, emojiFontPath) {
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._UIButton_setTitleFont(this.nativePtr, fontPathBuffer, emojiFontPathBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
	}

	getTitleFontSource() {
		var __result = Module._UIButton_getTitleFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getTitleEmojiFontSource() {
		var __result = Module._UIButton_getTitleEmojiFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleAlignment(horizontalAlignment, verticalAlignment) {
		Module._UIButton_setTitleAlignment(this.nativePtr, horizontalAlignment, verticalAlignment);
	}

	getTitleHorizontalAlignment() {
		var __result = Module._UIButton_getTitleHorizontalAlignment(this.nativePtr);
		return __result;
	}

	getTitleVerticalAlignment() {
		var __result = Module._UIButton_getTitleVerticalAlignment(this.nativePtr);
		return __result;
	}

	clone() {
		var __result = Module._UIButton_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIButton_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIButton_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIButton_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIButton_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIButton_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIButton_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIButton_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIButton_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIButton_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIButton_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIButton_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIButton_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIButton_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIButton_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIButton_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIButton_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIButton_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIButton_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIButton_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIButton_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIButton_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIButton_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIButton_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIButton_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIButton_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIButton_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIButton_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIButton_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIButton_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIButton_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIButton_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIButton_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIButton_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIButton_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIButton_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIButton_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIButton_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIButton_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIButton_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIButton_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIButton_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIButton_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIButton_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIButton_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIButton_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIButton_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIButton_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIButton_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIButton_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIButton_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIButton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIButton_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIButton_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIButton_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIButton_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIButton_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIButton_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIButton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIButton_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIButton_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIButton_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIButton_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIButton_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIButton_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIButton_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIButton_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIButton_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIButton_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIButton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIButton_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIButton_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIButton_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIButton_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIButton_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIButton_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIButton_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIButton_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIButton_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIButton_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIButton_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIButton_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIButton_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIButton_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIButton_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIButton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIButton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIButton_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIButton_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIButton_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIButton_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIButton_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIButton_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIButton_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIButton_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIButton_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIButton_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIButton_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIButton_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIButton_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIButton_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIButton_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIButton_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIButton_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIButton_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIButton_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIButton_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIButton_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIButton_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIButton_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIButton_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIButton_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIButton_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIButton_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIButton_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIButton_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIButton_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIButton_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIButton_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIButton_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIButton_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIButton_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIButton_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIButton_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIButton_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIButton_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIButton_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIButton_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIButton_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIButton_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIButton_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIButton_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIButton_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIButton_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIButton_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIButton_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIButton_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIButton_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIButton_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIButton_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIButton_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIButton_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIButton_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIButton_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIButton_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIButton_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIButton_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIButton_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIButton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIButton_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIButton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIButton_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIButton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIButton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UICheckBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UICheckBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(title) {
		const titleBuffer = Module._malloc(title.length+1);
		Module.stringToUTF8(title, titleBuffer, title.length+1);
		var __result = Module._UICheckBox_create(titleBuffer);
		Module._free(titleBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UICheckBox(__result);
		}
	}

	setSelectedStatusChangedListener(listener) {
		let listenerFunc = CustomCallback_5735589223114756a5d6e84a179726ab_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UICheckBox_setSelectedStatusChangedListener(this.nativePtr, listenerPtr);
	}

	clearSelectedStatusChangedListeners() {
		Module._UICheckBox_clearSelectedStatusChangedListeners(this.nativePtr);
	}

	setImagesSource(normalImage, selectedImage, normalPressedImage, selectedPressedImage, normalDisableImage, selectedDisableImage) {
		const normalImageBuffer = Module._malloc(normalImage.length+1);
		Module.stringToUTF8(normalImage, normalImageBuffer, normalImage.length+1);
		const selectedImageBuffer = Module._malloc(selectedImage.length+1);
		Module.stringToUTF8(selectedImage, selectedImageBuffer, selectedImage.length+1);
		const normalPressedImageBuffer = Module._malloc(normalPressedImage.length+1);
		Module.stringToUTF8(normalPressedImage, normalPressedImageBuffer, normalPressedImage.length+1);
		const selectedPressedImageBuffer = Module._malloc(selectedPressedImage.length+1);
		Module.stringToUTF8(selectedPressedImage, selectedPressedImageBuffer, selectedPressedImage.length+1);
		const normalDisableImageBuffer = Module._malloc(normalDisableImage.length+1);
		Module.stringToUTF8(normalDisableImage, normalDisableImageBuffer, normalDisableImage.length+1);
		const selectedDisableImageBuffer = Module._malloc(selectedDisableImage.length+1);
		Module.stringToUTF8(selectedDisableImage, selectedDisableImageBuffer, selectedDisableImage.length+1);
		Module._UICheckBox_setImagesSource(this.nativePtr, normalImageBuffer, selectedImageBuffer, normalPressedImageBuffer, selectedPressedImageBuffer, normalDisableImageBuffer, selectedDisableImageBuffer);
		Module._free(normalImageBuffer);
		Module._free(selectedImageBuffer);
		Module._free(normalPressedImageBuffer);
		Module._free(selectedPressedImageBuffer);
		Module._free(normalDisableImageBuffer);
		Module._free(selectedDisableImageBuffer);
	}

	setTitle(titleString) {
		const titleStringBuffer = Module._malloc(titleString.length+1);
		Module.stringToUTF8(titleString, titleStringBuffer, titleString.length+1);
		Module._UICheckBox_setTitle(this.nativePtr, titleStringBuffer);
		Module._free(titleStringBuffer);
	}

	getTitle() {
		var __result = Module._UICheckBox_getTitle(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleFont(fontPath, emojiFontPath) {
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._UICheckBox_setTitleFont(this.nativePtr, fontPathBuffer, emojiFontPathBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
	}

	getTitleFontSource() {
		var __result = Module._UICheckBox_getTitleFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getTitleEmojiFontSource() {
		var __result = Module._UICheckBox_getTitleEmojiFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UICheckBox_setTitleColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleColor() {
		Module._UICheckBox_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleDisableColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UICheckBox_setTitleDisableColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleDisableColor() {
		Module._UICheckBox_getTitleDisableColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setSelectedStatus(flag, notifyEvent) {
		Module._UICheckBox_setSelectedStatus(this.nativePtr, flag, notifyEvent);
	}

	isSelected() {
		var __result = Module._UICheckBox_isSelected(this.nativePtr);
		return __result;
	}

	setMinSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UICheckBox_setMinSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getMinSize() {
		Module._UICheckBox_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPadding(left, top, right, bottom) {
		Module._UICheckBox_setPadding(this.nativePtr, left, top, right, bottom);
	}

	setLeftPadding(val) {
		Module._UICheckBox_setLeftPadding(this.nativePtr, val);
	}

	getLeftPadding() {
		var __result = Module._UICheckBox_getLeftPadding(this.nativePtr);
		return __result;
	}

	setTopPadding(val) {
		Module._UICheckBox_setTopPadding(this.nativePtr, val);
	}

	getTopPadding() {
		var __result = Module._UICheckBox_getTopPadding(this.nativePtr);
		return __result;
	}

	setRightPadding(val) {
		Module._UICheckBox_setRightPadding(this.nativePtr, val);
	}

	setBottomPadding(val) {
		Module._UICheckBox_setBottomPadding(this.nativePtr, val);
	}

	getBottomPadding() {
		var __result = Module._UICheckBox_getBottomPadding(this.nativePtr);
		return __result;
	}

	setDirection(direction) {
		Module._UICheckBox_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._UICheckBox_getDirection(this.nativePtr);
		return __result;
	}

	addUIElementWithLayoutParameter(child, gravity, margin) {
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UICheckBox_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, gravity, marginBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementGravity(child, gravity) {
		Module._UICheckBox_setUIElementGravity(this.nativePtr, child.nativePtr, gravity);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UICheckBox_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UICheckBox_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UICheckBox_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UICheckBox_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UICheckBox_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UICheckBox_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UICheckBox_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UICheckBox_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UICheckBox_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UICheckBox_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UICheckBox_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UICheckBox_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UICheckBox_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UICheckBox_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UICheckBox_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UICheckBox_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UICheckBox_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UICheckBox_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UICheckBox_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UICheckBox_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UICheckBox_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UICheckBox_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UICheckBox_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UICheckBox_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UICheckBox_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UICheckBox_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UICheckBox_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UICheckBox_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UICheckBox_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UICheckBox_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UICheckBox_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UICheckBox_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UICheckBox_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UICheckBox_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UICheckBox_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UICheckBox_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UICheckBox_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UICheckBox_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UICheckBox_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UICheckBox_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UICheckBox_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UICheckBox_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UICheckBox_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UICheckBox_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UICheckBox_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UICheckBox_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UICheckBox_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UICheckBox_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UICheckBox_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UICheckBox_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UICheckBox_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UICheckBox_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UICheckBox_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UICheckBox_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UICheckBox_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UICheckBox_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UICheckBox_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UICheckBox_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UICheckBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UICheckBox_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UICheckBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UICheckBox_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UICheckBox_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UICheckBox_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UICheckBox_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UICheckBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UICheckBox_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UICheckBox_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UICheckBox_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UICheckBox_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UICheckBox_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UICheckBox_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UICheckBox_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UICheckBox_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UICheckBox_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UICheckBox_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UICheckBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UICheckBox_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UICheckBox_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UICheckBox_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UICheckBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UICheckBox_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UICheckBox_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UICheckBox_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UICheckBox_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UICheckBox_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UICheckBox_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UICheckBox_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UICheckBox_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UICheckBox_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UICheckBox_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UICheckBox_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UICheckBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UICheckBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UICheckBox_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UICheckBox_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UICheckBox_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UICheckBox_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UICheckBox_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UICheckBox_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UICheckBox_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UICheckBox_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UICheckBox_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UICheckBox_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UICheckBox_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UICheckBox_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UICheckBox_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UICheckBox_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UICheckBox_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UICheckBox_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UICheckBox_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UICheckBox_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UICheckBox_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UICheckBox_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UICheckBox_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UICheckBox_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UICheckBox_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UICheckBox_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UICheckBox_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UICheckBox_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UICheckBox_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UICheckBox_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UICheckBox_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UICheckBox_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UICheckBox_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UICheckBox_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UICheckBox_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UICheckBox_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UICheckBox_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UICheckBox_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UICheckBox_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UICheckBox_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UICheckBox_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UICheckBox_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UICheckBox_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UICheckBox_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UICheckBox_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UICheckBox_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UICheckBox_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UICheckBox_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UICheckBox_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UICheckBox_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UICheckBox_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UICheckBox_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UICheckBox_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UICheckBox_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UICheckBox_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UICheckBox_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UICheckBox_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UICheckBox_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UICheckBox_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UICheckBox_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UICheckBox_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UICheckBox_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UICheckBox_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UICheckBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UICheckBox_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UICheckBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UICheckBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._UICheckBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UICheckBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UICombo {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UICombo_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UICombo_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UICombo(__result);
		}
	}

	setItems(items) {
		Module._UICombo_setItems(this.nativePtr, items);
	}

	selectedItemByIndex(index) {
		Module._UICombo_selectedItemByIndex(this.nativePtr, index);
	}

	getCurrentSelectedItemIndex() {
		var __result = Module._UICombo_getCurrentSelectedItemIndex(this.nativePtr);
		return __result;
	}

	setItemSelectedListener(listener) {
		let listenerFunc = CustomCallback_7fbb5eccf4558f42da151688f94e4c24_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UICombo_setItemSelectedListener(this.nativePtr, listenerPtr);
	}

	clearItemSelectedListeners() {
		Module._UICombo_clearItemSelectedListeners(this.nativePtr);
	}

	setTextFont(fontPath, emojiFontPath) {
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._UICombo_setTextFont(this.nativePtr, fontPathBuffer, emojiFontPathBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
	}

	getTextFontSource() {
		var __result = Module._UICombo_getTextFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getTextEmojiFontSource() {
		var __result = Module._UICombo_getTextEmojiFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTextAlignment(hAlign, vAlign) {
		Module._UICombo_setTextAlignment(this.nativePtr, hAlign, vAlign);
	}

	getTextHorizontalAlignment() {
		var __result = Module._UICombo_getTextHorizontalAlignment(this.nativePtr);
		return __result;
	}

	getTextVerticalAlignment() {
		var __result = Module._UICombo_getTextVerticalAlignment(this.nativePtr);
		return __result;
	}

	setTextColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UICombo_setTextColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getTextColor() {
		Module._UICombo_getTextColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setTextMaxWidth(width) {
		Module._UICombo_setTextMaxWidth(this.nativePtr, width);
	}

	getTextMaxWidth() {
		var __result = Module._UICombo_getTextMaxWidth(this.nativePtr);
		return __result;
	}

	setTextFontSize(fontSize) {
		Module._UICombo_setTextFontSize(this.nativePtr, fontSize);
	}

	getTextFontSize() {
		var __result = Module._UICombo_getTextFontSize(this.nativePtr);
		return __result;
	}

	setDropdownIconColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UICombo_setDropdownIconColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getDropdownIconColor() {
		Module._UICombo_getDropdownIconColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setBackgroundColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UICombo_setBackgroundColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getBackgroundColor() {
		Module._UICombo_getBackgroundColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setHighlightBackgroundColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UICombo_setHighlightBackgroundColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getHighlightBackgroundColor() {
		Module._UICombo_getHighlightBackgroundColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setHighlightBorderColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UICombo_setHighlightBorderColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getHighlightBorderColor() {
		Module._UICombo_getHighlightBorderColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setHighlightBorderWidth(width) {
		Module._UICombo_setHighlightBorderWidth(this.nativePtr, width);
	}

	getHighlightBorderWidth() {
		var __result = Module._UICombo_getHighlightBorderWidth(this.nativePtr);
		return __result;
	}

	setMinSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UICombo_setMinSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getMinSize() {
		Module._UICombo_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPadding(left, top, right, bottom) {
		Module._UICombo_setPadding(this.nativePtr, left, top, right, bottom);
	}

	setLeftPadding(val) {
		Module._UICombo_setLeftPadding(this.nativePtr, val);
	}

	getLeftPadding() {
		var __result = Module._UICombo_getLeftPadding(this.nativePtr);
		return __result;
	}

	setTopPadding(val) {
		Module._UICombo_setTopPadding(this.nativePtr, val);
	}

	getTopPadding() {
		var __result = Module._UICombo_getTopPadding(this.nativePtr);
		return __result;
	}

	setRightPadding(val) {
		Module._UICombo_setRightPadding(this.nativePtr, val);
	}

	setBottomPadding(val) {
		Module._UICombo_setBottomPadding(this.nativePtr, val);
	}

	getBottomPadding() {
		var __result = Module._UICombo_getBottomPadding(this.nativePtr);
		return __result;
	}

	setDirection(direction) {
		Module._UICombo_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._UICombo_getDirection(this.nativePtr);
		return __result;
	}

	addUIElementWithLayoutParameter(child, gravity, margin) {
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UICombo_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, gravity, marginBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementGravity(child, gravity) {
		Module._UICombo_setUIElementGravity(this.nativePtr, child.nativePtr, gravity);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UICombo_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UICombo_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UICombo_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UICombo_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UICombo_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UICombo_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UICombo_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UICombo_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UICombo_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UICombo_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UICombo_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UICombo_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UICombo_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UICombo_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UICombo_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UICombo_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UICombo_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UICombo_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UICombo_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UICombo_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UICombo_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UICombo_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UICombo_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UICombo_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UICombo_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UICombo_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UICombo_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UICombo_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UICombo_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UICombo_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UICombo_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UICombo_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UICombo_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UICombo_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UICombo_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UICombo_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UICombo_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UICombo_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UICombo_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UICombo_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UICombo_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UICombo_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UICombo_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UICombo_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UICombo_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UICombo_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UICombo_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UICombo_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UICombo_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UICombo_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UICombo_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UICombo_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UICombo_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UICombo_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UICombo_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UICombo_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UICombo_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UICombo_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UICombo_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UICombo_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UICombo_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UICombo_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UICombo_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UICombo_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UICombo_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UICombo_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UICombo_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UICombo_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UICombo_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UICombo_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UICombo_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UICombo_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UICombo_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UICombo_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UICombo_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UICombo_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UICombo_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UICombo_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UICombo_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UICombo_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UICombo_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UICombo_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UICombo_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UICombo_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UICombo_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UICombo_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UICombo_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UICombo_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UICombo_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UICombo_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UICombo_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UICombo_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UICombo_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UICombo_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UICombo_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UICombo_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UICombo_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UICombo_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UICombo_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UICombo_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UICombo_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UICombo_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UICombo_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UICombo_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UICombo_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UICombo_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UICombo_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UICombo_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UICombo_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UICombo_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UICombo_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UICombo_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UICombo_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UICombo_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UICombo_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UICombo_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UICombo_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UICombo_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UICombo_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UICombo_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UICombo_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UICombo_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UICombo_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UICombo_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UICombo_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UICombo_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UICombo_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UICombo_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UICombo_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UICombo_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UICombo_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UICombo_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UICombo_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UICombo_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UICombo_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UICombo_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UICombo_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UICombo_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UICombo_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UICombo_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UICombo_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UICombo_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UICombo_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UICombo_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UICombo_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UICombo_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UICombo_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UICombo_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UICombo_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UICombo_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UICombo_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UICombo_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UICombo_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UICombo_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UICombo_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UICombo_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UICombo_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UICombo_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UICombo_activate(this.nativePtr);
	}

	deactivate() {
		Module._UICombo_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UICombo_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIElement {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIElement_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIElement_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	clone() {
		var __result = Module._UIElement_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIElement_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIElement_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIElement_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIElement_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIElement_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIElement_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIElement_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIElement_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIElement_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIElement_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIElement_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIElement_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIElement_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIElement_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIElement_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIElement_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIElement_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIElement_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIElement_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIElement_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIElement_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIElement_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIElement_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIElement_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIElement_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIElement_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIElement_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIElement_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIElement_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIElement_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIElement_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIElement_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIElement_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIElement_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIElement_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIElement_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIElement_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIElement_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIElement_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIElement_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIElement_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIElement_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIElement_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIElement_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIElement_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIElement_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIElement_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIElement_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIElement_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIElement_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIElement_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIElement_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIElement_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIElement_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIElement_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIElement_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIElement_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIElement_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIElement_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIElement_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIElement_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIElement_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIElement_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIElement_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIElement_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIElement_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIElement_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIElement_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIElement_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIElement_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIElement_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIElement_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIElement_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIElement_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIElement_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIElement_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIElement_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIElement_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIElement_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIElement_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIElement_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIElement_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIElement_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIElement_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIElement_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIElement_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIElement_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIElement_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIElement_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIElement_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIElement_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIElement_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIElement_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIElement_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIElement_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIElement_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIElement_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIElement_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIElement_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIElement_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIElement_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIElement_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIElement_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIElement_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIElement_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIElement_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIElement_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIElement_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIElement_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIElement_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIElement_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIElement_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIElement_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIElement_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIElement_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIElement_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIElement_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIElement_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIElement_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIElement_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIElement_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIElement_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIElement_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIElement_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIElement_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIElement_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIElement_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIElement_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIElement_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIElement_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIElement_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIElement_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIElement_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIElement_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIElement_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIElement_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIElement_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIElement_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIElement_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIElement_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIElement_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIElement_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIElement_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIElement_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIElement_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIElement_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIElement_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIElement_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIElement_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIElement_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIElement_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIElement_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIElement_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIImage {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIImage_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createWithSpriteFrame(frame) {
		var __result = Module._UIImage_createWithSpriteFrame(frame.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIImage(__result);
		}
	}

	static create(imageFile, fixedSize) {
		const imageFileBuffer = Module._malloc(imageFile.length+1);
		Module.stringToUTF8(imageFile, imageFileBuffer, imageFile.length+1);
		var pbfixedSize = PBBKSizeF.create();
		pbfixedSize.width = fixedSize.width;
		pbfixedSize.height = fixedSize.height;
		const fixedSizeBuffer = PBBKSizeF.buffer(pbfixedSize);
		var __result = Module._UIImage_create(imageFileBuffer, fixedSizeBuffer);
		Module._free(imageFileBuffer);
		PBBKSizeF.freeBuffer(fixedSizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIImage(__result);
		}
	}

	getRenderMode() {
		var __result = Module._UIImage_getRenderMode(this.nativePtr);
		return __result;
	}

	setRenderMode(mode) {
		Module._UIImage_setRenderMode(this.nativePtr, mode);
	}

	setPartialFillPercent(percent) {
		Module._UIImage_setPartialFillPercent(this.nativePtr, percent);
	}

	getPartialFillPercent() {
		var __result = Module._UIImage_getPartialFillPercent(this.nativePtr);
		return __result;
	}

	setPartialFillOrigin(origin) {
		Module._UIImage_setPartialFillOrigin(this.nativePtr, origin);
	}

	getPartialFillOrigin() {
		var __result = Module._UIImage_getPartialFillOrigin(this.nativePtr);
		return __result;
	}

	setPartialFillClockwise(clockwise) {
		Module._UIImage_setPartialFillClockwise(this.nativePtr, clockwise);
	}

	isPartialFillClockwise() {
		var __result = Module._UIImage_isPartialFillClockwise(this.nativePtr);
		return __result;
	}

	setTextureFilterLinear(flag) {
		Module._UIImage_setTextureFilterLinear(this.nativePtr, flag);
	}

	isTextureFilterLinear() {
		var __result = Module._UIImage_isTextureFilterLinear(this.nativePtr);
		return __result;
	}

	setCapInsets(insets) {
		var pbinsets = PBBKRectF.create();
		pbinsets.left = insets.left;
		pbinsets.top = insets.top;
		pbinsets.width = insets.width;
		pbinsets.height = insets.height;
		const insetsBuffer = PBBKRectF.buffer(pbinsets);
		Module._UIImage_setCapInsets(this.nativePtr, insetsBuffer);
		PBBKRectF.freeBuffer(insetsBuffer);
	}

	getCapInsets() {
		Module._UIImage_getCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setImage(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._UIImage_setImage(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	setImageWithCircleClip(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._UIImage_setImageWithCircleClip(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	setImageWithRoundCornersClip(imagePath, lt, rt, rb, lb) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._UIImage_setImageWithRoundCornersClip(this.nativePtr, imagePathBuffer, lt, rt, rb, lb);
		Module._free(imagePathBuffer);
	}

	setImageWithMaskClip(imagePath, maskImagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		const maskImagePathBuffer = Module._malloc(maskImagePath.length+1);
		Module.stringToUTF8(maskImagePath, maskImagePathBuffer, maskImagePath.length+1);
		Module._UIImage_setImageWithMaskClip(this.nativePtr, imagePathBuffer, maskImagePathBuffer);
		Module._free(imagePathBuffer);
		Module._free(maskImagePathBuffer);
	}

	getImagePath() {
		var __result = Module._UIImage_getImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getMaskImagePath() {
		var __result = Module._UIImage_getMaskImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setSpriteFrame(spriteFrame) {
		Module._UIImage_setSpriteFrame(this.nativePtr, spriteFrame.nativePtr);
	}

	getOriginImageSize() {
		Module._UIImage_getOriginImageSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setIsPreCalculateAlphaColor(flag) {
		Module._UIImage_setIsPreCalculateAlphaColor(this.nativePtr, flag);
	}

	isPreCalculateAlphaColor() {
		var __result = Module._UIImage_isPreCalculateAlphaColor(this.nativePtr);
		return __result;
	}

	setExternalProgram(name, vertexShaderPath, fragmentShaderPath) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		const vertexShaderPathBuffer = Module._malloc(vertexShaderPath.length+1);
		Module.stringToUTF8(vertexShaderPath, vertexShaderPathBuffer, vertexShaderPath.length+1);
		const fragmentShaderPathBuffer = Module._malloc(fragmentShaderPath.length+1);
		Module.stringToUTF8(fragmentShaderPath, fragmentShaderPathBuffer, fragmentShaderPath.length+1);
		Module._UIImage_setExternalProgram(this.nativePtr, nameBuffer, vertexShaderPathBuffer, fragmentShaderPathBuffer);
		Module._free(nameBuffer);
		Module._free(vertexShaderPathBuffer);
		Module._free(fragmentShaderPathBuffer);
	}

	resetProgram() {
		Module._UIImage_resetProgram(this.nativePtr);
	}

	clearAdditionalUniforms() {
		Module._UIImage_clearAdditionalUniforms(this.nativePtr);
	}

	setGrayed(flag) {
		Module._UIImage_setGrayed(this.nativePtr, flag);
	}

	isGrayed() {
		var __result = Module._UIImage_isGrayed(this.nativePtr);
		return __result;
	}

	clone() {
		var __result = Module._UIImage_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIImage_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIImage_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIImage_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIImage_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIImage_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIImage_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIImage_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIImage_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIImage_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIImage_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIImage_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIImage_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIImage_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIImage_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIImage_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIImage_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIImage_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIImage_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIImage_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIImage_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIImage_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIImage_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIImage_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIImage_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIImage_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIImage_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIImage_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIImage_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIImage_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIImage_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIImage_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIImage_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIImage_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIImage_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIImage_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIImage_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIImage_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIImage_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIImage_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIImage_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIImage_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIImage_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIImage_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIImage_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIImage_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIImage_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIImage_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIImage_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIImage_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIImage_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIImage_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIImage_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIImage_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIImage_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIImage_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIImage_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIImage_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIImage_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIImage_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIImage_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIImage_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIImage_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIImage_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIImage_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIImage_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIImage_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIImage_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIImage_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIImage_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIImage_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIImage_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIImage_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIImage_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIImage_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIImage_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIImage_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIImage_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIImage_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIImage_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIImage_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIImage_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIImage_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIImage_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIImage_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIImage_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIImage_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIImage_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIImage_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIImage_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIImage_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIImage_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIImage_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIImage_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIImage_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIImage_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIImage_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIImage_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIImage_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIImage_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIImage_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIImage_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIImage_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIImage_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIImage_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIImage_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIImage_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIImage_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIImage_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIImage_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIImage_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIImage_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIImage_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIImage_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIImage_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIImage_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIImage_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIImage_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIImage_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIImage_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIImage_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIImage_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIImage_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIImage_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIImage_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIImage_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIImage_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIImage_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIImage_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIImage_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIImage_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIImage_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIImage_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIImage_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIImage_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIImage_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIImage_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIImage_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIImage_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIImage_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIImage_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIImage_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIImage_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIImage_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIImage_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIImage_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIImage_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIImage_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIImage_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIImage_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIImage_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIImage_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIImage_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIImage_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UILabel {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UILabel_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UILabel_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UILabel(__result);
		}
	}

	setLabelSize(width, height) {
		Module._UILabel_setLabelSize(this.nativePtr, width, height);
	}

	getDesiredLabelSize() {
		Module._UILabel_getDesiredLabelSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setMaxLineWidth(width) {
		Module._UILabel_setMaxLineWidth(this.nativePtr, width);
	}

	getMaxLineWidth() {
		var __result = Module._UILabel_getMaxLineWidth(this.nativePtr);
		return __result;
	}

	setMaxLines(lines) {
		Module._UILabel_setMaxLines(this.nativePtr, lines);
	}

	getMaxLines() {
		var __result = Module._UILabel_getMaxLines(this.nativePtr);
		return __result;
	}

	setOverflow(overflow) {
		Module._UILabel_setOverflow(this.nativePtr, overflow);
	}

	getOverflow() {
		var __result = Module._UILabel_getOverflow(this.nativePtr);
		return __result;
	}

	setLineSpacing(lineSpacing) {
		Module._UILabel_setLineSpacing(this.nativePtr, lineSpacing);
	}

	getLineSpacing() {
		var __result = Module._UILabel_getLineSpacing(this.nativePtr);
		return __result;
	}

	setAdditionalKerning(additionalKerning) {
		Module._UILabel_setAdditionalKerning(this.nativePtr, additionalKerning);
	}

	getAdditionalKerning() {
		var __result = Module._UILabel_getAdditionalKerning(this.nativePtr);
		return __result;
	}

	setTextAlignment(horizontalAlign, verticalAlign) {
		Module._UILabel_setTextAlignment(this.nativePtr, horizontalAlign, verticalAlign);
	}

	getTextHorizontalAlignment() {
		var __result = Module._UILabel_getTextHorizontalAlignment(this.nativePtr);
		return __result;
	}

	getTextVerticalAlignment() {
		var __result = Module._UILabel_getTextVerticalAlignment(this.nativePtr);
		return __result;
	}

	setEnableWrap(flag) {
		Module._UILabel_setEnableWrap(this.nativePtr, flag);
	}

	isEnableWrap() {
		var __result = Module._UILabel_isEnableWrap(this.nativePtr);
		return __result;
	}

	setTTFFontSource(filePath) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		Module._UILabel_setTTFFontSource(this.nativePtr, filePathBuffer);
		Module._free(filePathBuffer);
	}

	getTTFFontSource() {
		var __result = Module._UILabel_getTTFFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setBMFontSource(filePath) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		Module._UILabel_setBMFontSource(this.nativePtr, filePathBuffer);
		Module._free(filePathBuffer);
	}

	getBMFontSource() {
		var __result = Module._UILabel_getBMFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setEmojiFontSource(filePath) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		Module._UILabel_setEmojiFontSource(this.nativePtr, filePathBuffer);
		Module._free(filePathBuffer);
	}

	getEmojiFontSource() {
		var __result = Module._UILabel_getEmojiFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setFontSize(size) {
		Module._UILabel_setFontSize(this.nativePtr, size);
	}

	getFontSize() {
		var __result = Module._UILabel_getFontSize(this.nativePtr);
		return __result;
	}

	setString(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		Module._UILabel_setString(this.nativePtr, strBuffer);
		Module._free(strBuffer);
	}

	getString() {
		var __result = Module._UILabel_getString(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setEnableEllipsis(flag, ellipsisText) {
		const ellipsisTextBuffer = Module._malloc(ellipsisText.length+1);
		Module.stringToUTF8(ellipsisText, ellipsisTextBuffer, ellipsisText.length+1);
		Module._UILabel_setEnableEllipsis(this.nativePtr, flag, ellipsisTextBuffer);
		Module._free(ellipsisTextBuffer);
	}

	isEnableEllipsis() {
		var __result = Module._UILabel_isEnableEllipsis(this.nativePtr);
		return __result;
	}

	getEllipsisText() {
		var __result = Module._UILabel_getEllipsisText(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	enableBold() {
		Module._UILabel_enableBold(this.nativePtr);
	}

	disableBold() {
		Module._UILabel_disableBold(this.nativePtr);
	}

	isEnableBold() {
		var __result = Module._UILabel_isEnableBold(this.nativePtr);
		return __result;
	}

	enableItalics() {
		Module._UILabel_enableItalics(this.nativePtr);
	}

	disableItalics() {
		Module._UILabel_disableItalics(this.nativePtr);
	}

	isEnableItalics() {
		var __result = Module._UILabel_isEnableItalics(this.nativePtr);
		return __result;
	}

	enableOutline(color, outlineSize) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UILabel_enableOutline(this.nativePtr, colorBuffer, outlineSize);
		PBColor4B.freeBuffer(colorBuffer);
	}

	disableOutline() {
		Module._UILabel_disableOutline(this.nativePtr);
	}

	isEnableOutline() {
		var __result = Module._UILabel_isEnableOutline(this.nativePtr);
		return __result;
	}

	getOutlineColor() {
		Module._UILabel_getOutlineColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getOutlineSize() {
		var __result = Module._UILabel_getOutlineSize(this.nativePtr);
		return __result;
	}

	enableShadow(color, offset) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var pboffset = PBVector2.create();
		pboffset.x = offset.x;
		pboffset.y = offset.y;
		const offsetBuffer = PBVector2.buffer(pboffset);
		Module._UILabel_enableShadow(this.nativePtr, colorBuffer, offsetBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		PBVector2.freeBuffer(offsetBuffer);
	}

	disableShadow() {
		Module._UILabel_disableShadow(this.nativePtr);
	}

	isEnableShadow() {
		var __result = Module._UILabel_isEnableShadow(this.nativePtr);
		return __result;
	}

	getShadowColor() {
		Module._UILabel_getShadowColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getShadowOffset() {
		Module._UILabel_getShadowOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	enableGlow(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UILabel_enableGlow(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	disableGlow() {
		Module._UILabel_disableGlow(this.nativePtr);
	}

	isEnableGlow() {
		var __result = Module._UILabel_isEnableGlow(this.nativePtr);
		return __result;
	}

	getGlowColor() {
		Module._UILabel_getGlowColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setGrayed(flag) {
		Module._UILabel_setGrayed(this.nativePtr, flag);
	}

	isGrayed() {
		var __result = Module._UILabel_isGrayed(this.nativePtr);
		return __result;
	}

	getTextDesiredHeight() {
		var __result = Module._UILabel_getTextDesiredHeight(this.nativePtr);
		return __result;
	}

	getNumberOfLines() {
		var __result = Module._UILabel_getNumberOfLines(this.nativePtr);
		return __result;
	}

	getLetterCount() {
		var __result = Module._UILabel_getLetterCount(this.nativePtr);
		return __result;
	}

	clone() {
		var __result = Module._UILabel_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UILabel_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UILabel_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UILabel_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UILabel_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UILabel_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UILabel_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UILabel_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UILabel_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UILabel_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILabel_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UILabel_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UILabel_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UILabel_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UILabel_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UILabel_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILabel_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UILabel_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UILabel_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UILabel_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UILabel_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UILabel_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UILabel_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UILabel_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UILabel_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UILabel_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UILabel_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UILabel_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UILabel_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UILabel_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UILabel_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UILabel_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UILabel_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UILabel_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UILabel_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UILabel_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UILabel_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UILabel_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UILabel_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UILabel_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UILabel_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UILabel_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UILabel_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UILabel_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UILabel_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UILabel_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UILabel_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UILabel_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UILabel_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UILabel_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UILabel_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UILabel_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UILabel_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UILabel_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UILabel_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UILabel_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UILabel_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UILabel_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UILabel_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UILabel_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UILabel_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UILabel_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UILabel_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UILabel_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UILabel_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UILabel_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UILabel_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UILabel_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UILabel_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UILabel_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UILabel_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UILabel_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UILabel_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UILabel_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UILabel_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UILabel_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UILabel_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UILabel_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UILabel_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UILabel_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UILabel_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UILabel_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UILabel_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UILabel_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UILabel_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UILabel_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UILabel_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UILabel_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UILabel_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UILabel_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UILabel_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UILabel_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UILabel_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UILabel_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UILabel_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UILabel_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UILabel_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UILabel_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UILabel_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UILabel_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UILabel_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UILabel_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UILabel_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UILabel_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UILabel_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UILabel_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UILabel_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UILabel_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UILabel_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UILabel_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UILabel_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UILabel_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UILabel_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UILabel_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UILabel_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UILabel_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UILabel_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UILabel_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UILabel_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILabel_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UILabel_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UILabel_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UILabel_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UILabel_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UILabel_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UILabel_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UILabel_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UILabel_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UILabel_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UILabel_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UILabel_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UILabel_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UILabel_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UILabel_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UILabel_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UILabel_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UILabel_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UILabel_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UILabel_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UILabel_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UILabel_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UILabel_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UILabel_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UILabel_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UILabel_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UILabel_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UILabel_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UILabel_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UILabel_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UILabel_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UILabel_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UILabel_activate(this.nativePtr);
	}

	deactivate() {
		Module._UILabel_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UILabel_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UILayer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UILayer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(color, fixedSize) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var pbfixedSize = PBBKSizeF.create();
		pbfixedSize.width = fixedSize.width;
		pbfixedSize.height = fixedSize.height;
		const fixedSizeBuffer = PBBKSizeF.buffer(pbfixedSize);
		var __result = Module._UILayer_create(colorBuffer, fixedSizeBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		PBBKSizeF.freeBuffer(fixedSizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UILayer(__result);
		}
	}

	static createWithGradientColor(startColor, endColor, alongVec, fixedSize) {
		var pbstartColor = PBColor4B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		pbstartColor.a = startColor.a;
		const startColorBuffer = PBColor4B.buffer(pbstartColor);
		var pbendColor = PBColor4B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		pbendColor.a = endColor.a;
		const endColorBuffer = PBColor4B.buffer(pbendColor);
		var pbalongVec = PBVector2.create();
		pbalongVec.x = alongVec.x;
		pbalongVec.y = alongVec.y;
		const alongVecBuffer = PBVector2.buffer(pbalongVec);
		var pbfixedSize = PBBKSizeF.create();
		pbfixedSize.width = fixedSize.width;
		pbfixedSize.height = fixedSize.height;
		const fixedSizeBuffer = PBBKSizeF.buffer(pbfixedSize);
		var __result = Module._UILayer_createWithGradientColor(startColorBuffer, endColorBuffer, alongVecBuffer, fixedSizeBuffer);
		PBColor4B.freeBuffer(startColorBuffer);
		PBColor4B.freeBuffer(endColorBuffer);
		PBVector2.freeBuffer(alongVecBuffer);
		PBBKSizeF.freeBuffer(fixedSizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UILayer(__result);
		}
	}

	setSolidColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UILayer_setSolidColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	setGradientColor(startColor, endColor, alongVec) {
		var pbstartColor = PBColor4B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		pbstartColor.a = startColor.a;
		const startColorBuffer = PBColor4B.buffer(pbstartColor);
		var pbendColor = PBColor4B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		pbendColor.a = endColor.a;
		const endColorBuffer = PBColor4B.buffer(pbendColor);
		var pbalongVec = PBVector2.create();
		pbalongVec.x = alongVec.x;
		pbalongVec.y = alongVec.y;
		const alongVecBuffer = PBVector2.buffer(pbalongVec);
		Module._UILayer_setGradientColor(this.nativePtr, startColorBuffer, endColorBuffer, alongVecBuffer);
		PBColor4B.freeBuffer(startColorBuffer);
		PBColor4B.freeBuffer(endColorBuffer);
		PBVector2.freeBuffer(alongVecBuffer);
	}

	getGradientStartColor() {
		Module._UILayer_getGradientStartColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getGradientEndColor() {
		Module._UILayer_getGradientEndColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getGradientAlongVec() {
		Module._UILayer_getGradientAlongVec(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getColorType() {
		var __result = Module._UILayer_getColorType(this.nativePtr);
		return __result;
	}

	setEnableBorder(color, borderWidth) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UILayer_setEnableBorder(this.nativePtr, colorBuffer, borderWidth);
		PBColor4B.freeBuffer(colorBuffer);
	}

	isEnableBorder() {
		var __result = Module._UILayer_isEnableBorder(this.nativePtr);
		return __result;
	}

	getBorderColor() {
		Module._UILayer_getBorderColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getBorderWidth() {
		var __result = Module._UILayer_getBorderWidth(this.nativePtr);
		return __result;
	}

	setEnableRoundedCorners(radius) {
		Module._UILayer_setEnableRoundedCorners(this.nativePtr, radius);
	}

	isEnableRoundedCorners() {
		var __result = Module._UILayer_isEnableRoundedCorners(this.nativePtr);
		return __result;
	}

	getRoundedCornersRadius() {
		var __result = Module._UILayer_getRoundedCornersRadius(this.nativePtr);
		return __result;
	}

	clone() {
		var __result = Module._UILayer_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UILayer_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UILayer_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UILayer_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UILayer_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UILayer_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UILayer_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UILayer_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UILayer_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UILayer_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILayer_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UILayer_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UILayer_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UILayer_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UILayer_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UILayer_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILayer_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UILayer_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UILayer_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UILayer_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UILayer_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UILayer_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UILayer_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UILayer_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UILayer_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UILayer_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UILayer_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UILayer_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UILayer_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UILayer_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UILayer_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UILayer_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UILayer_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UILayer_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UILayer_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UILayer_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UILayer_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UILayer_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UILayer_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UILayer_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UILayer_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UILayer_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UILayer_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UILayer_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UILayer_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UILayer_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UILayer_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UILayer_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UILayer_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UILayer_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UILayer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UILayer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UILayer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UILayer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UILayer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UILayer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UILayer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UILayer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UILayer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UILayer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UILayer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UILayer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UILayer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UILayer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UILayer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UILayer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UILayer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UILayer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UILayer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UILayer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UILayer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UILayer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UILayer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UILayer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UILayer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UILayer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UILayer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UILayer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UILayer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UILayer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UILayer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UILayer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UILayer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UILayer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UILayer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UILayer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UILayer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UILayer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UILayer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UILayer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UILayer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UILayer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UILayer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UILayer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UILayer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UILayer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UILayer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UILayer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UILayer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UILayer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UILayer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UILayer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UILayer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UILayer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UILayer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UILayer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UILayer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UILayer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UILayer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UILayer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UILayer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UILayer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UILayer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UILayer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UILayer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UILayer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UILayer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UILayer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UILayer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILayer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UILayer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UILayer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UILayer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UILayer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UILayer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UILayer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UILayer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UILayer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UILayer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UILayer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UILayer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UILayer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UILayer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UILayer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UILayer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UILayer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UILayer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UILayer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UILayer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UILayer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UILayer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UILayer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UILayer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UILayer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UILayer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UILayer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UILayer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UILayer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UILayer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UILayer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UILayer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UILayer_activate(this.nativePtr);
	}

	deactivate() {
		Module._UILayer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UILayer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIListView {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIListView_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UIListView_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIListView(__result);
		}
	}

	setListViewEventListener(listener) {
		let listenerFunc = CustomCallback_8f6c347d622cf67468c9bf27a8d54d69_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UIListView_setListViewEventListener(this.nativePtr, listenerPtr);
	}

	clearListViewEventListeners() {
		Module._UIListView_clearListViewEventListeners(this.nativePtr);
	}

	pushBackItem(item) {
		Module._UIListView_pushBackItem(this.nativePtr, item.nativePtr);
	}

	insertItem(item, index) {
		Module._UIListView_insertItem(this.nativePtr, item.nativePtr, index);
	}

	removeLastItem() {
		Module._UIListView_removeLastItem(this.nativePtr);
	}

	removeItem(index) {
		Module._UIListView_removeItem(this.nativePtr, index);
	}

	removeAllItems() {
		Module._UIListView_removeAllItems(this.nativePtr);
	}

	getItemCount() {
		var __result = Module._UIListView_getItemCount(this.nativePtr);
		return __result;
	}

	getItem(index) {
		var __result = Module._UIListView_getItem(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setPadding(left, top, right, bottom) {
		Module._UIListView_setPadding(this.nativePtr, left, top, right, bottom);
	}

	getLeftPadding() {
		var __result = Module._UIListView_getLeftPadding(this.nativePtr);
		return __result;
	}

	getTopPadding() {
		var __result = Module._UIListView_getTopPadding(this.nativePtr);
		return __result;
	}

	getRightPadding() {
		var __result = Module._UIListView_getRightPadding(this.nativePtr);
		return __result;
	}

	getBottomPadding() {
		var __result = Module._UIListView_getBottomPadding(this.nativePtr);
		return __result;
	}

	setItemsMargin(margin) {
		Module._UIListView_setItemsMargin(this.nativePtr, margin);
	}

	getItemsMargin() {
		var __result = Module._UIListView_getItemsMargin(this.nativePtr);
		return __result;
	}

	setGravity(gravity) {
		Module._UIListView_setGravity(this.nativePtr, gravity);
	}

	getGravity() {
		var __result = Module._UIListView_getGravity(this.nativePtr);
		return __result;
	}

	setMagneticType(magneticType) {
		Module._UIListView_setMagneticType(this.nativePtr, magneticType);
	}

	getMagneticType() {
		var __result = Module._UIListView_getMagneticType(this.nativePtr);
		return __result;
	}

	setMagneticAllowedOutOfBoundary(magneticAllowedOutOfBoundary) {
		Module._UIListView_setMagneticAllowedOutOfBoundary(this.nativePtr, magneticAllowedOutOfBoundary);
	}

	getMagneticAllowedOutOfBoundary() {
		var __result = Module._UIListView_getMagneticAllowedOutOfBoundary(this.nativePtr);
		return __result;
	}

	setScrollDuration(duration) {
		Module._UIListView_setScrollDuration(this.nativePtr, duration);
	}

	getScrollDuration() {
		var __result = Module._UIListView_getScrollDuration(this.nativePtr);
		return __result;
	}

	jumpToItem(itemIndex, positionRatioInView, itemAnchorPoint) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		Module._UIListView_jumpToItem(this.nativePtr, itemIndex, positionRatioInViewBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
	}

	scrollToItem(itemIndex, positionRatioInView, itemAnchorPoint, timeInMicroSec) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		Module._UIListView_scrollToItem(this.nativePtr, itemIndex, positionRatioInViewBuffer, itemAnchorPointBuffer, timeInMicroSec);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
	}

	getClosestItemToPosition(targetPosition, itemAnchorPoint) {
		var pbtargetPosition = PBVector2.create();
		pbtargetPosition.x = targetPosition.x;
		pbtargetPosition.y = targetPosition.y;
		const targetPositionBuffer = PBVector2.buffer(pbtargetPosition);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		var __result = Module._UIListView_getClosestItemToPosition(this.nativePtr, targetPositionBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(targetPositionBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getClosestItemToPositionInCurrentView(positionRatioInView, itemAnchorPoint) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		var __result = Module._UIListView_getClosestItemToPositionInCurrentView(this.nativePtr, positionRatioInViewBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCenterItemInCurrentView() {
		var __result = Module._UIListView_getCenterItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getLeftmostItemInCurrentView() {
		var __result = Module._UIListView_getLeftmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getRightmostItemInCurrentView() {
		var __result = Module._UIListView_getRightmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getTopmostItemInCurrentView() {
		var __result = Module._UIListView_getTopmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getBottommostItemInCurrentView() {
		var __result = Module._UIListView_getBottommostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCurSelectedIndex() {
		var __result = Module._UIListView_getCurSelectedIndex(this.nativePtr);
		return __result;
	}

	setCurSelectedIndex(itemIndex) {
		Module._UIListView_setCurSelectedIndex(this.nativePtr, itemIndex);
	}

	invalidLayout() {
		Module._UIListView_invalidLayout(this.nativePtr);
	}

	setEventListener(listener) {
		let listenerFunc = CustomCallback_6b4e34afb9836cd3532afb00db2eb47e_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UIListView_setEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._UIListView_clearEventListeners(this.nativePtr);
	}

	setDirection(dir) {
		Module._UIListView_setDirection(this.nativePtr, dir);
	}

	getDirection() {
		var __result = Module._UIListView_getDirection(this.nativePtr);
		return __result;
	}

	stopScroll() {
		Module._UIListView_stopScroll(this.nativePtr);
	}

	stopAutoScroll() {
		Module._UIListView_stopAutoScroll(this.nativePtr);
	}

	stopOverallScroll() {
		Module._UIListView_stopOverallScroll(this.nativePtr);
	}

	scrollToBottom(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToBottom(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTop(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToTop(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToLeft(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToRight(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopLeft(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToTopLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopRight(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToTopRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomLeft(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToBottomLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomRight(timeInMicroSec, attenuated) {
		Module._UIListView_scrollToBottomRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToPercentVertical(percent, timeInMicroSec, attenuated) {
		Module._UIListView_scrollToPercentVertical(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentHorizontal(percent, timeInMicroSec, attenuated) {
		Module._UIListView_scrollToPercentHorizontal(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentBothDirection(percent, timeInMicroSec, attenuated) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListView_scrollToPercentBothDirection(this.nativePtr, percentBuffer, timeInMicroSec, attenuated);
		PBVector2.freeBuffer(percentBuffer);
	}

	getScrolledPercentVertical() {
		var __result = Module._UIListView_getScrolledPercentVertical(this.nativePtr);
		return __result;
	}

	getScrolledPercentHorizontal() {
		var __result = Module._UIListView_getScrolledPercentHorizontal(this.nativePtr);
		return __result;
	}

	getScrolledPercentBothDirection() {
		Module._UIListView_getScrolledPercentBothDirection(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	jumpToBottom() {
		Module._UIListView_jumpToBottom(this.nativePtr);
	}

	jumpToTop() {
		Module._UIListView_jumpToTop(this.nativePtr);
	}

	jumpToLeft() {
		Module._UIListView_jumpToLeft(this.nativePtr);
	}

	jumpToRight() {
		Module._UIListView_jumpToRight(this.nativePtr);
	}

	jumpToTopLeft() {
		Module._UIListView_jumpToTopLeft(this.nativePtr);
	}

	jumpToTopRight() {
		Module._UIListView_jumpToTopRight(this.nativePtr);
	}

	jumpToBottomLeft() {
		Module._UIListView_jumpToBottomLeft(this.nativePtr);
	}

	jumpToBottomRight() {
		Module._UIListView_jumpToBottomRight(this.nativePtr);
	}

	jumpToPercentVertical(percent) {
		Module._UIListView_jumpToPercentVertical(this.nativePtr, percent);
	}

	jumpToPercentHorizontal(percent) {
		Module._UIListView_jumpToPercentHorizontal(this.nativePtr, percent);
	}

	jumpToPercentBothDirection(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListView_jumpToPercentBothDirection(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setInnerContainerSizeDependentOnLayout() {
		Module._UIListView_setInnerContainerSizeDependentOnLayout(this.nativePtr);
	}

	setInnerContainerSizeFixed(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UIListView_setInnerContainerSizeFixed(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getInnerContainerSize() {
		Module._UIListView_getInnerContainerSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setInnerContainerPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._UIListView_setInnerContainerPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getInnerContainerPosition() {
		Module._UIListView_getInnerContainerPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getContentOffset() {
		Module._UIListView_getContentOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	isScrolling() {
		var __result = Module._UIListView_isScrolling(this.nativePtr);
		return __result;
	}

	isAutoScrolling() {
		var __result = Module._UIListView_isAutoScrolling(this.nativePtr);
		return __result;
	}

	setBounceEnabled(enabled) {
		Module._UIListView_setBounceEnabled(this.nativePtr, enabled);
	}

	isBounceEnabled() {
		var __result = Module._UIListView_isBounceEnabled(this.nativePtr);
		return __result;
	}

	setInertiaScrollEnabled(enabled) {
		Module._UIListView_setInertiaScrollEnabled(this.nativePtr, enabled);
	}

	isInertiaScrollEnabled() {
		var __result = Module._UIListView_isInertiaScrollEnabled(this.nativePtr);
		return __result;
	}

	setTouchTotalTimeThreshold(touchTotalTimeThreshold) {
		Module._UIListView_setTouchTotalTimeThreshold(this.nativePtr, touchTotalTimeThreshold);
	}

	getTouchTotalTimeThreshold() {
		var __result = Module._UIListView_getTouchTotalTimeThreshold(this.nativePtr);
		return __result;
	}

	setScrollBarEnabled(enabled) {
		Module._UIListView_setScrollBarEnabled(this.nativePtr, enabled);
	}

	isScrollBarEnabled() {
		var __result = Module._UIListView_isScrollBarEnabled(this.nativePtr);
		return __result;
	}

	setScrollBarWidth(width) {
		Module._UIListView_setScrollBarWidth(this.nativePtr, width);
	}

	getScrollBarWidth() {
		var __result = Module._UIListView_getScrollBarWidth(this.nativePtr);
		return __result;
	}

	setScrollBarColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIListView_setScrollBarColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getScrollBarColor() {
		Module._UIListView_getScrollBarColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setScrollBarOpacity(opacity) {
		Module._UIListView_setScrollBarOpacity(this.nativePtr, opacity);
	}

	getScrollBarOpacity() {
		var __result = Module._UIListView_getScrollBarOpacity(this.nativePtr);
		return __result;
	}

	setScrollBarAutoHideEnabled(autoHideEnabled) {
		Module._UIListView_setScrollBarAutoHideEnabled(this.nativePtr, autoHideEnabled);
	}

	isScrollBarAutoHideEnabled() {
		var __result = Module._UIListView_isScrollBarAutoHideEnabled(this.nativePtr);
		return __result;
	}

	setScrollBarAutoHideTime(autoHideTime) {
		Module._UIListView_setScrollBarAutoHideTime(this.nativePtr, autoHideTime);
	}

	getScrollBarAutoHideTime() {
		var __result = Module._UIListView_getScrollBarAutoHideTime(this.nativePtr);
		return __result;
	}

	setScrollBarImages(headerAndTailImage, bodyImage) {
		const headerAndTailImageBuffer = Module._malloc(headerAndTailImage.length+1);
		Module.stringToUTF8(headerAndTailImage, headerAndTailImageBuffer, headerAndTailImage.length+1);
		const bodyImageBuffer = Module._malloc(bodyImage.length+1);
		Module.stringToUTF8(bodyImage, bodyImageBuffer, bodyImage.length+1);
		Module._UIListView_setScrollBarImages(this.nativePtr, headerAndTailImageBuffer, bodyImageBuffer);
		Module._free(headerAndTailImageBuffer);
		Module._free(bodyImageBuffer);
	}

	setCustomlizedStencil(stencilDrawer) {
		Module._UIListView_setCustomlizedStencil(this.nativePtr, stencilDrawer.nativePtr);
	}

	getCustomlizedStencil() {
		var __result = Module._UIListView_getCustomlizedStencil(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	removeCustomlizedStencil() {
		Module._UIListView_removeCustomlizedStencil(this.nativePtr);
	}

	isClippingEnabled() {
		var __result = Module._UIListView_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._UIListView_setClippingType(this.nativePtr, type);
	}

	getClippingType() {
		var __result = Module._UIListView_getClippingType(this.nativePtr);
		return __result;
	}

	getClippingRect() {
		Module._UIListView_getClippingRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setClippingRegion(customlizedRegion) {
		var pbcustomlizedRegion = PBBKRectF.create();
		pbcustomlizedRegion.left = customlizedRegion.left;
		pbcustomlizedRegion.top = customlizedRegion.top;
		pbcustomlizedRegion.width = customlizedRegion.width;
		pbcustomlizedRegion.height = customlizedRegion.height;
		const customlizedRegionBuffer = PBBKRectF.buffer(pbcustomlizedRegion);
		Module._UIListView_setClippingRegion(this.nativePtr, customlizedRegionBuffer);
		PBBKRectF.freeBuffer(customlizedRegionBuffer);
	}

	getClippingRegion() {
		Module._UIListView_getClippingRegion(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	clone() {
		var __result = Module._UIListView_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIListView_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIListView_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIListView_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIListView_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIListView_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIListView_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIListView_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIListView_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIListView_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListView_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIListView_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIListView_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIListView_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIListView_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIListView_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListView_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIListView_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIListView_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIListView_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIListView_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIListView_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIListView_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIListView_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIListView_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIListView_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIListView_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIListView_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIListView_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIListView_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIListView_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIListView_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIListView_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIListView_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIListView_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIListView_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIListView_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIListView_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIListView_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIListView_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIListView_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIListView_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIListView_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIListView_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIListView_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIListView_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIListView_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIListView_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIListView_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIListView_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIListView_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIListView_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIListView_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIListView_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIListView_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIListView_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIListView_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIListView_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIListView_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIListView_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIListView_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIListView_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIListView_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIListView_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIListView_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIListView_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIListView_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIListView_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIListView_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIListView_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIListView_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIListView_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIListView_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIListView_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIListView_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIListView_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIListView_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIListView_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIListView_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIListView_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIListView_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIListView_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIListView_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIListView_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIListView_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIListView_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIListView_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIListView_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIListView_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIListView_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIListView_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIListView_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIListView_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIListView_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIListView_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIListView_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIListView_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIListView_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIListView_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIListView_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIListView_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIListView_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIListView_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIListView_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIListView_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIListView_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIListView_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIListView_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIListView_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIListView_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIListView_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIListView_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIListView_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIListView_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIListView_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIListView_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIListView_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIListView_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIListView_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIListView_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIListView_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIListView_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIListView_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIListView_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIListView_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIListView_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIListView_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIListView_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIListView_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIListView_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIListView_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIListView_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIListView_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIListView_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIListView_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIListView_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIListView_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIListView_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIListView_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIListView_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIListView_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIListView_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIListView_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIListView_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIListView_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIListView_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIListView_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIListView_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIListView_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIListView_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIListView_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIListView_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIListView_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIListView_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIListViewCell {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIListViewCell_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIListViewCell_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIListViewCell(__result);
		}
	}

	addUIElementWithLayoutParameter(child, align, relativeToElementName, margin) {
		const relativeToElementNameBuffer = Module._malloc(relativeToElementName.length+1);
		Module.stringToUTF8(relativeToElementName, relativeToElementNameBuffer, relativeToElementName.length+1);
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UIListViewCell_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, align, relativeToElementNameBuffer, marginBuffer);
		Module._free(relativeToElementNameBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementAlign(child, align, relativeToElementName) {
		const relativeToElementNameBuffer = Module._malloc(relativeToElementName.length+1);
		Module.stringToUTF8(relativeToElementName, relativeToElementNameBuffer, relativeToElementName.length+1);
		Module._UIListViewCell_setUIElementAlign(this.nativePtr, child.nativePtr, align, relativeToElementNameBuffer);
		Module._free(relativeToElementNameBuffer);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UIListViewCell_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UIListViewCell_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIListViewCell_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIListViewCell_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIListViewCell_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIListViewCell_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIListViewCell_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIListViewCell_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIListViewCell_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIListViewCell_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIListViewCell_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIListViewCell_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIListViewCell_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIListViewCell_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIListViewCell_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIListViewCell_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIListViewCell_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListViewCell_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIListViewCell_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIListViewCell_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIListViewCell_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIListViewCell_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIListViewCell_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIListViewCell_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIListViewCell_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIListViewCell_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIListViewCell_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIListViewCell_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIListViewCell_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIListViewCell_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIListViewCell_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIListViewCell_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIListViewCell_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIListViewCell_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIListViewCell_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIListViewCell_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIListViewCell_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIListViewCell_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIListViewCell_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIListViewCell_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIListViewCell_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIListViewCell_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIListViewCell_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIListViewCell_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIListViewCell_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIListViewCell_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIListViewCell_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIListViewCell_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIListViewCell_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIListViewCell_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIListViewCell_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIListViewCell_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIListViewCell_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIListViewCell_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIListViewCell_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIListViewCell_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIListViewCell_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIListViewCell_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIListViewCell_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIListViewCell_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIListViewCell_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIListViewCell_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIListViewCell_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIListViewCell_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIListViewCell_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIListViewCell_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIListViewCell_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIListViewCell_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIListViewCell_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIListViewCell_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIListViewCell_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIListViewCell_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIListViewCell_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIListViewCell_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIListViewCell_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIListViewCell_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIListViewCell_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIListViewCell_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIListViewCell_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIListViewCell_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIListViewCell_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIListViewCell_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIListViewCell_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIListViewCell_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIListViewCell_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIListViewCell_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIListViewCell_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIListViewCell_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIListViewCell_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIListViewCell_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIListViewCell_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIListViewCell_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIListViewCell_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIListViewCell_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIListViewCell_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIListViewCell_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIListViewCell_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIListViewCell_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIListViewCell_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIListViewCell_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIListViewCell_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIListViewCell_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIListViewCell_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIListViewCell_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIListViewCell_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIListViewCell_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIListViewCell_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIListViewCell_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIListViewCell_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIListViewCell_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIListViewCell_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIListViewCell_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIListViewCell_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIListViewCell_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIListViewCell_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIListViewCell_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIListViewCell_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIListViewCell_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIListViewCell_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIListViewCell_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIListViewCell_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIListViewCell_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIListViewCell_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIListViewCell_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIListViewCell_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIListViewCell_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIListViewCell_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIListViewCell_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIListViewCell_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIListViewCell_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIListViewCell_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIListViewCell_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIListViewCell_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIListViewCell_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIListViewCell_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIListViewCell_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIListViewCell_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIListViewCell_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIListViewCell_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIListViewCell_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIListViewCell_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIListViewCell_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIListViewCell_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIListViewCell_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIListViewCell_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIListViewCell_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIListViewCell_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIListViewCell_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIListViewCell_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIListViewCell_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIListViewCell_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIListViewCell_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIListViewCell_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIListViewCell_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIListViewCell_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIListViewCell_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIListViewCell_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIListViewCell_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIListViewCell_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIListViewCell_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIListViewCell_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIMask {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIMask_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIMask_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIMask(__result);
		}
	}

	setCustomlizedStencil(stencilDrawer) {
		Module._UIMask_setCustomlizedStencil(this.nativePtr, stencilDrawer.nativePtr);
	}

	getCustomlizedStencil() {
		var __result = Module._UIMask_getCustomlizedStencil(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	removeCustomlizedStencil() {
		Module._UIMask_removeCustomlizedStencil(this.nativePtr);
	}

	isClippingEnabled() {
		var __result = Module._UIMask_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._UIMask_setClippingType(this.nativePtr, type);
	}

	getClippingType() {
		var __result = Module._UIMask_getClippingType(this.nativePtr);
		return __result;
	}

	getClippingRect() {
		Module._UIMask_getClippingRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setClippingRegion(customlizedRegion) {
		var pbcustomlizedRegion = PBBKRectF.create();
		pbcustomlizedRegion.left = customlizedRegion.left;
		pbcustomlizedRegion.top = customlizedRegion.top;
		pbcustomlizedRegion.width = customlizedRegion.width;
		pbcustomlizedRegion.height = customlizedRegion.height;
		const customlizedRegionBuffer = PBBKRectF.buffer(pbcustomlizedRegion);
		Module._UIMask_setClippingRegion(this.nativePtr, customlizedRegionBuffer);
		PBBKRectF.freeBuffer(customlizedRegionBuffer);
	}

	getClippingRegion() {
		Module._UIMask_getClippingRegion(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	clone() {
		var __result = Module._UIMask_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIMask_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIMask_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIMask_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIMask_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIMask_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIMask_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIMask_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIMask_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIMask_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIMask_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIMask_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIMask_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIMask_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIMask_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIMask_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIMask_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIMask_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIMask_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIMask_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIMask_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIMask_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIMask_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIMask_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIMask_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIMask_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIMask_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIMask_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIMask_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIMask_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIMask_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIMask_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIMask_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIMask_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIMask_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIMask_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIMask_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIMask_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIMask_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIMask_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIMask_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIMask_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIMask_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIMask_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIMask_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIMask_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIMask_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIMask_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIMask_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIMask_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIMask_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIMask_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIMask_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIMask_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIMask_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIMask_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIMask_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIMask_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIMask_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIMask_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIMask_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIMask_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIMask_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIMask_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIMask_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIMask_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIMask_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIMask_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIMask_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIMask_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIMask_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIMask_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIMask_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIMask_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIMask_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIMask_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIMask_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIMask_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIMask_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIMask_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIMask_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIMask_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIMask_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIMask_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIMask_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIMask_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIMask_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIMask_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIMask_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIMask_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIMask_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIMask_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIMask_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIMask_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIMask_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIMask_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIMask_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIMask_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIMask_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIMask_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIMask_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIMask_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIMask_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIMask_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIMask_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIMask_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIMask_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIMask_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIMask_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIMask_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIMask_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIMask_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIMask_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIMask_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIMask_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIMask_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIMask_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIMask_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIMask_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIMask_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIMask_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIMask_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIMask_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIMask_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIMask_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIMask_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIMask_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIMask_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIMask_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIMask_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIMask_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIMask_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIMask_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIMask_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIMask_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIMask_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIMask_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIMask_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIMask_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIMask_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIMask_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIMask_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIMask_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIMask_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIMask_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIMask_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIMask_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIMask_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIMask_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIMask_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIMask_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIMask_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIMask_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIMask_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIPopup {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIPopup_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIPopup_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIPopup(__result);
		}
	}

	setEnableAutoClose(flag) {
		Module._UIPopup_setEnableAutoClose(this.nativePtr, flag);
	}

	isEnableAutoClose() {
		var __result = Module._UIPopup_isEnableAutoClose(this.nativePtr);
		return __result;
	}

	showAt(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._UIPopup_showAt(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	close() {
		Module._UIPopup_close(this.nativePtr);
	}

	isOpening() {
		var __result = Module._UIPopup_isOpening(this.nativePtr);
		return __result;
	}

	setBackgroundColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UIPopup_setBackgroundColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getBackgroundColor() {
		Module._UIPopup_getBackgroundColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	setShadowExpandedSize(width, height) {
		Module._UIPopup_setShadowExpandedSize(this.nativePtr, width, height);
	}

	getShadowExpandedSize() {
		Module._UIPopup_getShadowExpandedSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setShadowOffset(offset) {
		var pboffset = PBVector2.create();
		pboffset.x = offset.x;
		pboffset.y = offset.y;
		const offsetBuffer = PBVector2.buffer(pboffset);
		Module._UIPopup_setShadowOffset(this.nativePtr, offsetBuffer);
		PBVector2.freeBuffer(offsetBuffer);
	}

	getShadowOffset() {
		Module._UIPopup_getShadowOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setShadowColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._UIPopup_setShadowColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getShadowColor() {
		Module._UIPopup_getShadowColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	addProtectedChild(child) {
		Module._UIPopup_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIPopup_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIPopup_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIPopup_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIPopup_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIPopup_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIPopup_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIPopup_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIPopup_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIPopup_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIPopup_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIPopup_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIPopup_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIPopup_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIPopup_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIPopup_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIPopup_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIPopup_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIPopup_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIPopup_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIPopup_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIPopup_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIPopup_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIPopup_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIPopup_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIPopup_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIPopup_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIPopup_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIPopup_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIPopup_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIPopup_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIPopup_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIPopup_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIPopup_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIPopup_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIPopup_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIPopup_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIPopup_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIPopup_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIPopup_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIPopup_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIPopup_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIPopup_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIPopup_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIPopup_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIPopup_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIPopup_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIPopup_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIPopup_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIPopup_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIPopup_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIPopup_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIPopup_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIPopup_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIPopup_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIPopup_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIPopup_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIPopup_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIPopup_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIPopup_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIPopup_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIPopup_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIPopup_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIPopup_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIPopup_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIPopup_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIPopup_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIPopup_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIPopup_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIPopup_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIPopup_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIPopup_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIPopup_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIPopup_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIPopup_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIPopup_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIPopup_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIPopup_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIPopup_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIPopup_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIPopup_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIPopup_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIPopup_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIPopup_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIPopup_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIPopup_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIPopup_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIPopup_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIPopup_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIPopup_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIPopup_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIPopup_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIPopup_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIPopup_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIPopup_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIPopup_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIPopup_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIPopup_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIPopup_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIPopup_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIPopup_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIPopup_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIPopup_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIPopup_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIPopup_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIPopup_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIPopup_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIPopup_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIPopup_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIPopup_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIPopup_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIPopup_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIPopup_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIPopup_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIPopup_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIPopup_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIPopup_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIPopup_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIPopup_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIPopup_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIPopup_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIPopup_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIPopup_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIPopup_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIPopup_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIPopup_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIPopup_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIPopup_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIPopup_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIPopup_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIPopup_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIPopup_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIPopup_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIPopup_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIPopup_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIPopup_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIPopup_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIPopup_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIPopup_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIPopup_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIPopup_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIPopup_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIPopup_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIPopup_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIPopup_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIPopup_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIPopup_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIPopup_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIPopup_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIPopup_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIPopup_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIPopup_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIPopup_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIPopup_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIPopup_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIPopup_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIPopup_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIPopup_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIPopup_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIPopup_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIRadioButton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIRadioButton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setSelectedStatusChangedListener(listener) {
		let listenerFunc = CustomCallback_5735589223114756a5d6e84a179726ab_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UIRadioButton_setSelectedStatusChangedListener(this.nativePtr, listenerPtr);
	}

	clearSelectedStatusChangedListeners() {
		Module._UIRadioButton_clearSelectedStatusChangedListeners(this.nativePtr);
	}

	setImagesSource(normalImage, selectedImage, normalPressedImage, selectedPressedImage, normalDisableImage, selectedDisableImage) {
		const normalImageBuffer = Module._malloc(normalImage.length+1);
		Module.stringToUTF8(normalImage, normalImageBuffer, normalImage.length+1);
		const selectedImageBuffer = Module._malloc(selectedImage.length+1);
		Module.stringToUTF8(selectedImage, selectedImageBuffer, selectedImage.length+1);
		const normalPressedImageBuffer = Module._malloc(normalPressedImage.length+1);
		Module.stringToUTF8(normalPressedImage, normalPressedImageBuffer, normalPressedImage.length+1);
		const selectedPressedImageBuffer = Module._malloc(selectedPressedImage.length+1);
		Module.stringToUTF8(selectedPressedImage, selectedPressedImageBuffer, selectedPressedImage.length+1);
		const normalDisableImageBuffer = Module._malloc(normalDisableImage.length+1);
		Module.stringToUTF8(normalDisableImage, normalDisableImageBuffer, normalDisableImage.length+1);
		const selectedDisableImageBuffer = Module._malloc(selectedDisableImage.length+1);
		Module.stringToUTF8(selectedDisableImage, selectedDisableImageBuffer, selectedDisableImage.length+1);
		Module._UIRadioButton_setImagesSource(this.nativePtr, normalImageBuffer, selectedImageBuffer, normalPressedImageBuffer, selectedPressedImageBuffer, normalDisableImageBuffer, selectedDisableImageBuffer);
		Module._free(normalImageBuffer);
		Module._free(selectedImageBuffer);
		Module._free(normalPressedImageBuffer);
		Module._free(selectedPressedImageBuffer);
		Module._free(normalDisableImageBuffer);
		Module._free(selectedDisableImageBuffer);
	}

	setTitle(titleString) {
		const titleStringBuffer = Module._malloc(titleString.length+1);
		Module.stringToUTF8(titleString, titleStringBuffer, titleString.length+1);
		Module._UIRadioButton_setTitle(this.nativePtr, titleStringBuffer);
		Module._free(titleStringBuffer);
	}

	getTitle() {
		var __result = Module._UIRadioButton_getTitle(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleFont(fontPath, emojiFontPath) {
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._UIRadioButton_setTitleFont(this.nativePtr, fontPathBuffer, emojiFontPathBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
	}

	getTitleFontSource() {
		var __result = Module._UIRadioButton_getTitleFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getTitleEmojiFontSource() {
		var __result = Module._UIRadioButton_getTitleEmojiFontSource(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTitleColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIRadioButton_setTitleColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleColor() {
		Module._UIRadioButton_getTitleColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setTitleDisableColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIRadioButton_setTitleDisableColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getTitleDisableColor() {
		Module._UIRadioButton_getTitleDisableColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setSelectedStatus(flag, notifyEvent) {
		Module._UIRadioButton_setSelectedStatus(this.nativePtr, flag, notifyEvent);
	}

	isSelected() {
		var __result = Module._UIRadioButton_isSelected(this.nativePtr);
		return __result;
	}

	setMinSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UIRadioButton_setMinSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getMinSize() {
		Module._UIRadioButton_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPadding(left, top, right, bottom) {
		Module._UIRadioButton_setPadding(this.nativePtr, left, top, right, bottom);
	}

	setLeftPadding(val) {
		Module._UIRadioButton_setLeftPadding(this.nativePtr, val);
	}

	getLeftPadding() {
		var __result = Module._UIRadioButton_getLeftPadding(this.nativePtr);
		return __result;
	}

	setTopPadding(val) {
		Module._UIRadioButton_setTopPadding(this.nativePtr, val);
	}

	getTopPadding() {
		var __result = Module._UIRadioButton_getTopPadding(this.nativePtr);
		return __result;
	}

	setRightPadding(val) {
		Module._UIRadioButton_setRightPadding(this.nativePtr, val);
	}

	setBottomPadding(val) {
		Module._UIRadioButton_setBottomPadding(this.nativePtr, val);
	}

	getBottomPadding() {
		var __result = Module._UIRadioButton_getBottomPadding(this.nativePtr);
		return __result;
	}

	setDirection(direction) {
		Module._UIRadioButton_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._UIRadioButton_getDirection(this.nativePtr);
		return __result;
	}

	addUIElementWithLayoutParameter(child, gravity, margin) {
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UIRadioButton_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, gravity, marginBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementGravity(child, gravity) {
		Module._UIRadioButton_setUIElementGravity(this.nativePtr, child.nativePtr, gravity);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UIRadioButton_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UIRadioButton_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIRadioButton_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIRadioButton_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIRadioButton_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIRadioButton_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIRadioButton_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIRadioButton_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIRadioButton_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIRadioButton_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIRadioButton_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIRadioButton_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIRadioButton_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIRadioButton_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIRadioButton_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIRadioButton_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIRadioButton_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRadioButton_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIRadioButton_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIRadioButton_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIRadioButton_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIRadioButton_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIRadioButton_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRadioButton_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIRadioButton_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIRadioButton_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIRadioButton_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIRadioButton_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIRadioButton_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIRadioButton_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIRadioButton_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIRadioButton_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIRadioButton_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIRadioButton_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIRadioButton_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIRadioButton_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIRadioButton_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIRadioButton_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIRadioButton_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIRadioButton_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIRadioButton_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIRadioButton_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIRadioButton_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIRadioButton_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIRadioButton_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIRadioButton_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIRadioButton_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIRadioButton_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIRadioButton_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIRadioButton_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIRadioButton_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIRadioButton_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIRadioButton_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIRadioButton_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIRadioButton_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIRadioButton_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIRadioButton_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIRadioButton_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIRadioButton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIRadioButton_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIRadioButton_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIRadioButton_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIRadioButton_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIRadioButton_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIRadioButton_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIRadioButton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIRadioButton_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIRadioButton_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIRadioButton_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIRadioButton_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIRadioButton_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIRadioButton_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIRadioButton_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIRadioButton_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIRadioButton_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIRadioButton_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIRadioButton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIRadioButton_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIRadioButton_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIRadioButton_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIRadioButton_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIRadioButton_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIRadioButton_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIRadioButton_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIRadioButton_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIRadioButton_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIRadioButton_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIRadioButton_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIRadioButton_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIRadioButton_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIRadioButton_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIRadioButton_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIRadioButton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIRadioButton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIRadioButton_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIRadioButton_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIRadioButton_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIRadioButton_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIRadioButton_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIRadioButton_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIRadioButton_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIRadioButton_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIRadioButton_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIRadioButton_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIRadioButton_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIRadioButton_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIRadioButton_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIRadioButton_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIRadioButton_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIRadioButton_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIRadioButton_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIRadioButton_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIRadioButton_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIRadioButton_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIRadioButton_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIRadioButton_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIRadioButton_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIRadioButton_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIRadioButton_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIRadioButton_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIRadioButton_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIRadioButton_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIRadioButton_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIRadioButton_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIRadioButton_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIRadioButton_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIRadioButton_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIRadioButton_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIRadioButton_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIRadioButton_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIRadioButton_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIRadioButton_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIRadioButton_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIRadioButton_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIRadioButton_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIRadioButton_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIRadioButton_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIRadioButton_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIRadioButton_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIRadioButton_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIRadioButton_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIRadioButton_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIRadioButton_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIRadioButton_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIRadioButton_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIRadioButton_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIRadioButton_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIRadioButton_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIRadioButton_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIRadioButton_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIRadioButton_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIRadioButton_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIRadioButton_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIRadioButton_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIRadioButton_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIRadioButton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIRadioButton_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIRadioButton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIRadioButton_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIRadioButton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIRadioButton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIRadioButtonGroup {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIRadioButtonGroup_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(items) {
		var __result = Module._UIRadioButtonGroup_create(items);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIRadioButtonGroup(__result);
		}
	}

	setItems(items) {
		Module._UIRadioButtonGroup_setItems(this.nativePtr, items);
	}

	setItemSelectedListener(listener) {
		let listenerFunc = CustomCallback_6ff3fdd3c74a86562a087baab3d50b55_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UIRadioButtonGroup_setItemSelectedListener(this.nativePtr, listenerPtr);
	}

	clearItemSelectedListeners() {
		Module._UIRadioButtonGroup_clearItemSelectedListeners(this.nativePtr);
	}

	selectItem(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIRadioButtonGroup_selectItem(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	selectItemByIndex(index) {
		Module._UIRadioButtonGroup_selectItemByIndex(this.nativePtr, index);
	}

	getSelectedItemIndex() {
		var __result = Module._UIRadioButtonGroup_getSelectedItemIndex(this.nativePtr);
		return __result;
	}

	setItemSpacing(spacing) {
		Module._UIRadioButtonGroup_setItemSpacing(this.nativePtr, spacing);
	}

	getItemSpacing() {
		var __result = Module._UIRadioButtonGroup_getItemSpacing(this.nativePtr);
		return __result;
	}

	setTitleFont(fontPath, emojiFontPath) {
		const fontPathBuffer = Module._malloc(fontPath.length+1);
		Module.stringToUTF8(fontPath, fontPathBuffer, fontPath.length+1);
		const emojiFontPathBuffer = Module._malloc(emojiFontPath.length+1);
		Module.stringToUTF8(emojiFontPath, emojiFontPathBuffer, emojiFontPath.length+1);
		Module._UIRadioButtonGroup_setTitleFont(this.nativePtr, fontPathBuffer, emojiFontPathBuffer);
		Module._free(fontPathBuffer);
		Module._free(emojiFontPathBuffer);
	}

	setMinSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UIRadioButtonGroup_setMinSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getMinSize() {
		Module._UIRadioButtonGroup_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPadding(left, top, right, bottom) {
		Module._UIRadioButtonGroup_setPadding(this.nativePtr, left, top, right, bottom);
	}

	setLeftPadding(val) {
		Module._UIRadioButtonGroup_setLeftPadding(this.nativePtr, val);
	}

	getLeftPadding() {
		var __result = Module._UIRadioButtonGroup_getLeftPadding(this.nativePtr);
		return __result;
	}

	setTopPadding(val) {
		Module._UIRadioButtonGroup_setTopPadding(this.nativePtr, val);
	}

	getTopPadding() {
		var __result = Module._UIRadioButtonGroup_getTopPadding(this.nativePtr);
		return __result;
	}

	setRightPadding(val) {
		Module._UIRadioButtonGroup_setRightPadding(this.nativePtr, val);
	}

	setBottomPadding(val) {
		Module._UIRadioButtonGroup_setBottomPadding(this.nativePtr, val);
	}

	getBottomPadding() {
		var __result = Module._UIRadioButtonGroup_getBottomPadding(this.nativePtr);
		return __result;
	}

	setDirection(direction) {
		Module._UIRadioButtonGroup_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._UIRadioButtonGroup_getDirection(this.nativePtr);
		return __result;
	}

	addUIElementWithLayoutParameter(child, gravity, margin) {
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UIRadioButtonGroup_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, gravity, marginBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementGravity(child, gravity) {
		Module._UIRadioButtonGroup_setUIElementGravity(this.nativePtr, child.nativePtr, gravity);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UIRadioButtonGroup_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UIRadioButtonGroup_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIRadioButtonGroup_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIRadioButtonGroup_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIRadioButtonGroup_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIRadioButtonGroup_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIRadioButtonGroup_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIRadioButtonGroup_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIRadioButtonGroup_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIRadioButtonGroup_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIRadioButtonGroup_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIRadioButtonGroup_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIRadioButtonGroup_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIRadioButtonGroup_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIRadioButtonGroup_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIRadioButtonGroup_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIRadioButtonGroup_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRadioButtonGroup_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIRadioButtonGroup_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIRadioButtonGroup_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIRadioButtonGroup_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIRadioButtonGroup_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIRadioButtonGroup_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRadioButtonGroup_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIRadioButtonGroup_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIRadioButtonGroup_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIRadioButtonGroup_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIRadioButtonGroup_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIRadioButtonGroup_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIRadioButtonGroup_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIRadioButtonGroup_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIRadioButtonGroup_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIRadioButtonGroup_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIRadioButtonGroup_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIRadioButtonGroup_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIRadioButtonGroup_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIRadioButtonGroup_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIRadioButtonGroup_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIRadioButtonGroup_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIRadioButtonGroup_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIRadioButtonGroup_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIRadioButtonGroup_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIRadioButtonGroup_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIRadioButtonGroup_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIRadioButtonGroup_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIRadioButtonGroup_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIRadioButtonGroup_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIRadioButtonGroup_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIRadioButtonGroup_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIRadioButtonGroup_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIRadioButtonGroup_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIRadioButtonGroup_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIRadioButtonGroup_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIRadioButtonGroup_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIRadioButtonGroup_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIRadioButtonGroup_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIRadioButtonGroup_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIRadioButtonGroup_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIRadioButtonGroup_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIRadioButtonGroup_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIRadioButtonGroup_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIRadioButtonGroup_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIRadioButtonGroup_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIRadioButtonGroup_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIRadioButtonGroup_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIRadioButtonGroup_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIRadioButtonGroup_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIRadioButtonGroup_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIRadioButtonGroup_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIRadioButtonGroup_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIRadioButtonGroup_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIRadioButtonGroup_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIRadioButtonGroup_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIRadioButtonGroup_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIRadioButtonGroup_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIRadioButtonGroup_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIRadioButtonGroup_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIRadioButtonGroup_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIRadioButtonGroup_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIRadioButtonGroup_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIRadioButtonGroup_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIRadioButtonGroup_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIRadioButtonGroup_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIRadioButtonGroup_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIRadioButtonGroup_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIRadioButtonGroup_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIRadioButtonGroup_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIRadioButtonGroup_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIRadioButtonGroup_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIRadioButtonGroup_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIRadioButtonGroup_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIRadioButtonGroup_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIRadioButtonGroup_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIRadioButtonGroup_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIRadioButtonGroup_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIRadioButtonGroup_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIRadioButtonGroup_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIRadioButtonGroup_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIRadioButtonGroup_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIRadioButtonGroup_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIRadioButtonGroup_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIRadioButtonGroup_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIRadioButtonGroup_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIRadioButtonGroup_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIRadioButtonGroup_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIRadioButtonGroup_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIRadioButtonGroup_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIRadioButtonGroup_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIRadioButtonGroup_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIRadioButtonGroup_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIRadioButtonGroup_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIRadioButtonGroup_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIRadioButtonGroup_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIRadioButtonGroup_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIRadioButtonGroup_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIRadioButtonGroup_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIRadioButtonGroup_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIRadioButtonGroup_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIRadioButtonGroup_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIRadioButtonGroup_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIRadioButtonGroup_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIRadioButtonGroup_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIRadioButtonGroup_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIRadioButtonGroup_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIRadioButtonGroup_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIRadioButtonGroup_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIRadioButtonGroup_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIRadioButtonGroup_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIRadioButtonGroup_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIRadioButtonGroup_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIRadioButtonGroup_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIRadioButtonGroup_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIRadioButtonGroup_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIRadioButtonGroup_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIRadioButtonGroup_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIRadioButtonGroup_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIRadioButtonGroup_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIRadioButtonGroup_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIRadioButtonGroup_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIRadioButtonGroup_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIRadioButtonGroup_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIRadioButtonGroup_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIRadioButtonGroup_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIRadioButtonGroup_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIRadioButtonGroup_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIRadioButtonGroup_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIRadioButtonGroup_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIRadioButtonGroup_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIRadioButtonGroup_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIRadioButtonGroup_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIRadioButtonGroup_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIRadioButtonGroup_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIRadioButtonGroup_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIRadioButtonGroup_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIRadioButtonGroup_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIRadioButtonGroup_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIRadioButtonGroup_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIRadioButtonGroup_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIRadioButtonGroup_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIRadioButtonGroup_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIRadioButtonGroup_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIScrollView {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIScrollView_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UIScrollView_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIScrollView(__result);
		}
	}

	invalidLayout() {
		Module._UIScrollView_invalidLayout(this.nativePtr);
	}

	setEventListener(listener) {
		let listenerFunc = CustomCallback_6b4e34afb9836cd3532afb00db2eb47e_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._UIScrollView_setEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._UIScrollView_clearEventListeners(this.nativePtr);
	}

	setDirection(dir) {
		Module._UIScrollView_setDirection(this.nativePtr, dir);
	}

	getDirection() {
		var __result = Module._UIScrollView_getDirection(this.nativePtr);
		return __result;
	}

	stopScroll() {
		Module._UIScrollView_stopScroll(this.nativePtr);
	}

	stopAutoScroll() {
		Module._UIScrollView_stopAutoScroll(this.nativePtr);
	}

	stopOverallScroll() {
		Module._UIScrollView_stopOverallScroll(this.nativePtr);
	}

	scrollToBottom(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToBottom(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTop(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToTop(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToLeft(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToRight(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopLeft(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToTopLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopRight(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToTopRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomLeft(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToBottomLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomRight(timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToBottomRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToPercentVertical(percent, timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToPercentVertical(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentHorizontal(percent, timeInMicroSec, attenuated) {
		Module._UIScrollView_scrollToPercentHorizontal(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentBothDirection(percent, timeInMicroSec, attenuated) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIScrollView_scrollToPercentBothDirection(this.nativePtr, percentBuffer, timeInMicroSec, attenuated);
		PBVector2.freeBuffer(percentBuffer);
	}

	getScrolledPercentVertical() {
		var __result = Module._UIScrollView_getScrolledPercentVertical(this.nativePtr);
		return __result;
	}

	getScrolledPercentHorizontal() {
		var __result = Module._UIScrollView_getScrolledPercentHorizontal(this.nativePtr);
		return __result;
	}

	getScrolledPercentBothDirection() {
		Module._UIScrollView_getScrolledPercentBothDirection(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	jumpToBottom() {
		Module._UIScrollView_jumpToBottom(this.nativePtr);
	}

	jumpToTop() {
		Module._UIScrollView_jumpToTop(this.nativePtr);
	}

	jumpToLeft() {
		Module._UIScrollView_jumpToLeft(this.nativePtr);
	}

	jumpToRight() {
		Module._UIScrollView_jumpToRight(this.nativePtr);
	}

	jumpToTopLeft() {
		Module._UIScrollView_jumpToTopLeft(this.nativePtr);
	}

	jumpToTopRight() {
		Module._UIScrollView_jumpToTopRight(this.nativePtr);
	}

	jumpToBottomLeft() {
		Module._UIScrollView_jumpToBottomLeft(this.nativePtr);
	}

	jumpToBottomRight() {
		Module._UIScrollView_jumpToBottomRight(this.nativePtr);
	}

	jumpToPercentVertical(percent) {
		Module._UIScrollView_jumpToPercentVertical(this.nativePtr, percent);
	}

	jumpToPercentHorizontal(percent) {
		Module._UIScrollView_jumpToPercentHorizontal(this.nativePtr, percent);
	}

	jumpToPercentBothDirection(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIScrollView_jumpToPercentBothDirection(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setInnerContainerSizeDependentOnLayout() {
		Module._UIScrollView_setInnerContainerSizeDependentOnLayout(this.nativePtr);
	}

	setInnerContainerSizeFixed(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UIScrollView_setInnerContainerSizeFixed(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getInnerContainerSize() {
		Module._UIScrollView_getInnerContainerSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setInnerContainerPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._UIScrollView_setInnerContainerPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getInnerContainerPosition() {
		Module._UIScrollView_getInnerContainerPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getContentOffset() {
		Module._UIScrollView_getContentOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	isScrolling() {
		var __result = Module._UIScrollView_isScrolling(this.nativePtr);
		return __result;
	}

	isAutoScrolling() {
		var __result = Module._UIScrollView_isAutoScrolling(this.nativePtr);
		return __result;
	}

	setBounceEnabled(enabled) {
		Module._UIScrollView_setBounceEnabled(this.nativePtr, enabled);
	}

	isBounceEnabled() {
		var __result = Module._UIScrollView_isBounceEnabled(this.nativePtr);
		return __result;
	}

	setInertiaScrollEnabled(enabled) {
		Module._UIScrollView_setInertiaScrollEnabled(this.nativePtr, enabled);
	}

	isInertiaScrollEnabled() {
		var __result = Module._UIScrollView_isInertiaScrollEnabled(this.nativePtr);
		return __result;
	}

	setTouchTotalTimeThreshold(touchTotalTimeThreshold) {
		Module._UIScrollView_setTouchTotalTimeThreshold(this.nativePtr, touchTotalTimeThreshold);
	}

	getTouchTotalTimeThreshold() {
		var __result = Module._UIScrollView_getTouchTotalTimeThreshold(this.nativePtr);
		return __result;
	}

	setScrollBarEnabled(enabled) {
		Module._UIScrollView_setScrollBarEnabled(this.nativePtr, enabled);
	}

	isScrollBarEnabled() {
		var __result = Module._UIScrollView_isScrollBarEnabled(this.nativePtr);
		return __result;
	}

	setScrollBarWidth(width) {
		Module._UIScrollView_setScrollBarWidth(this.nativePtr, width);
	}

	getScrollBarWidth() {
		var __result = Module._UIScrollView_getScrollBarWidth(this.nativePtr);
		return __result;
	}

	setScrollBarColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIScrollView_setScrollBarColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getScrollBarColor() {
		Module._UIScrollView_getScrollBarColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setScrollBarOpacity(opacity) {
		Module._UIScrollView_setScrollBarOpacity(this.nativePtr, opacity);
	}

	getScrollBarOpacity() {
		var __result = Module._UIScrollView_getScrollBarOpacity(this.nativePtr);
		return __result;
	}

	setScrollBarAutoHideEnabled(autoHideEnabled) {
		Module._UIScrollView_setScrollBarAutoHideEnabled(this.nativePtr, autoHideEnabled);
	}

	isScrollBarAutoHideEnabled() {
		var __result = Module._UIScrollView_isScrollBarAutoHideEnabled(this.nativePtr);
		return __result;
	}

	setScrollBarAutoHideTime(autoHideTime) {
		Module._UIScrollView_setScrollBarAutoHideTime(this.nativePtr, autoHideTime);
	}

	getScrollBarAutoHideTime() {
		var __result = Module._UIScrollView_getScrollBarAutoHideTime(this.nativePtr);
		return __result;
	}

	setScrollBarImages(headerAndTailImage, bodyImage) {
		const headerAndTailImageBuffer = Module._malloc(headerAndTailImage.length+1);
		Module.stringToUTF8(headerAndTailImage, headerAndTailImageBuffer, headerAndTailImage.length+1);
		const bodyImageBuffer = Module._malloc(bodyImage.length+1);
		Module.stringToUTF8(bodyImage, bodyImageBuffer, bodyImage.length+1);
		Module._UIScrollView_setScrollBarImages(this.nativePtr, headerAndTailImageBuffer, bodyImageBuffer);
		Module._free(headerAndTailImageBuffer);
		Module._free(bodyImageBuffer);
	}

	setCustomlizedStencil(stencilDrawer) {
		Module._UIScrollView_setCustomlizedStencil(this.nativePtr, stencilDrawer.nativePtr);
	}

	getCustomlizedStencil() {
		var __result = Module._UIScrollView_getCustomlizedStencil(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node2D(__result);
		}
	}

	removeCustomlizedStencil() {
		Module._UIScrollView_removeCustomlizedStencil(this.nativePtr);
	}

	isClippingEnabled() {
		var __result = Module._UIScrollView_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._UIScrollView_setClippingType(this.nativePtr, type);
	}

	getClippingType() {
		var __result = Module._UIScrollView_getClippingType(this.nativePtr);
		return __result;
	}

	getClippingRect() {
		Module._UIScrollView_getClippingRect(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setClippingRegion(customlizedRegion) {
		var pbcustomlizedRegion = PBBKRectF.create();
		pbcustomlizedRegion.left = customlizedRegion.left;
		pbcustomlizedRegion.top = customlizedRegion.top;
		pbcustomlizedRegion.width = customlizedRegion.width;
		pbcustomlizedRegion.height = customlizedRegion.height;
		const customlizedRegionBuffer = PBBKRectF.buffer(pbcustomlizedRegion);
		Module._UIScrollView_setClippingRegion(this.nativePtr, customlizedRegionBuffer);
		PBBKRectF.freeBuffer(customlizedRegionBuffer);
	}

	getClippingRegion() {
		Module._UIScrollView_getClippingRegion(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	clone() {
		var __result = Module._UIScrollView_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIScrollView_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIScrollView_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIScrollView_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIScrollView_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIScrollView_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIScrollView_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIScrollView_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIScrollView_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIScrollView_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIScrollView_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIScrollView_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIScrollView_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIScrollView_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIScrollView_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIScrollView_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIScrollView_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIScrollView_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIScrollView_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIScrollView_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIScrollView_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIScrollView_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIScrollView_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIScrollView_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIScrollView_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIScrollView_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIScrollView_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIScrollView_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIScrollView_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIScrollView_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIScrollView_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIScrollView_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIScrollView_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIScrollView_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIScrollView_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIScrollView_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIScrollView_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIScrollView_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIScrollView_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIScrollView_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIScrollView_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIScrollView_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIScrollView_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIScrollView_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIScrollView_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIScrollView_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIScrollView_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIScrollView_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIScrollView_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIScrollView_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIScrollView_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIScrollView_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIScrollView_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIScrollView_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIScrollView_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIScrollView_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIScrollView_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIScrollView_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIScrollView_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIScrollView_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIScrollView_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIScrollView_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIScrollView_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIScrollView_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIScrollView_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIScrollView_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIScrollView_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIScrollView_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIScrollView_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIScrollView_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIScrollView_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIScrollView_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIScrollView_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIScrollView_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIScrollView_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIScrollView_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIScrollView_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIScrollView_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIScrollView_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIScrollView_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIScrollView_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIScrollView_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIScrollView_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIScrollView_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIScrollView_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIScrollView_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIScrollView_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIScrollView_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIScrollView_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIScrollView_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIScrollView_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIScrollView_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIScrollView_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIScrollView_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIScrollView_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIScrollView_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIScrollView_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIScrollView_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIScrollView_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIScrollView_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIScrollView_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIScrollView_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIScrollView_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIScrollView_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIScrollView_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIScrollView_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIScrollView_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIScrollView_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIScrollView_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIScrollView_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIScrollView_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIScrollView_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIScrollView_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIScrollView_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIScrollView_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIScrollView_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIScrollView_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIScrollView_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIScrollView_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIScrollView_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIScrollView_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIScrollView_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIScrollView_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIScrollView_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIScrollView_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIScrollView_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIScrollView_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIScrollView_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIScrollView_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIScrollView_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIScrollView_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIScrollView_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIScrollView_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIScrollView_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIScrollView_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIScrollView_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIScrollView_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIScrollView_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIScrollView_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIScrollView_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIScrollView_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIScrollView_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIScrollView_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIScrollView_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIScrollView_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIScrollView_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIScrollView_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIScrollView_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIScrollView_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIScrollView_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIScrollView_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIScrollView_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIScrollView_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIScrollView_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIShape {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIShape_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIShape_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIShape(__result);
		}
	}

	clear() {
		Module._UIShape_clear(this.nativePtr);
	}

	setLineWidth(lineWidth) {
		Module._UIShape_setLineWidth(this.nativePtr, lineWidth);
	}

	getLineWidth() {
		var __result = Module._UIShape_getLineWidth(this.nativePtr);
		return __result;
	}

	setIsolated(isolated) {
		Module._UIShape_setIsolated(this.nativePtr, isolated);
	}

	isIsolated() {
		var __result = Module._UIShape_isIsolated(this.nativePtr);
		return __result;
	}

	drawLine(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawLine(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRect(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawRect(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRectWithCorners(p1, p2, p3, p4, color) {
		var pbp1 = PBVector2.create();
		pbp1.x = p1.x;
		pbp1.y = p1.y;
		const p1Buffer = PBVector2.buffer(pbp1);
		var pbp2 = PBVector2.create();
		pbp2.x = p2.x;
		pbp2.y = p2.y;
		const p2Buffer = PBVector2.buffer(pbp2);
		var pbp3 = PBVector2.create();
		pbp3.x = p3.x;
		pbp3.y = p3.y;
		const p3Buffer = PBVector2.buffer(pbp3);
		var pbp4 = PBVector2.create();
		pbp4.x = p4.x;
		pbp4.y = p4.y;
		const p4Buffer = PBVector2.buffer(pbp4);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawRectWithCorners(this.nativePtr, p1Buffer, p2Buffer, p3Buffer, p4Buffer, colorBuffer);
		PBVector2.freeBuffer(p1Buffer);
		PBVector2.freeBuffer(p2Buffer);
		PBVector2.freeBuffer(p3Buffer);
		PBVector2.freeBuffer(p4Buffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidRectWithBorder(origin, destination, color, borderWidth, borderColor) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		var pbborderColor = PBColor4F.create();
		pbborderColor.r = borderColor.r;
		pbborderColor.g = borderColor.g;
		pbborderColor.b = borderColor.b;
		pbborderColor.a = borderColor.a;
		const borderColorBuffer = PBColor4F.buffer(pbborderColor);
		Module._UIShape_drawSolidRectWithBorder(this.nativePtr, originBuffer, destinationBuffer, colorBuffer, borderWidth, borderColorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
		PBColor4F.freeBuffer(borderColorBuffer);
	}

	drawSolidRect(origin, destination, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawSolidRect(this.nativePtr, originBuffer, destinationBuffer, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidRoundedRectWithBorder(origin, destination, radius, segments, color, borderWidth, borderColor) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		var pbborderColor = PBColor4F.create();
		pbborderColor.r = borderColor.r;
		pbborderColor.g = borderColor.g;
		pbborderColor.b = borderColor.b;
		pbborderColor.a = borderColor.a;
		const borderColorBuffer = PBColor4F.buffer(pbborderColor);
		Module._UIShape_drawSolidRoundedRectWithBorder(this.nativePtr, originBuffer, destinationBuffer, radius, segments, colorBuffer, borderWidth, borderColorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
		PBColor4F.freeBuffer(borderColorBuffer);
	}

	drawSolidRoundedRect(origin, destination, radius, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawSolidRoundedRect(this.nativePtr, originBuffer, destinationBuffer, radius, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawRoundedRect(origin, destination, radius, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawRoundedRect(this.nativePtr, originBuffer, destinationBuffer, radius, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawCircle(center, radius, angle, segments, drawLineToCenter, color) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawCircle(this.nativePtr, centerBuffer, radius, angle, segments, drawLineToCenter, colorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSolidCircleWithBorder(center, radius, angle, segments, scaleX, scaleY, color, borderWidth, borderColor) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		var pbborderColor = PBColor4F.create();
		pbborderColor.r = borderColor.r;
		pbborderColor.g = borderColor.g;
		pbborderColor.b = borderColor.b;
		pbborderColor.a = borderColor.a;
		const borderColorBuffer = PBColor4F.buffer(pbborderColor);
		Module._UIShape_drawSolidCircleWithBorder(this.nativePtr, centerBuffer, radius, angle, segments, scaleX, scaleY, colorBuffer, borderWidth, borderColorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		PBColor4F.freeBuffer(colorBuffer);
		PBColor4F.freeBuffer(borderColorBuffer);
	}

	drawSolidCircle(center, radius, angle, segments, color) {
		var pbcenter = PBVector2.create();
		pbcenter.x = center.x;
		pbcenter.y = center.y;
		const centerBuffer = PBVector2.buffer(pbcenter);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawSolidCircle(this.nativePtr, centerBuffer, radius, angle, segments, colorBuffer);
		PBVector2.freeBuffer(centerBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawQuadBezier(origin, control, destination, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbcontrol = PBVector2.create();
		pbcontrol.x = control.x;
		pbcontrol.y = control.y;
		const controlBuffer = PBVector2.buffer(pbcontrol);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawQuadBezier(this.nativePtr, originBuffer, controlBuffer, destinationBuffer, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(controlBuffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawCubicBezier(origin, control1, control2, destination, segments, color) {
		var pborigin = PBVector2.create();
		pborigin.x = origin.x;
		pborigin.y = origin.y;
		const originBuffer = PBVector2.buffer(pborigin);
		var pbcontrol1 = PBVector2.create();
		pbcontrol1.x = control1.x;
		pbcontrol1.y = control1.y;
		const control1Buffer = PBVector2.buffer(pbcontrol1);
		var pbcontrol2 = PBVector2.create();
		pbcontrol2.x = control2.x;
		pbcontrol2.y = control2.y;
		const control2Buffer = PBVector2.buffer(pbcontrol2);
		var pbdestination = PBVector2.create();
		pbdestination.x = destination.x;
		pbdestination.y = destination.y;
		const destinationBuffer = PBVector2.buffer(pbdestination);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawCubicBezier(this.nativePtr, originBuffer, control1Buffer, control2Buffer, destinationBuffer, segments, colorBuffer);
		PBVector2.freeBuffer(originBuffer);
		PBVector2.freeBuffer(control1Buffer);
		PBVector2.freeBuffer(control2Buffer);
		PBVector2.freeBuffer(destinationBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawDot(pos, radius, color) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawDot(this.nativePtr, posBuffer, radius, colorBuffer);
		PBVector2.freeBuffer(posBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawSegment(from, to, radius, color) {
		var pbfrom = PBVector2.create();
		pbfrom.x = from.x;
		pbfrom.y = from.y;
		const fromBuffer = PBVector2.buffer(pbfrom);
		var pbto = PBVector2.create();
		pbto.x = to.x;
		pbto.y = to.y;
		const toBuffer = PBVector2.buffer(pbto);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawSegment(this.nativePtr, fromBuffer, toBuffer, radius, colorBuffer);
		PBVector2.freeBuffer(fromBuffer);
		PBVector2.freeBuffer(toBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	drawTriangle(p1, p2, p3, color) {
		var pbp1 = PBVector2.create();
		pbp1.x = p1.x;
		pbp1.y = p1.y;
		const p1Buffer = PBVector2.buffer(pbp1);
		var pbp2 = PBVector2.create();
		pbp2.x = p2.x;
		pbp2.y = p2.y;
		const p2Buffer = PBVector2.buffer(pbp2);
		var pbp3 = PBVector2.create();
		pbp3.x = p3.x;
		pbp3.y = p3.y;
		const p3Buffer = PBVector2.buffer(pbp3);
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._UIShape_drawTriangle(this.nativePtr, p1Buffer, p2Buffer, p3Buffer, colorBuffer);
		PBVector2.freeBuffer(p1Buffer);
		PBVector2.freeBuffer(p2Buffer);
		PBVector2.freeBuffer(p3Buffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	clone() {
		var __result = Module._UIShape_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIShape_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIShape_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIShape_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIShape_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIShape_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIShape_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIShape_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIShape_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIShape_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIShape_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIShape_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIShape_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIShape_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIShape_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIShape_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIShape_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIShape_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIShape_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIShape_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIShape_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIShape_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIShape_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIShape_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIShape_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIShape_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIShape_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIShape_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIShape_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIShape_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIShape_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIShape_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIShape_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIShape_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIShape_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIShape_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIShape_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIShape_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIShape_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIShape_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIShape_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIShape_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIShape_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIShape_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIShape_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIShape_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIShape_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIShape_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIShape_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIShape_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIShape_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIShape_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIShape_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIShape_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIShape_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIShape_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIShape_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIShape_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIShape_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIShape_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIShape_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIShape_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIShape_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIShape_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIShape_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIShape_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIShape_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIShape_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIShape_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIShape_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIShape_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIShape_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIShape_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIShape_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIShape_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIShape_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIShape_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIShape_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIShape_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIShape_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIShape_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIShape_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIShape_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIShape_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIShape_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIShape_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIShape_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIShape_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIShape_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIShape_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIShape_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIShape_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIShape_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIShape_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIShape_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIShape_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIShape_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIShape_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIShape_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIShape_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIShape_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIShape_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIShape_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIShape_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIShape_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIShape_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIShape_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIShape_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIShape_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIShape_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIShape_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIShape_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIShape_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIShape_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIShape_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIShape_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIShape_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIShape_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIShape_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIShape_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIShape_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIShape_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIShape_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIShape_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIShape_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIShape_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIShape_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIShape_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIShape_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIShape_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIShape_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIShape_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIShape_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIShape_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIShape_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIShape_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIShape_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIShape_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIShape_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIShape_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIShape_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIShape_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIShape_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIShape_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIShape_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIShape_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIShape_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIShape_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIShape_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIShape_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIShape_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIShape_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIShape_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIShape_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UISlider {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UISlider_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UISlider_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UISlider(__result);
		}
	}

	setCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UISlider_setCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getCapInsets() {
		Module._UISlider_getCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBarImage(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._UISlider_setBarImage(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	getBarImagePath() {
		var __result = Module._UISlider_getBarImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setProgressBarImage(imagePath) {
		const imagePathBuffer = Module._malloc(imagePath.length+1);
		Module.stringToUTF8(imagePath, imagePathBuffer, imagePath.length+1);
		Module._UISlider_setProgressBarImage(this.nativePtr, imagePathBuffer);
		Module._free(imagePathBuffer);
	}

	getProgressBarImage() {
		var __result = Module._UISlider_getProgressBarImage(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setSliderBallImages(normalImagePath, pressedImagePath, disableImagePath) {
		const normalImagePathBuffer = Module._malloc(normalImagePath.length+1);
		Module.stringToUTF8(normalImagePath, normalImagePathBuffer, normalImagePath.length+1);
		const pressedImagePathBuffer = Module._malloc(pressedImagePath.length+1);
		Module.stringToUTF8(pressedImagePath, pressedImagePathBuffer, pressedImagePath.length+1);
		const disableImagePathBuffer = Module._malloc(disableImagePath.length+1);
		Module.stringToUTF8(disableImagePath, disableImagePathBuffer, disableImagePath.length+1);
		Module._UISlider_setSliderBallImages(this.nativePtr, normalImagePathBuffer, pressedImagePathBuffer, disableImagePathBuffer);
		Module._free(normalImagePathBuffer);
		Module._free(pressedImagePathBuffer);
		Module._free(disableImagePathBuffer);
	}

	getSliderBallNormalImagePath() {
		var __result = Module._UISlider_getSliderBallNormalImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getSliderBallPressedImagePath() {
		var __result = Module._UISlider_getSliderBallPressedImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getSliderBallDisableImagePath() {
		var __result = Module._UISlider_getSliderBallDisableImagePath(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setSliderBallScale(scale) {
		Module._UISlider_setSliderBallScale(this.nativePtr, scale);
	}

	getSliderBallScale() {
		var __result = Module._UISlider_getSliderBallScale(this.nativePtr);
		return __result;
	}

	setValueRange(min, max) {
		Module._UISlider_setValueRange(this.nativePtr, min, max);
	}

	setValue(val) {
		Module._UISlider_setValue(this.nativePtr, val);
	}

	getValue() {
		var __result = Module._UISlider_getValue(this.nativePtr);
		return __result;
	}

	getMaxValue() {
		var __result = Module._UISlider_getMaxValue(this.nativePtr);
		return __result;
	}

	getMinValue() {
		var __result = Module._UISlider_getMinValue(this.nativePtr);
		return __result;
	}

	setSliderEventListener(listener) {
		let listenerFunc = CustomCallback_e58aef4fee68d42c330b0998c52fde05_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viii);
		Module._UISlider_setSliderEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._UISlider_clearEventListeners(this.nativePtr);
	}

	clone() {
		var __result = Module._UISlider_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UISlider_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UISlider_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UISlider_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UISlider_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UISlider_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UISlider_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UISlider_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UISlider_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UISlider_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UISlider_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UISlider_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UISlider_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UISlider_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UISlider_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UISlider_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UISlider_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UISlider_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UISlider_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UISlider_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UISlider_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UISlider_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UISlider_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UISlider_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UISlider_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UISlider_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UISlider_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UISlider_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UISlider_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UISlider_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UISlider_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UISlider_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UISlider_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UISlider_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UISlider_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UISlider_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UISlider_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UISlider_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UISlider_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UISlider_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UISlider_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UISlider_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UISlider_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UISlider_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UISlider_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UISlider_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UISlider_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UISlider_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UISlider_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UISlider_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UISlider_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UISlider_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UISlider_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UISlider_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UISlider_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UISlider_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UISlider_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UISlider_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UISlider_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UISlider_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UISlider_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UISlider_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UISlider_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UISlider_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UISlider_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UISlider_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UISlider_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UISlider_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UISlider_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UISlider_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UISlider_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UISlider_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UISlider_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UISlider_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UISlider_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UISlider_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UISlider_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UISlider_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UISlider_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UISlider_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UISlider_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UISlider_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UISlider_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UISlider_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UISlider_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UISlider_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UISlider_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UISlider_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UISlider_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UISlider_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UISlider_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UISlider_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UISlider_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UISlider_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UISlider_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UISlider_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UISlider_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UISlider_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UISlider_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UISlider_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UISlider_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UISlider_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UISlider_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UISlider_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UISlider_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UISlider_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UISlider_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UISlider_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UISlider_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UISlider_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UISlider_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UISlider_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UISlider_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UISlider_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UISlider_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UISlider_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UISlider_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UISlider_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UISlider_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UISlider_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UISlider_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UISlider_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UISlider_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UISlider_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UISlider_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UISlider_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UISlider_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UISlider_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UISlider_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UISlider_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UISlider_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UISlider_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UISlider_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UISlider_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UISlider_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UISlider_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UISlider_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UISlider_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UISlider_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UISlider_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UISlider_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UISlider_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UISlider_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UISlider_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UISlider_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UISlider_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UISlider_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UISlider_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UISlider_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UISlider_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UISlider_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UISlider_activate(this.nativePtr);
	}

	deactivate() {
		Module._UISlider_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UISlider_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIBaseLayout {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIBaseLayout_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UIBaseLayout_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIBaseLayout(__result);
		}
	}

	addProtectedChild(child) {
		Module._UIBaseLayout_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIBaseLayout_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIBaseLayout_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIBaseLayout_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIBaseLayout_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIBaseLayout_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIBaseLayout_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIBaseLayout_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIBaseLayout_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIBaseLayout_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIBaseLayout_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIBaseLayout_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIBaseLayout_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIBaseLayout_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIBaseLayout_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIBaseLayout_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIBaseLayout_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIBaseLayout_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIBaseLayout_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIBaseLayout_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIBaseLayout_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIBaseLayout_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIBaseLayout_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIBaseLayout_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIBaseLayout_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIBaseLayout_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIBaseLayout_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIBaseLayout_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIBaseLayout_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIBaseLayout_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIBaseLayout_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIBaseLayout_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIBaseLayout_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIBaseLayout_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIBaseLayout_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIBaseLayout_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIBaseLayout_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIBaseLayout_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIBaseLayout_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIBaseLayout_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIBaseLayout_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIBaseLayout_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIBaseLayout_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIBaseLayout_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIBaseLayout_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIBaseLayout_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIBaseLayout_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIBaseLayout_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIBaseLayout_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIBaseLayout_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIBaseLayout_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIBaseLayout_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIBaseLayout_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIBaseLayout_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIBaseLayout_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIBaseLayout_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIBaseLayout_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIBaseLayout_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIBaseLayout_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIBaseLayout_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIBaseLayout_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIBaseLayout_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIBaseLayout_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIBaseLayout_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIBaseLayout_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIBaseLayout_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIBaseLayout_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIBaseLayout_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIBaseLayout_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIBaseLayout_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIBaseLayout_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIBaseLayout_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIBaseLayout_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIBaseLayout_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIBaseLayout_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIBaseLayout_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIBaseLayout_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIBaseLayout_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIBaseLayout_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIBaseLayout_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIBaseLayout_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIBaseLayout_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIBaseLayout_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIBaseLayout_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIBaseLayout_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIBaseLayout_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIBaseLayout_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIBaseLayout_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIBaseLayout_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIBaseLayout_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIBaseLayout_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIBaseLayout_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIBaseLayout_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIBaseLayout_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIBaseLayout_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIBaseLayout_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIBaseLayout_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIBaseLayout_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIBaseLayout_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIBaseLayout_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIBaseLayout_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIBaseLayout_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIBaseLayout_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIBaseLayout_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIBaseLayout_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIBaseLayout_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIBaseLayout_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIBaseLayout_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIBaseLayout_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIBaseLayout_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIBaseLayout_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIBaseLayout_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIBaseLayout_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIBaseLayout_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIBaseLayout_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIBaseLayout_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIBaseLayout_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIBaseLayout_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIBaseLayout_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIBaseLayout_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIBaseLayout_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIBaseLayout_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIBaseLayout_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIBaseLayout_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIBaseLayout_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIBaseLayout_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIBaseLayout_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIBaseLayout_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIBaseLayout_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIBaseLayout_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIBaseLayout_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIBaseLayout_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIBaseLayout_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIBaseLayout_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIBaseLayout_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIBaseLayout_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIBaseLayout_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIBaseLayout_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIBaseLayout_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIBaseLayout_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIBaseLayout_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIBaseLayout_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIBaseLayout_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIBaseLayout_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIBaseLayout_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIBaseLayout_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIBaseLayout_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIBaseLayout_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIBaseLayout_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIBaseLayout_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIBaseLayout_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIBaseLayout_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIBaseLayout_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIBaseLayout_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIBaseLayout_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIBaseLayout_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIBaseLayout_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIBaseLayout_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIBaseLayout_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIBaseLayout_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UILinearLayout {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UILinearLayout_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(direction, size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UILinearLayout_create(direction, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UILinearLayout(__result);
		}
	}

	setMinSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._UILinearLayout_setMinSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getMinSize() {
		Module._UILinearLayout_getMinSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setPadding(left, top, right, bottom) {
		Module._UILinearLayout_setPadding(this.nativePtr, left, top, right, bottom);
	}

	setLeftPadding(val) {
		Module._UILinearLayout_setLeftPadding(this.nativePtr, val);
	}

	getLeftPadding() {
		var __result = Module._UILinearLayout_getLeftPadding(this.nativePtr);
		return __result;
	}

	setTopPadding(val) {
		Module._UILinearLayout_setTopPadding(this.nativePtr, val);
	}

	getTopPadding() {
		var __result = Module._UILinearLayout_getTopPadding(this.nativePtr);
		return __result;
	}

	setRightPadding(val) {
		Module._UILinearLayout_setRightPadding(this.nativePtr, val);
	}

	setBottomPadding(val) {
		Module._UILinearLayout_setBottomPadding(this.nativePtr, val);
	}

	getBottomPadding() {
		var __result = Module._UILinearLayout_getBottomPadding(this.nativePtr);
		return __result;
	}

	setDirection(direction) {
		Module._UILinearLayout_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._UILinearLayout_getDirection(this.nativePtr);
		return __result;
	}

	addUIElementWithLayoutParameter(child, gravity, margin) {
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UILinearLayout_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, gravity, marginBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementGravity(child, gravity) {
		Module._UILinearLayout_setUIElementGravity(this.nativePtr, child.nativePtr, gravity);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UILinearLayout_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UILinearLayout_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UILinearLayout_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UILinearLayout_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UILinearLayout_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UILinearLayout_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UILinearLayout_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UILinearLayout_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UILinearLayout_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UILinearLayout_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UILinearLayout_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UILinearLayout_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UILinearLayout_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UILinearLayout_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UILinearLayout_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UILinearLayout_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UILinearLayout_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILinearLayout_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UILinearLayout_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UILinearLayout_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UILinearLayout_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UILinearLayout_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UILinearLayout_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILinearLayout_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UILinearLayout_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UILinearLayout_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UILinearLayout_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UILinearLayout_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UILinearLayout_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UILinearLayout_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UILinearLayout_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UILinearLayout_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UILinearLayout_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UILinearLayout_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UILinearLayout_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UILinearLayout_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UILinearLayout_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UILinearLayout_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UILinearLayout_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UILinearLayout_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UILinearLayout_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UILinearLayout_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UILinearLayout_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UILinearLayout_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UILinearLayout_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UILinearLayout_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UILinearLayout_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UILinearLayout_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UILinearLayout_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UILinearLayout_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UILinearLayout_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UILinearLayout_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UILinearLayout_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UILinearLayout_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UILinearLayout_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UILinearLayout_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UILinearLayout_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UILinearLayout_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UILinearLayout_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UILinearLayout_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UILinearLayout_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UILinearLayout_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UILinearLayout_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UILinearLayout_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UILinearLayout_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UILinearLayout_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UILinearLayout_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UILinearLayout_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UILinearLayout_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UILinearLayout_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UILinearLayout_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UILinearLayout_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UILinearLayout_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UILinearLayout_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UILinearLayout_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UILinearLayout_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UILinearLayout_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UILinearLayout_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UILinearLayout_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UILinearLayout_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UILinearLayout_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UILinearLayout_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UILinearLayout_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UILinearLayout_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UILinearLayout_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UILinearLayout_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UILinearLayout_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UILinearLayout_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UILinearLayout_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UILinearLayout_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UILinearLayout_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UILinearLayout_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UILinearLayout_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UILinearLayout_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UILinearLayout_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UILinearLayout_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UILinearLayout_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UILinearLayout_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UILinearLayout_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UILinearLayout_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UILinearLayout_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UILinearLayout_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UILinearLayout_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UILinearLayout_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UILinearLayout_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UILinearLayout_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UILinearLayout_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UILinearLayout_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UILinearLayout_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UILinearLayout_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UILinearLayout_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UILinearLayout_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UILinearLayout_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UILinearLayout_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UILinearLayout_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UILinearLayout_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UILinearLayout_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UILinearLayout_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UILinearLayout_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UILinearLayout_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UILinearLayout_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UILinearLayout_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UILinearLayout_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UILinearLayout_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UILinearLayout_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UILinearLayout_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILinearLayout_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UILinearLayout_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UILinearLayout_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UILinearLayout_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UILinearLayout_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UILinearLayout_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UILinearLayout_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UILinearLayout_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UILinearLayout_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UILinearLayout_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UILinearLayout_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UILinearLayout_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UILinearLayout_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UILinearLayout_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UILinearLayout_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UILinearLayout_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UILinearLayout_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UILinearLayout_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UILinearLayout_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UILinearLayout_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UILinearLayout_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UILinearLayout_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UILinearLayout_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UILinearLayout_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UILinearLayout_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UILinearLayout_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UILinearLayout_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UILinearLayout_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UILinearLayout_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UILinearLayout_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UILinearLayout_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UILinearLayout_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UILinearLayout_activate(this.nativePtr);
	}

	deactivate() {
		Module._UILinearLayout_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UILinearLayout_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UIRelativeLayout {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UIRelativeLayout_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		var __result = Module._UIRelativeLayout_create(sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIRelativeLayout(__result);
		}
	}

	addUIElementWithLayoutParameter(child, align, relativeToElementName, margin) {
		const relativeToElementNameBuffer = Module._malloc(relativeToElementName.length+1);
		Module.stringToUTF8(relativeToElementName, relativeToElementNameBuffer, relativeToElementName.length+1);
		var pbmargin = PBVector4.create();
		pbmargin.x = margin.x;
		pbmargin.y = margin.y;
		pbmargin.z = margin.z;
		pbmargin.w = margin.w;
		const marginBuffer = PBVector4.buffer(pbmargin);
		var __result = Module._UIRelativeLayout_addUIElementWithLayoutParameter(this.nativePtr, child.nativePtr, align, relativeToElementNameBuffer, marginBuffer);
		Module._free(relativeToElementNameBuffer);
		PBVector4.freeBuffer(marginBuffer);
		return __result;
	}

	setUIElementAlign(child, align, relativeToElementName) {
		const relativeToElementNameBuffer = Module._malloc(relativeToElementName.length+1);
		Module.stringToUTF8(relativeToElementName, relativeToElementNameBuffer, relativeToElementName.length+1);
		Module._UIRelativeLayout_setUIElementAlign(this.nativePtr, child.nativePtr, align, relativeToElementNameBuffer);
		Module._free(relativeToElementNameBuffer);
	}

	setUIElementMargin(child, left, top, right, bottom) {
		Module._UIRelativeLayout_setUIElementMargin(this.nativePtr, child.nativePtr, left, top, right, bottom);
	}

	addProtectedChild(child) {
		Module._UIRelativeLayout_addProtectedChild(this.nativePtr, child.nativePtr);
	}

	setBackground(bgElement) {
		Module._UIRelativeLayout_setBackground(this.nativePtr, bgElement.nativePtr);
	}

	getBackground() {
		var __result = Module._UIRelativeLayout_getBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	invalidLayout() {
		Module._UIRelativeLayout_invalidLayout(this.nativePtr);
	}

	isLayoutDirty() {
		var __result = Module._UIRelativeLayout_isLayoutDirty(this.nativePtr);
		return __result;
	}

	markLayoutClean() {
		Module._UIRelativeLayout_markLayoutClean(this.nativePtr);
	}

	clone() {
		var __result = Module._UIRelativeLayout_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	setEnabled(enabled) {
		Module._UIRelativeLayout_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UIRelativeLayout_isEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsEnabled() {
		var __result = Module._UIRelativeLayout_isAncestorsEnabled(this.nativePtr);
		return __result;
	}

	isAncestorsVisible() {
		var __result = Module._UIRelativeLayout_isAncestorsVisible(this.nativePtr);
		return __result;
	}

	isVisible2() {
		var __result = Module._UIRelativeLayout_isVisible2(this.nativePtr);
		return __result;
	}

	setHighlighted(highlighted) {
		Module._UIRelativeLayout_setHighlighted(this.nativePtr, highlighted);
	}

	isHighlighted() {
		var __result = Module._UIRelativeLayout_isHighlighted(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UIRelativeLayout_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UIRelativeLayout_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRelativeLayout_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UIRelativeLayout_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UIRelativeLayout_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UIRelativeLayout_getPositionType(this.nativePtr);
		return __result;
	}

	setUseCustomSize(flag) {
		Module._UIRelativeLayout_setUseCustomSize(this.nativePtr, flag);
	}

	isUseCustomSize() {
		var __result = Module._UIRelativeLayout_isUseCustomSize(this.nativePtr);
		return __result;
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UIRelativeLayout_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getSizePercent() {
		Module._UIRelativeLayout_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizeType(type) {
		Module._UIRelativeLayout_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UIRelativeLayout_getSizeType(this.nativePtr);
		return __result;
	}

	getCustomSize() {
		Module._UIRelativeLayout_getCustomSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	hitTest(pt) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UIRelativeLayout_hitTest(this.nativePtr, ptBuffer);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UIRelativeLayout_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UIRelativeLayout_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UIRelativeLayout_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UIRelativeLayout_isFlippedY(this.nativePtr);
		return __result;
	}

	setLayoutWeight(weight) {
		Module._UIRelativeLayout_setLayoutWeight(this.nativePtr, weight);
	}

	getLayoutWeight() {
		var __result = Module._UIRelativeLayout_getLayoutWeight(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UIRelativeLayout_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UIRelativeLayout_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UIRelativeLayout_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UIRelativeLayout_getTopBoundary(this.nativePtr);
		return __result;
	}

	setTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UIRelativeLayout_setTouchEventListener(this.nativePtr, listenerPtr);
	}

	clearTouchEventListener() {
		Module._UIRelativeLayout_clearTouchEventListener(this.nativePtr);
	}

	setClickEventListener(listener) {
		let listenerFunc = CustomCallback_d01a233a67f2247fe7e5a092051b93f8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viff);
		Module._UIRelativeLayout_setClickEventListener(this.nativePtr, listenerPtr);
	}

	clearClickEventListener() {
		Module._UIRelativeLayout_clearClickEventListener(this.nativePtr);
	}

	getTouchBeganPosition() {
		Module._UIRelativeLayout_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UIRelativeLayout_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UIRelativeLayout_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	processTouchBegin(x, y, pointIndex) {
		var __result = Module._UIRelativeLayout_processTouchBegin(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchMove(x, y, pointIndex) {
		var __result = Module._UIRelativeLayout_processTouchMove(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processTouchEnd(x, y, pointIndex) {
		var __result = Module._UIRelativeLayout_processTouchEnd(this.nativePtr, x, y, pointIndex);
		return __result;
	}

	processInterceptTouchEvent(event, sender, x, y) {
		var __result = Module._UIRelativeLayout_processInterceptTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	propagateTouchEvent(event, sender, x, y) {
		var __result = Module._UIRelativeLayout_propagateTouchEvent(this.nativePtr, event, sender.nativePtr, x, y);
		return __result;
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UIRelativeLayout_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UIRelativeLayout_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	getUIElementParent() {
		var __result = Module._UIRelativeLayout_getUIElementParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UIElement(__result);
		}
	}

	getCanvas() {
		var __result = Module._UIRelativeLayout_getCanvas(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Canvas(__result);
		}
	}

	setForceInterceptTouchEvent(flag) {
		Module._UIRelativeLayout_setForceInterceptTouchEvent(this.nativePtr, flag);
	}

	isForceInterceptTouchEvent() {
		var __result = Module._UIRelativeLayout_isForceInterceptTouchEvent(this.nativePtr);
		return __result;
	}

	setScaleX(scaleX) {
		Module._UIRelativeLayout_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UIRelativeLayout_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UIRelativeLayout_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UIRelativeLayout_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UIRelativeLayout_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UIRelativeLayout_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UIRelativeLayout_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UIRelativeLayout_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UIRelativeLayout_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UIRelativeLayout_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UIRelativeLayout_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UIRelativeLayout_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UIRelativeLayout_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UIRelativeLayout_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UIRelativeLayout_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UIRelativeLayout_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UIRelativeLayout_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UIRelativeLayout_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UIRelativeLayout_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UIRelativeLayout_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UIRelativeLayout_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UIRelativeLayout_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UIRelativeLayout_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UIRelativeLayout_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UIRelativeLayout_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UIRelativeLayout_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UIRelativeLayout_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UIRelativeLayout_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UIRelativeLayout_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UIRelativeLayout_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UIRelativeLayout_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UIRelativeLayout_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UIRelativeLayout_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UIRelativeLayout_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UIRelativeLayout_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UIRelativeLayout_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UIRelativeLayout_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UIRelativeLayout_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UIRelativeLayout_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UIRelativeLayout_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UIRelativeLayout_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UIRelativeLayout_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UIRelativeLayout_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UIRelativeLayout_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UIRelativeLayout_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UIRelativeLayout_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UIRelativeLayout_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UIRelativeLayout_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UIRelativeLayout_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UIRelativeLayout_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UIRelativeLayout_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UIRelativeLayout_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UIRelativeLayout_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UIRelativeLayout_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UIRelativeLayout_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UIRelativeLayout_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UIRelativeLayout_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UIRelativeLayout_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UIRelativeLayout_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UIRelativeLayout_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UIRelativeLayout_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UIRelativeLayout_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UIRelativeLayout_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UIRelativeLayout_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UIRelativeLayout_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UIRelativeLayout_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UIRelativeLayout_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UIRelativeLayout_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UIRelativeLayout_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UIRelativeLayout_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UIRelativeLayout_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UIRelativeLayout_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UIRelativeLayout_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UIRelativeLayout_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UIRelativeLayout_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UIRelativeLayout_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UIRelativeLayout_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UIRelativeLayout_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UIRelativeLayout_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UIRelativeLayout_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UIRelativeLayout_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UIRelativeLayout_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UIRelativeLayout_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UIRelativeLayout_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UIRelativeLayout_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UIRelativeLayout_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UIRelativeLayout_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UIRelativeLayout_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UIRelativeLayout_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UIRelativeLayout_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UIRelativeLayout_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UIRelativeLayout_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UIRelativeLayout_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UIRelativeLayout_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UIRelativeLayout_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UIRelativeLayout_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UIRelativeLayout_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UIRelativeLayout_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UIRelativeLayout_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UIRelativeLayout_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UIRelativeLayout_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UIRelativeLayout_activate(this.nativePtr);
	}

	deactivate() {
		Module._UIRelativeLayout_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UIRelativeLayout_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class AbstractCheckButton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._AbstractCheckButton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	loadTextures(background, backgroundSelected, cross, backgroundDisabled, frontCrossDisabled) {
		const backgroundBuffer = Module._malloc(background.length+1);
		Module.stringToUTF8(background, backgroundBuffer, background.length+1);
		const backgroundSelectedBuffer = Module._malloc(backgroundSelected.length+1);
		Module.stringToUTF8(backgroundSelected, backgroundSelectedBuffer, backgroundSelected.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		const backgroundDisabledBuffer = Module._malloc(backgroundDisabled.length+1);
		Module.stringToUTF8(backgroundDisabled, backgroundDisabledBuffer, backgroundDisabled.length+1);
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._AbstractCheckButton_loadTextures(this.nativePtr, backgroundBuffer, backgroundSelectedBuffer, crossBuffer, backgroundDisabledBuffer, frontCrossDisabledBuffer);
		Module._free(backgroundBuffer);
		Module._free(backgroundSelectedBuffer);
		Module._free(crossBuffer);
		Module._free(backgroundDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	loadTextureBackGround(backGround) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		Module._AbstractCheckButton_loadTextureBackGround(this.nativePtr, backGroundBuffer);
		Module._free(backGroundBuffer);
	}

	loadTextureBackGroundSelected(backGroundSelected) {
		const backGroundSelectedBuffer = Module._malloc(backGroundSelected.length+1);
		Module.stringToUTF8(backGroundSelected, backGroundSelectedBuffer, backGroundSelected.length+1);
		Module._AbstractCheckButton_loadTextureBackGroundSelected(this.nativePtr, backGroundSelectedBuffer);
		Module._free(backGroundSelectedBuffer);
	}

	loadTextureFrontCross(crossTextureName) {
		const crossTextureNameBuffer = Module._malloc(crossTextureName.length+1);
		Module.stringToUTF8(crossTextureName, crossTextureNameBuffer, crossTextureName.length+1);
		Module._AbstractCheckButton_loadTextureFrontCross(this.nativePtr, crossTextureNameBuffer);
		Module._free(crossTextureNameBuffer);
	}

	loadTextureBackGroundDisabled(backGroundDisabled) {
		const backGroundDisabledBuffer = Module._malloc(backGroundDisabled.length+1);
		Module.stringToUTF8(backGroundDisabled, backGroundDisabledBuffer, backGroundDisabled.length+1);
		Module._AbstractCheckButton_loadTextureBackGroundDisabled(this.nativePtr, backGroundDisabledBuffer);
		Module._free(backGroundDisabledBuffer);
	}

	loadTextureFrontCrossDisabled(frontCrossDisabled) {
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._AbstractCheckButton_loadTextureFrontCrossDisabled(this.nativePtr, frontCrossDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	isSelected() {
		var __result = Module._AbstractCheckButton_isSelected(this.nativePtr);
		return __result;
	}

	setSelected(selected) {
		Module._AbstractCheckButton_setSelected(this.nativePtr, selected);
	}

	setZoomScale(scale) {
		Module._AbstractCheckButton_setZoomScale(this.nativePtr, scale);
	}

	getZoomScale() {
		var __result = Module._AbstractCheckButton_getZoomScale(this.nativePtr);
		return __result;
	}

	getRendererBackground() {
		var __result = Module._AbstractCheckButton_getRendererBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundSelected() {
		var __result = Module._AbstractCheckButton_getRendererBackgroundSelected(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCross() {
		var __result = Module._AbstractCheckButton_getRendererFrontCross(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundDisabled() {
		var __result = Module._AbstractCheckButton_getRendererBackgroundDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCrossDisabled() {
		var __result = Module._AbstractCheckButton_getRendererFrontCrossDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setEnabled(enabled) {
		Module._AbstractCheckButton_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._AbstractCheckButton_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._AbstractCheckButton_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._AbstractCheckButton_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._AbstractCheckButton_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._AbstractCheckButton_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._AbstractCheckButton_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._AbstractCheckButton_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._AbstractCheckButton_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._AbstractCheckButton_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._AbstractCheckButton_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._AbstractCheckButton_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._AbstractCheckButton_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._AbstractCheckButton_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._AbstractCheckButton_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._AbstractCheckButton_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._AbstractCheckButton_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._AbstractCheckButton_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._AbstractCheckButton_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._AbstractCheckButton_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._AbstractCheckButton_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._AbstractCheckButton_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._AbstractCheckButton_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._AbstractCheckButton_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._AbstractCheckButton_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._AbstractCheckButton_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._AbstractCheckButton_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._AbstractCheckButton_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._AbstractCheckButton_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._AbstractCheckButton_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._AbstractCheckButton_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._AbstractCheckButton_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._AbstractCheckButton_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._AbstractCheckButton_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._AbstractCheckButton_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._AbstractCheckButton_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._AbstractCheckButton_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._AbstractCheckButton_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._AbstractCheckButton_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._AbstractCheckButton_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._AbstractCheckButton_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._AbstractCheckButton_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._AbstractCheckButton_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._AbstractCheckButton_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._AbstractCheckButton_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._AbstractCheckButton_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._AbstractCheckButton_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._AbstractCheckButton_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._AbstractCheckButton_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._AbstractCheckButton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._AbstractCheckButton_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._AbstractCheckButton_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._AbstractCheckButton_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._AbstractCheckButton_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._AbstractCheckButton_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._AbstractCheckButton_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._AbstractCheckButton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._AbstractCheckButton_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._AbstractCheckButton_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._AbstractCheckButton_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._AbstractCheckButton_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._AbstractCheckButton_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._AbstractCheckButton_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._AbstractCheckButton_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._AbstractCheckButton_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._AbstractCheckButton_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._AbstractCheckButton_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._AbstractCheckButton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._AbstractCheckButton_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._AbstractCheckButton_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._AbstractCheckButton_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._AbstractCheckButton_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._AbstractCheckButton_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._AbstractCheckButton_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._AbstractCheckButton_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._AbstractCheckButton_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._AbstractCheckButton_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._AbstractCheckButton_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._AbstractCheckButton_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._AbstractCheckButton_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._AbstractCheckButton_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._AbstractCheckButton_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._AbstractCheckButton_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._AbstractCheckButton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._AbstractCheckButton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._AbstractCheckButton_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._AbstractCheckButton_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._AbstractCheckButton_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._AbstractCheckButton_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._AbstractCheckButton_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._AbstractCheckButton_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._AbstractCheckButton_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._AbstractCheckButton_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._AbstractCheckButton_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._AbstractCheckButton_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._AbstractCheckButton_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._AbstractCheckButton_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._AbstractCheckButton_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._AbstractCheckButton_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._AbstractCheckButton_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._AbstractCheckButton_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._AbstractCheckButton_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._AbstractCheckButton_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._AbstractCheckButton_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._AbstractCheckButton_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._AbstractCheckButton_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._AbstractCheckButton_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._AbstractCheckButton_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._AbstractCheckButton_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._AbstractCheckButton_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._AbstractCheckButton_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._AbstractCheckButton_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._AbstractCheckButton_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._AbstractCheckButton_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._AbstractCheckButton_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._AbstractCheckButton_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._AbstractCheckButton_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._AbstractCheckButton_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._AbstractCheckButton_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._AbstractCheckButton_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._AbstractCheckButton_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._AbstractCheckButton_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._AbstractCheckButton_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._AbstractCheckButton_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._AbstractCheckButton_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._AbstractCheckButton_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._AbstractCheckButton_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._AbstractCheckButton_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._AbstractCheckButton_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._AbstractCheckButton_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._AbstractCheckButton_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._AbstractCheckButton_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._AbstractCheckButton_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._AbstractCheckButton_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._AbstractCheckButton_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._AbstractCheckButton_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._AbstractCheckButton_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._AbstractCheckButton_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._AbstractCheckButton_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._AbstractCheckButton_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._AbstractCheckButton_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._AbstractCheckButton_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._AbstractCheckButton_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._AbstractCheckButton_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._AbstractCheckButton_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._AbstractCheckButton_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._AbstractCheckButton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._AbstractCheckButton_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._AbstractCheckButton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._AbstractCheckButton_activate(this.nativePtr);
	}

	deactivate() {
		Module._AbstractCheckButton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._AbstractCheckButton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class CheckBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._CheckBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createFull(backGround, backGroundSelected, cross, backGroundDisabled, frontCrossDisabled) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		const backGroundSelectedBuffer = Module._malloc(backGroundSelected.length+1);
		Module.stringToUTF8(backGroundSelected, backGroundSelectedBuffer, backGroundSelected.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		const backGroundDisabledBuffer = Module._malloc(backGroundDisabled.length+1);
		Module.stringToUTF8(backGroundDisabled, backGroundDisabledBuffer, backGroundDisabled.length+1);
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		var __result = Module._CheckBox_createFull(backGroundBuffer, backGroundSelectedBuffer, crossBuffer, backGroundDisabledBuffer, frontCrossDisabledBuffer);
		Module._free(backGroundBuffer);
		Module._free(backGroundSelectedBuffer);
		Module._free(crossBuffer);
		Module._free(backGroundDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new CheckBox(__result);
		}
	}

	static create(backGround, cross) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		var __result = Module._CheckBox_create(backGroundBuffer, crossBuffer);
		Module._free(backGroundBuffer);
		Module._free(crossBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new CheckBox(__result);
		}
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_5b1a613d69b45b68f864b652e0f1db78_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._CheckBox_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._CheckBox_clearEventListeners(this.nativePtr);
	}

	getCheckBoxState() {
		var __result = Module._CheckBox_getCheckBoxState(this.nativePtr);
		return __result;
	}

	loadTextures(background, backgroundSelected, cross, backgroundDisabled, frontCrossDisabled) {
		const backgroundBuffer = Module._malloc(background.length+1);
		Module.stringToUTF8(background, backgroundBuffer, background.length+1);
		const backgroundSelectedBuffer = Module._malloc(backgroundSelected.length+1);
		Module.stringToUTF8(backgroundSelected, backgroundSelectedBuffer, backgroundSelected.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		const backgroundDisabledBuffer = Module._malloc(backgroundDisabled.length+1);
		Module.stringToUTF8(backgroundDisabled, backgroundDisabledBuffer, backgroundDisabled.length+1);
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._CheckBox_loadTextures(this.nativePtr, backgroundBuffer, backgroundSelectedBuffer, crossBuffer, backgroundDisabledBuffer, frontCrossDisabledBuffer);
		Module._free(backgroundBuffer);
		Module._free(backgroundSelectedBuffer);
		Module._free(crossBuffer);
		Module._free(backgroundDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	loadTextureBackGround(backGround) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		Module._CheckBox_loadTextureBackGround(this.nativePtr, backGroundBuffer);
		Module._free(backGroundBuffer);
	}

	loadTextureBackGroundSelected(backGroundSelected) {
		const backGroundSelectedBuffer = Module._malloc(backGroundSelected.length+1);
		Module.stringToUTF8(backGroundSelected, backGroundSelectedBuffer, backGroundSelected.length+1);
		Module._CheckBox_loadTextureBackGroundSelected(this.nativePtr, backGroundSelectedBuffer);
		Module._free(backGroundSelectedBuffer);
	}

	loadTextureFrontCross(crossTextureName) {
		const crossTextureNameBuffer = Module._malloc(crossTextureName.length+1);
		Module.stringToUTF8(crossTextureName, crossTextureNameBuffer, crossTextureName.length+1);
		Module._CheckBox_loadTextureFrontCross(this.nativePtr, crossTextureNameBuffer);
		Module._free(crossTextureNameBuffer);
	}

	loadTextureBackGroundDisabled(backGroundDisabled) {
		const backGroundDisabledBuffer = Module._malloc(backGroundDisabled.length+1);
		Module.stringToUTF8(backGroundDisabled, backGroundDisabledBuffer, backGroundDisabled.length+1);
		Module._CheckBox_loadTextureBackGroundDisabled(this.nativePtr, backGroundDisabledBuffer);
		Module._free(backGroundDisabledBuffer);
	}

	loadTextureFrontCrossDisabled(frontCrossDisabled) {
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._CheckBox_loadTextureFrontCrossDisabled(this.nativePtr, frontCrossDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	isSelected() {
		var __result = Module._CheckBox_isSelected(this.nativePtr);
		return __result;
	}

	setSelected(selected) {
		Module._CheckBox_setSelected(this.nativePtr, selected);
	}

	setZoomScale(scale) {
		Module._CheckBox_setZoomScale(this.nativePtr, scale);
	}

	getZoomScale() {
		var __result = Module._CheckBox_getZoomScale(this.nativePtr);
		return __result;
	}

	getRendererBackground() {
		var __result = Module._CheckBox_getRendererBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundSelected() {
		var __result = Module._CheckBox_getRendererBackgroundSelected(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCross() {
		var __result = Module._CheckBox_getRendererFrontCross(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundDisabled() {
		var __result = Module._CheckBox_getRendererBackgroundDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCrossDisabled() {
		var __result = Module._CheckBox_getRendererFrontCrossDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setEnabled(enabled) {
		Module._CheckBox_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._CheckBox_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._CheckBox_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._CheckBox_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._CheckBox_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._CheckBox_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._CheckBox_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._CheckBox_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._CheckBox_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._CheckBox_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._CheckBox_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._CheckBox_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._CheckBox_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._CheckBox_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._CheckBox_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._CheckBox_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._CheckBox_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._CheckBox_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._CheckBox_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._CheckBox_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._CheckBox_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._CheckBox_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._CheckBox_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._CheckBox_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._CheckBox_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._CheckBox_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._CheckBox_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._CheckBox_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._CheckBox_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._CheckBox_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._CheckBox_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._CheckBox_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._CheckBox_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._CheckBox_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._CheckBox_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._CheckBox_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._CheckBox_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._CheckBox_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._CheckBox_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._CheckBox_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._CheckBox_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._CheckBox_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._CheckBox_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._CheckBox_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._CheckBox_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._CheckBox_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._CheckBox_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._CheckBox_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._CheckBox_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._CheckBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._CheckBox_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._CheckBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._CheckBox_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._CheckBox_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._CheckBox_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._CheckBox_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._CheckBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._CheckBox_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._CheckBox_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._CheckBox_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._CheckBox_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._CheckBox_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._CheckBox_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._CheckBox_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._CheckBox_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._CheckBox_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._CheckBox_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._CheckBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._CheckBox_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._CheckBox_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._CheckBox_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._CheckBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._CheckBox_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._CheckBox_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._CheckBox_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._CheckBox_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._CheckBox_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._CheckBox_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._CheckBox_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._CheckBox_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._CheckBox_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._CheckBox_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._CheckBox_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._CheckBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._CheckBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._CheckBox_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._CheckBox_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._CheckBox_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._CheckBox_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._CheckBox_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._CheckBox_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._CheckBox_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._CheckBox_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._CheckBox_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._CheckBox_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._CheckBox_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._CheckBox_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._CheckBox_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._CheckBox_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._CheckBox_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._CheckBox_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._CheckBox_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._CheckBox_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._CheckBox_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._CheckBox_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._CheckBox_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._CheckBox_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._CheckBox_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._CheckBox_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._CheckBox_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._CheckBox_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._CheckBox_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._CheckBox_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._CheckBox_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._CheckBox_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._CheckBox_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._CheckBox_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._CheckBox_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._CheckBox_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._CheckBox_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._CheckBox_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._CheckBox_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._CheckBox_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._CheckBox_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._CheckBox_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._CheckBox_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._CheckBox_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._CheckBox_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._CheckBox_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._CheckBox_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._CheckBox_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._CheckBox_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._CheckBox_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._CheckBox_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._CheckBox_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._CheckBox_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._CheckBox_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._CheckBox_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._CheckBox_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._CheckBox_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._CheckBox_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._CheckBox_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._CheckBox_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._CheckBox_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._CheckBox_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._CheckBox_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._CheckBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._CheckBox_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._CheckBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._CheckBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._CheckBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._CheckBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class HBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._HBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._HBox_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new HBox(__result);
		}
	}

	updateContentSizeToFitChildren() {
		Module._HBox_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._HBox_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._HBox_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._HBox_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._HBox_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._HBox_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._HBox_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._HBox_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._HBox_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._HBox_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._HBox_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._HBox_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._HBox_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._HBox_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._HBox_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._HBox_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._HBox_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._HBox_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._HBox_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._HBox_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._HBox_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._HBox_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._HBox_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._HBox_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._HBox_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._HBox_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._HBox_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._HBox_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._HBox_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._HBox_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._HBox_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._HBox_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._HBox_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._HBox_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._HBox_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._HBox_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._HBox_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._HBox_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._HBox_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._HBox_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._HBox_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._HBox_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._HBox_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._HBox_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._HBox_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._HBox_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._HBox_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._HBox_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._HBox_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._HBox_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._HBox_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._HBox_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._HBox_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._HBox_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._HBox_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._HBox_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._HBox_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._HBox_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._HBox_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._HBox_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._HBox_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._HBox_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._HBox_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._HBox_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._HBox_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._HBox_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._HBox_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._HBox_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._HBox_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._HBox_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._HBox_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._HBox_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._HBox_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._HBox_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._HBox_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._HBox_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._HBox_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._HBox_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._HBox_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._HBox_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._HBox_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._HBox_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._HBox_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._HBox_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._HBox_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._HBox_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._HBox_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._HBox_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._HBox_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._HBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._HBox_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._HBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._HBox_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._HBox_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._HBox_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._HBox_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._HBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._HBox_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._HBox_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._HBox_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._HBox_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._HBox_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._HBox_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._HBox_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._HBox_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._HBox_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._HBox_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._HBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._HBox_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._HBox_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._HBox_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._HBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._HBox_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._HBox_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._HBox_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._HBox_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._HBox_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._HBox_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._HBox_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._HBox_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._HBox_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._HBox_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._HBox_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._HBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._HBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._HBox_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._HBox_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._HBox_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._HBox_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._HBox_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._HBox_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._HBox_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._HBox_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._HBox_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._HBox_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._HBox_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._HBox_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._HBox_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._HBox_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._HBox_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._HBox_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._HBox_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._HBox_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._HBox_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._HBox_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._HBox_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._HBox_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._HBox_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._HBox_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._HBox_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._HBox_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._HBox_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._HBox_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._HBox_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._HBox_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._HBox_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._HBox_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._HBox_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._HBox_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._HBox_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._HBox_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._HBox_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._HBox_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._HBox_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._HBox_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._HBox_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._HBox_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._HBox_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._HBox_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._HBox_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._HBox_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._HBox_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._HBox_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._HBox_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._HBox_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._HBox_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._HBox_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._HBox_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._HBox_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._HBox_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._HBox_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._HBox_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._HBox_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._HBox_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._HBox_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._HBox_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._HBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._HBox_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._HBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._HBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._HBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._HBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class UILayout {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._UILayout_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._UILayout_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new UILayout(__result);
		}
	}

	updateContentSizeToFitChildren() {
		Module._UILayout_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._UILayout_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILayout_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._UILayout_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._UILayout_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._UILayout_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UILayout_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._UILayout_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._UILayout_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._UILayout_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._UILayout_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._UILayout_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILayout_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._UILayout_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._UILayout_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._UILayout_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._UILayout_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._UILayout_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._UILayout_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._UILayout_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._UILayout_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._UILayout_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._UILayout_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._UILayout_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._UILayout_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._UILayout_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._UILayout_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._UILayout_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._UILayout_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._UILayout_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._UILayout_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._UILayout_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._UILayout_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._UILayout_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._UILayout_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._UILayout_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._UILayout_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._UILayout_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._UILayout_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._UILayout_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._UILayout_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._UILayout_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._UILayout_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._UILayout_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._UILayout_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._UILayout_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._UILayout_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._UILayout_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._UILayout_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._UILayout_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._UILayout_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._UILayout_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._UILayout_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._UILayout_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._UILayout_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILayout_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._UILayout_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._UILayout_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._UILayout_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._UILayout_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._UILayout_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._UILayout_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._UILayout_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._UILayout_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._UILayout_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._UILayout_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._UILayout_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._UILayout_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._UILayout_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._UILayout_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._UILayout_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._UILayout_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._UILayout_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._UILayout_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._UILayout_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._UILayout_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._UILayout_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._UILayout_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._UILayout_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._UILayout_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._UILayout_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._UILayout_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._UILayout_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._UILayout_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._UILayout_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._UILayout_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._UILayout_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._UILayout_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._UILayout_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._UILayout_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._UILayout_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._UILayout_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._UILayout_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._UILayout_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._UILayout_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._UILayout_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._UILayout_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._UILayout_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._UILayout_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._UILayout_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._UILayout_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._UILayout_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._UILayout_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._UILayout_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._UILayout_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._UILayout_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._UILayout_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._UILayout_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._UILayout_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._UILayout_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._UILayout_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._UILayout_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._UILayout_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._UILayout_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._UILayout_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._UILayout_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._UILayout_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._UILayout_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._UILayout_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._UILayout_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._UILayout_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._UILayout_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._UILayout_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._UILayout_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._UILayout_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._UILayout_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._UILayout_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._UILayout_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._UILayout_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._UILayout_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._UILayout_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._UILayout_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._UILayout_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._UILayout_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._UILayout_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._UILayout_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._UILayout_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._UILayout_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._UILayout_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._UILayout_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._UILayout_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._UILayout_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._UILayout_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._UILayout_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._UILayout_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._UILayout_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._UILayout_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._UILayout_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._UILayout_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._UILayout_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._UILayout_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._UILayout_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._UILayout_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._UILayout_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._UILayout_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._UILayout_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._UILayout_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._UILayout_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._UILayout_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._UILayout_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._UILayout_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._UILayout_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._UILayout_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._UILayout_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._UILayout_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._UILayout_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._UILayout_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._UILayout_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._UILayout_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._UILayout_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._UILayout_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._UILayout_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._UILayout_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._UILayout_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._UILayout_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._UILayout_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._UILayout_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._UILayout_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._UILayout_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._UILayout_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._UILayout_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._UILayout_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._UILayout_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._UILayout_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._UILayout_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._UILayout_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._UILayout_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._UILayout_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._UILayout_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._UILayout_activate(this.nativePtr);
	}

	deactivate() {
		Module._UILayout_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._UILayout_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class ListView {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._ListView_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._ListView_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new ListView(__result);
		}
	}

	jumpToItem(itemIndex, positionRatioInView, itemAnchorPoint) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		Module._ListView_jumpToItem(this.nativePtr, itemIndex, positionRatioInViewBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
	}

	scrollToItem(itemIndex, positionRatioInView, itemAnchorPoint, timeInMicroSec) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		Module._ListView_scrollToItem(this.nativePtr, itemIndex, positionRatioInViewBuffer, itemAnchorPointBuffer, timeInMicroSec);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
	}

	addListViewEventListener(listener) {
		let listenerFunc = CustomCallback_4670d14005585364472a348373b4fd6b_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._ListView_addListViewEventListener(this.nativePtr, listenerPtr);
	}

	clearListViewEventListeners() {
		Module._ListView_clearListViewEventListeners(this.nativePtr);
	}

	setItemModel(model) {
		Module._ListView_setItemModel(this.nativePtr, model.nativePtr);
	}

	pushBackDefaultItem() {
		Module._ListView_pushBackDefaultItem(this.nativePtr);
	}

	insertDefaultItem(index) {
		Module._ListView_insertDefaultItem(this.nativePtr, index);
	}

	pushBackCustomItem(item) {
		Module._ListView_pushBackCustomItem(this.nativePtr, item.nativePtr);
	}

	insertCustomItem(item, index) {
		Module._ListView_insertCustomItem(this.nativePtr, item.nativePtr, index);
	}

	removeLastItem() {
		Module._ListView_removeLastItem(this.nativePtr);
	}

	removeItem(index) {
		Module._ListView_removeItem(this.nativePtr, index);
	}

	removeAllItems() {
		Module._ListView_removeAllItems(this.nativePtr);
	}

	getItemCount() {
		var __result = Module._ListView_getItemCount(this.nativePtr);
		return __result;
	}

	getItem(index) {
		var __result = Module._ListView_getItem(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getIndex(item) {
		var __result = Module._ListView_getIndex(this.nativePtr, item.nativePtr);
		return __result;
	}

	setGravity(gravity) {
		Module._ListView_setGravity(this.nativePtr, gravity);
	}

	setMagneticType(magneticType) {
		Module._ListView_setMagneticType(this.nativePtr, magneticType);
	}

	getMagneticType() {
		var __result = Module._ListView_getMagneticType(this.nativePtr);
		return __result;
	}

	setMagneticAllowedOutOfBoundary(magneticAllowedOutOfBoundary) {
		Module._ListView_setMagneticAllowedOutOfBoundary(this.nativePtr, magneticAllowedOutOfBoundary);
	}

	getMagneticAllowedOutOfBoundary() {
		var __result = Module._ListView_getMagneticAllowedOutOfBoundary(this.nativePtr);
		return __result;
	}

	setItemsMargin(margin) {
		Module._ListView_setItemsMargin(this.nativePtr, margin);
	}

	getItemsMargin() {
		var __result = Module._ListView_getItemsMargin(this.nativePtr);
		return __result;
	}

	setPadding(l, t, r, b) {
		Module._ListView_setPadding(this.nativePtr, l, t, r, b);
	}

	setLeftPadding(leftPadding) {
		Module._ListView_setLeftPadding(this.nativePtr, leftPadding);
	}

	setTopPadding(topPadding) {
		Module._ListView_setTopPadding(this.nativePtr, topPadding);
	}

	setRightPadding(rightPadding) {
		Module._ListView_setRightPadding(this.nativePtr, rightPadding);
	}

	setBottomPadding(bottomPadding) {
		Module._ListView_setBottomPadding(this.nativePtr, bottomPadding);
	}

	getLeftPadding() {
		var __result = Module._ListView_getLeftPadding(this.nativePtr);
		return __result;
	}

	getTopPadding() {
		var __result = Module._ListView_getTopPadding(this.nativePtr);
		return __result;
	}

	getRightPadding() {
		var __result = Module._ListView_getRightPadding(this.nativePtr);
		return __result;
	}

	getBottomPadding() {
		var __result = Module._ListView_getBottomPadding(this.nativePtr);
		return __result;
	}

	setScrollDuration(duration) {
		Module._ListView_setScrollDuration(this.nativePtr, duration);
	}

	getScrollDuration() {
		var __result = Module._ListView_getScrollDuration(this.nativePtr);
		return __result;
	}

	getClosestItemToPosition(targetPosition, itemAnchorPoint) {
		var pbtargetPosition = PBVector2.create();
		pbtargetPosition.x = targetPosition.x;
		pbtargetPosition.y = targetPosition.y;
		const targetPositionBuffer = PBVector2.buffer(pbtargetPosition);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		var __result = Module._ListView_getClosestItemToPosition(this.nativePtr, targetPositionBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(targetPositionBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getClosestItemToPositionInCurrentView(positionRatioInView, itemAnchorPoint) {
		var pbpositionRatioInView = PBVector2.create();
		pbpositionRatioInView.x = positionRatioInView.x;
		pbpositionRatioInView.y = positionRatioInView.y;
		const positionRatioInViewBuffer = PBVector2.buffer(pbpositionRatioInView);
		var pbitemAnchorPoint = PBVector2.create();
		pbitemAnchorPoint.x = itemAnchorPoint.x;
		pbitemAnchorPoint.y = itemAnchorPoint.y;
		const itemAnchorPointBuffer = PBVector2.buffer(pbitemAnchorPoint);
		var __result = Module._ListView_getClosestItemToPositionInCurrentView(this.nativePtr, positionRatioInViewBuffer, itemAnchorPointBuffer);
		PBVector2.freeBuffer(positionRatioInViewBuffer);
		PBVector2.freeBuffer(itemAnchorPointBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getCenterItemInCurrentView() {
		var __result = Module._ListView_getCenterItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getLeftmostItemInCurrentView() {
		var __result = Module._ListView_getLeftmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getRightmostItemInCurrentView() {
		var __result = Module._ListView_getRightmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getTopmostItemInCurrentView() {
		var __result = Module._ListView_getTopmostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getBottommostItemInCurrentView() {
		var __result = Module._ListView_getBottommostItemInCurrentView(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	getCurSelectedIndex() {
		var __result = Module._ListView_getCurSelectedIndex(this.nativePtr);
		return __result;
	}

	setCurSelectedIndex(itemIndex) {
		Module._ListView_setCurSelectedIndex(this.nativePtr, itemIndex);
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_8364b577fc9cbf6a85be4cfa0effd4fb_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._ListView_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._ListView_clearEventListeners(this.nativePtr);
	}

	setDirection(dir) {
		Module._ListView_setDirection(this.nativePtr, dir);
	}

	getDirection() {
		var __result = Module._ListView_getDirection(this.nativePtr);
		return __result;
	}

	stopScroll() {
		Module._ListView_stopScroll(this.nativePtr);
	}

	stopAutoScroll() {
		Module._ListView_stopAutoScroll(this.nativePtr);
	}

	stopOverallScroll() {
		Module._ListView_stopOverallScroll(this.nativePtr);
	}

	scrollToBottom(timeInMicroSec, attenuated) {
		Module._ListView_scrollToBottom(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTop(timeInMicroSec, attenuated) {
		Module._ListView_scrollToTop(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToLeft(timeInMicroSec, attenuated) {
		Module._ListView_scrollToLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToRight(timeInMicroSec, attenuated) {
		Module._ListView_scrollToRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopLeft(timeInMicroSec, attenuated) {
		Module._ListView_scrollToTopLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopRight(timeInMicroSec, attenuated) {
		Module._ListView_scrollToTopRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomLeft(timeInMicroSec, attenuated) {
		Module._ListView_scrollToBottomLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomRight(timeInMicroSec, attenuated) {
		Module._ListView_scrollToBottomRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToPercentVertical(percent, timeInMicroSec, attenuated) {
		Module._ListView_scrollToPercentVertical(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentHorizontal(percent, timeInMicroSec, attenuated) {
		Module._ListView_scrollToPercentHorizontal(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentBothDirection(percent, timeInMicroSec, attenuated) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._ListView_scrollToPercentBothDirection(this.nativePtr, percentBuffer, timeInMicroSec, attenuated);
		PBVector2.freeBuffer(percentBuffer);
	}

	getScrolledPercentVertical() {
		var __result = Module._ListView_getScrolledPercentVertical(this.nativePtr);
		return __result;
	}

	getScrolledPercentHorizontal() {
		var __result = Module._ListView_getScrolledPercentHorizontal(this.nativePtr);
		return __result;
	}

	getScrolledPercentBothDirection() {
		Module._ListView_getScrolledPercentBothDirection(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	jumpToBottom() {
		Module._ListView_jumpToBottom(this.nativePtr);
	}

	jumpToTop() {
		Module._ListView_jumpToTop(this.nativePtr);
	}

	jumpToLeft() {
		Module._ListView_jumpToLeft(this.nativePtr);
	}

	jumpToRight() {
		Module._ListView_jumpToRight(this.nativePtr);
	}

	jumpToTopLeft() {
		Module._ListView_jumpToTopLeft(this.nativePtr);
	}

	jumpToTopRight() {
		Module._ListView_jumpToTopRight(this.nativePtr);
	}

	jumpToBottomLeft() {
		Module._ListView_jumpToBottomLeft(this.nativePtr);
	}

	jumpToBottomRight() {
		Module._ListView_jumpToBottomRight(this.nativePtr);
	}

	jumpToPercentVertical(percent) {
		Module._ListView_jumpToPercentVertical(this.nativePtr, percent);
	}

	jumpToPercentHorizontal(percent) {
		Module._ListView_jumpToPercentHorizontal(this.nativePtr, percent);
	}

	jumpToPercentBothDirection(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._ListView_jumpToPercentBothDirection(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setInnerContainerSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._ListView_setInnerContainerSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getInnerContainerSize() {
		Module._ListView_getInnerContainerSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setInnerContainerPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._ListView_setInnerContainerPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getInnerContainerPosition() {
		Module._ListView_getInnerContainerPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getContentOffset() {
		Module._ListView_getContentOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setBounceEnabled(enabled) {
		Module._ListView_setBounceEnabled(this.nativePtr, enabled);
	}

	isBounceEnabled() {
		var __result = Module._ListView_isBounceEnabled(this.nativePtr);
		return __result;
	}

	setInertiaScrollEnabled(enabled) {
		Module._ListView_setInertiaScrollEnabled(this.nativePtr, enabled);
	}

	isInertiaScrollEnabled() {
		var __result = Module._ListView_isInertiaScrollEnabled(this.nativePtr);
		return __result;
	}

	setTouchTotalTimeThreshold(touchTotalTimeThreshold) {
		Module._ListView_setTouchTotalTimeThreshold(this.nativePtr, touchTotalTimeThreshold);
	}

	getTouchTotalTimeThreshold() {
		var __result = Module._ListView_getTouchTotalTimeThreshold(this.nativePtr);
		return __result;
	}

	isScrolling() {
		var __result = Module._ListView_isScrolling(this.nativePtr);
		return __result;
	}

	isAutoScrolling() {
		var __result = Module._ListView_isAutoScrolling(this.nativePtr);
		return __result;
	}

	updateContentSizeToFitChildren() {
		Module._ListView_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._ListView_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._ListView_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._ListView_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._ListView_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._ListView_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._ListView_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._ListView_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._ListView_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._ListView_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._ListView_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._ListView_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._ListView_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._ListView_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._ListView_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._ListView_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._ListView_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._ListView_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._ListView_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._ListView_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._ListView_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._ListView_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._ListView_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._ListView_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._ListView_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._ListView_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._ListView_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._ListView_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._ListView_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._ListView_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._ListView_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._ListView_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._ListView_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._ListView_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._ListView_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._ListView_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._ListView_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._ListView_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._ListView_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._ListView_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._ListView_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._ListView_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._ListView_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._ListView_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._ListView_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._ListView_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._ListView_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._ListView_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._ListView_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._ListView_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._ListView_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._ListView_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._ListView_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._ListView_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._ListView_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._ListView_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._ListView_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._ListView_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._ListView_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._ListView_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._ListView_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._ListView_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._ListView_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._ListView_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._ListView_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._ListView_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._ListView_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._ListView_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._ListView_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._ListView_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._ListView_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._ListView_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._ListView_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._ListView_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._ListView_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._ListView_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._ListView_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._ListView_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._ListView_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._ListView_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._ListView_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._ListView_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._ListView_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._ListView_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._ListView_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._ListView_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._ListView_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._ListView_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._ListView_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._ListView_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._ListView_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._ListView_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._ListView_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._ListView_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._ListView_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._ListView_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._ListView_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._ListView_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._ListView_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._ListView_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._ListView_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._ListView_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._ListView_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._ListView_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._ListView_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._ListView_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._ListView_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._ListView_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._ListView_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._ListView_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._ListView_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._ListView_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._ListView_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._ListView_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._ListView_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._ListView_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._ListView_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._ListView_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._ListView_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._ListView_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._ListView_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._ListView_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._ListView_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._ListView_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._ListView_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._ListView_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._ListView_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._ListView_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._ListView_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._ListView_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._ListView_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._ListView_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._ListView_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._ListView_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._ListView_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._ListView_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._ListView_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._ListView_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._ListView_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._ListView_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._ListView_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._ListView_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._ListView_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._ListView_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._ListView_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._ListView_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._ListView_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._ListView_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._ListView_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._ListView_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._ListView_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._ListView_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._ListView_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._ListView_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._ListView_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._ListView_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._ListView_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._ListView_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._ListView_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._ListView_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._ListView_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._ListView_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._ListView_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._ListView_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._ListView_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._ListView_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._ListView_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._ListView_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._ListView_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._ListView_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._ListView_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._ListView_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._ListView_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._ListView_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._ListView_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._ListView_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._ListView_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._ListView_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._ListView_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._ListView_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._ListView_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._ListView_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._ListView_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._ListView_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._ListView_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._ListView_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._ListView_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._ListView_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._ListView_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._ListView_activate(this.nativePtr);
	}

	deactivate() {
		Module._ListView_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._ListView_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class LoadingBar {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._LoadingBar_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._LoadingBar_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LoadingBar(__result);
		}
	}

	static createWithTexture(textureName) {
		const textureNameBuffer = Module._malloc(textureName.length+1);
		Module.stringToUTF8(textureName, textureNameBuffer, textureName.length+1);
		var __result = Module._LoadingBar_createWithTexture(textureNameBuffer);
		Module._free(textureNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LoadingBar(__result);
		}
	}

	setDirection(direction) {
		Module._LoadingBar_setDirection(this.nativePtr, direction);
	}

	getDirection() {
		var __result = Module._LoadingBar_getDirection(this.nativePtr);
		return __result;
	}

	loadTexture(texture) {
		const textureBuffer = Module._malloc(texture.length+1);
		Module.stringToUTF8(texture, textureBuffer, texture.length+1);
		Module._LoadingBar_loadTexture(this.nativePtr, textureBuffer);
		Module._free(textureBuffer);
	}

	getPercent() {
		var __result = Module._LoadingBar_getPercent(this.nativePtr);
		return __result;
	}

	setPercent(percent) {
		Module._LoadingBar_setPercent(this.nativePtr, percent);
	}

	setScale9Enabled(enabled) {
		Module._LoadingBar_setScale9Enabled(this.nativePtr, enabled);
	}

	isScale9Enabled() {
		var __result = Module._LoadingBar_isScale9Enabled(this.nativePtr);
		return __result;
	}

	setCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._LoadingBar_setCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getCapInsets() {
		Module._LoadingBar_getCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setEnabled(enabled) {
		Module._LoadingBar_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._LoadingBar_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._LoadingBar_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._LoadingBar_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._LoadingBar_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._LoadingBar_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._LoadingBar_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._LoadingBar_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._LoadingBar_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._LoadingBar_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._LoadingBar_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._LoadingBar_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._LoadingBar_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._LoadingBar_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._LoadingBar_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._LoadingBar_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._LoadingBar_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._LoadingBar_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._LoadingBar_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._LoadingBar_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._LoadingBar_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._LoadingBar_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._LoadingBar_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._LoadingBar_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._LoadingBar_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._LoadingBar_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._LoadingBar_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._LoadingBar_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._LoadingBar_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._LoadingBar_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._LoadingBar_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._LoadingBar_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._LoadingBar_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._LoadingBar_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._LoadingBar_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._LoadingBar_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._LoadingBar_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._LoadingBar_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._LoadingBar_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._LoadingBar_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._LoadingBar_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._LoadingBar_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._LoadingBar_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._LoadingBar_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._LoadingBar_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._LoadingBar_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._LoadingBar_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._LoadingBar_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._LoadingBar_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._LoadingBar_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._LoadingBar_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._LoadingBar_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._LoadingBar_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._LoadingBar_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._LoadingBar_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._LoadingBar_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._LoadingBar_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._LoadingBar_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._LoadingBar_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._LoadingBar_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._LoadingBar_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._LoadingBar_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._LoadingBar_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._LoadingBar_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._LoadingBar_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._LoadingBar_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._LoadingBar_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._LoadingBar_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._LoadingBar_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._LoadingBar_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._LoadingBar_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._LoadingBar_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._LoadingBar_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._LoadingBar_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._LoadingBar_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._LoadingBar_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._LoadingBar_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._LoadingBar_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._LoadingBar_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._LoadingBar_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._LoadingBar_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._LoadingBar_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._LoadingBar_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._LoadingBar_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._LoadingBar_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._LoadingBar_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._LoadingBar_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._LoadingBar_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._LoadingBar_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._LoadingBar_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._LoadingBar_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._LoadingBar_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._LoadingBar_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._LoadingBar_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._LoadingBar_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._LoadingBar_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._LoadingBar_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._LoadingBar_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._LoadingBar_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._LoadingBar_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._LoadingBar_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._LoadingBar_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._LoadingBar_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._LoadingBar_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._LoadingBar_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._LoadingBar_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._LoadingBar_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._LoadingBar_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._LoadingBar_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._LoadingBar_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._LoadingBar_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._LoadingBar_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._LoadingBar_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._LoadingBar_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._LoadingBar_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._LoadingBar_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._LoadingBar_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._LoadingBar_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._LoadingBar_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._LoadingBar_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._LoadingBar_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._LoadingBar_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._LoadingBar_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._LoadingBar_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._LoadingBar_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._LoadingBar_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._LoadingBar_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._LoadingBar_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._LoadingBar_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._LoadingBar_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._LoadingBar_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._LoadingBar_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._LoadingBar_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._LoadingBar_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._LoadingBar_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._LoadingBar_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._LoadingBar_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._LoadingBar_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._LoadingBar_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._LoadingBar_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._LoadingBar_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._LoadingBar_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._LoadingBar_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._LoadingBar_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._LoadingBar_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._LoadingBar_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._LoadingBar_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._LoadingBar_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._LoadingBar_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._LoadingBar_activate(this.nativePtr);
	}

	deactivate() {
		Module._LoadingBar_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._LoadingBar_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RadioButton {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RadioButton_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createFull(backGround, backGroundSelected, cross, backGroundDisabled, frontCrossDisabled) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		const backGroundSelectedBuffer = Module._malloc(backGroundSelected.length+1);
		Module.stringToUTF8(backGroundSelected, backGroundSelectedBuffer, backGroundSelected.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		const backGroundDisabledBuffer = Module._malloc(backGroundDisabled.length+1);
		Module.stringToUTF8(backGroundDisabled, backGroundDisabledBuffer, backGroundDisabled.length+1);
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		var __result = Module._RadioButton_createFull(backGroundBuffer, backGroundSelectedBuffer, crossBuffer, backGroundDisabledBuffer, frontCrossDisabledBuffer);
		Module._free(backGroundBuffer);
		Module._free(backGroundSelectedBuffer);
		Module._free(crossBuffer);
		Module._free(backGroundDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RadioButton(__result);
		}
	}

	static create(backGround, cross) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		var __result = Module._RadioButton_create(backGroundBuffer, crossBuffer);
		Module._free(backGroundBuffer);
		Module._free(crossBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RadioButton(__result);
		}
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_6e156f4e5fd29996fd8ec20ed14289b8_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._RadioButton_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._RadioButton_clearEventListeners(this.nativePtr);
	}

	loadTextures(background, backgroundSelected, cross, backgroundDisabled, frontCrossDisabled) {
		const backgroundBuffer = Module._malloc(background.length+1);
		Module.stringToUTF8(background, backgroundBuffer, background.length+1);
		const backgroundSelectedBuffer = Module._malloc(backgroundSelected.length+1);
		Module.stringToUTF8(backgroundSelected, backgroundSelectedBuffer, backgroundSelected.length+1);
		const crossBuffer = Module._malloc(cross.length+1);
		Module.stringToUTF8(cross, crossBuffer, cross.length+1);
		const backgroundDisabledBuffer = Module._malloc(backgroundDisabled.length+1);
		Module.stringToUTF8(backgroundDisabled, backgroundDisabledBuffer, backgroundDisabled.length+1);
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._RadioButton_loadTextures(this.nativePtr, backgroundBuffer, backgroundSelectedBuffer, crossBuffer, backgroundDisabledBuffer, frontCrossDisabledBuffer);
		Module._free(backgroundBuffer);
		Module._free(backgroundSelectedBuffer);
		Module._free(crossBuffer);
		Module._free(backgroundDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	loadTextureBackGround(backGround) {
		const backGroundBuffer = Module._malloc(backGround.length+1);
		Module.stringToUTF8(backGround, backGroundBuffer, backGround.length+1);
		Module._RadioButton_loadTextureBackGround(this.nativePtr, backGroundBuffer);
		Module._free(backGroundBuffer);
	}

	loadTextureBackGroundSelected(backGroundSelected) {
		const backGroundSelectedBuffer = Module._malloc(backGroundSelected.length+1);
		Module.stringToUTF8(backGroundSelected, backGroundSelectedBuffer, backGroundSelected.length+1);
		Module._RadioButton_loadTextureBackGroundSelected(this.nativePtr, backGroundSelectedBuffer);
		Module._free(backGroundSelectedBuffer);
	}

	loadTextureFrontCross(crossTextureName) {
		const crossTextureNameBuffer = Module._malloc(crossTextureName.length+1);
		Module.stringToUTF8(crossTextureName, crossTextureNameBuffer, crossTextureName.length+1);
		Module._RadioButton_loadTextureFrontCross(this.nativePtr, crossTextureNameBuffer);
		Module._free(crossTextureNameBuffer);
	}

	loadTextureBackGroundDisabled(backGroundDisabled) {
		const backGroundDisabledBuffer = Module._malloc(backGroundDisabled.length+1);
		Module.stringToUTF8(backGroundDisabled, backGroundDisabledBuffer, backGroundDisabled.length+1);
		Module._RadioButton_loadTextureBackGroundDisabled(this.nativePtr, backGroundDisabledBuffer);
		Module._free(backGroundDisabledBuffer);
	}

	loadTextureFrontCrossDisabled(frontCrossDisabled) {
		const frontCrossDisabledBuffer = Module._malloc(frontCrossDisabled.length+1);
		Module.stringToUTF8(frontCrossDisabled, frontCrossDisabledBuffer, frontCrossDisabled.length+1);
		Module._RadioButton_loadTextureFrontCrossDisabled(this.nativePtr, frontCrossDisabledBuffer);
		Module._free(frontCrossDisabledBuffer);
	}

	isSelected() {
		var __result = Module._RadioButton_isSelected(this.nativePtr);
		return __result;
	}

	setSelected(selected) {
		Module._RadioButton_setSelected(this.nativePtr, selected);
	}

	setZoomScale(scale) {
		Module._RadioButton_setZoomScale(this.nativePtr, scale);
	}

	getZoomScale() {
		var __result = Module._RadioButton_getZoomScale(this.nativePtr);
		return __result;
	}

	getRendererBackground() {
		var __result = Module._RadioButton_getRendererBackground(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundSelected() {
		var __result = Module._RadioButton_getRendererBackgroundSelected(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCross() {
		var __result = Module._RadioButton_getRendererFrontCross(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererBackgroundDisabled() {
		var __result = Module._RadioButton_getRendererBackgroundDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getRendererFrontCrossDisabled() {
		var __result = Module._RadioButton_getRendererFrontCrossDisabled(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setEnabled(enabled) {
		Module._RadioButton_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._RadioButton_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._RadioButton_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._RadioButton_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._RadioButton_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._RadioButton_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._RadioButton_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._RadioButton_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._RadioButton_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._RadioButton_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._RadioButton_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._RadioButton_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._RadioButton_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._RadioButton_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._RadioButton_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RadioButton_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._RadioButton_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._RadioButton_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._RadioButton_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._RadioButton_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._RadioButton_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._RadioButton_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._RadioButton_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._RadioButton_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._RadioButton_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._RadioButton_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RadioButton_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._RadioButton_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._RadioButton_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._RadioButton_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._RadioButton_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._RadioButton_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._RadioButton_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._RadioButton_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._RadioButton_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._RadioButton_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._RadioButton_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._RadioButton_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._RadioButton_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._RadioButton_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._RadioButton_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._RadioButton_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._RadioButton_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._RadioButton_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._RadioButton_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._RadioButton_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._RadioButton_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._RadioButton_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._RadioButton_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RadioButton_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RadioButton_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RadioButton_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RadioButton_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RadioButton_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RadioButton_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RadioButton_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RadioButton_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RadioButton_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RadioButton_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RadioButton_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RadioButton_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RadioButton_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RadioButton_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RadioButton_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RadioButton_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RadioButton_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RadioButton_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RadioButton_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RadioButton_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RadioButton_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RadioButton_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RadioButton_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RadioButton_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RadioButton_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RadioButton_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RadioButton_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RadioButton_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RadioButton_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RadioButton_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RadioButton_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RadioButton_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RadioButton_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RadioButton_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RadioButton_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RadioButton_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RadioButton_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RadioButton_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RadioButton_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RadioButton_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RadioButton_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RadioButton_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RadioButton_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RadioButton_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RadioButton_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RadioButton_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RadioButton_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RadioButton_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RadioButton_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RadioButton_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RadioButton_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RadioButton_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RadioButton_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RadioButton_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RadioButton_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RadioButton_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RadioButton_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RadioButton_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RadioButton_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RadioButton_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RadioButton_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RadioButton_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RadioButton_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RadioButton_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RadioButton_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RadioButton_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RadioButton_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RadioButton_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RadioButton_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RadioButton_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RadioButton_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RadioButton_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RadioButton_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RadioButton_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RadioButton_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RadioButton_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RadioButton_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RadioButton_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RadioButton_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RadioButton_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RadioButton_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RadioButton_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RadioButton_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RadioButton_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RadioButton_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RadioButton_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RadioButton_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RadioButton_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RadioButton_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RadioButton_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RadioButton_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RadioButton_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RadioButton_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RadioButton_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RadioButton_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RadioButton_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RadioButton_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RadioButton_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RadioButton_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RadioButton_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RadioButton_activate(this.nativePtr);
	}

	deactivate() {
		Module._RadioButton_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RadioButton_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RadioButtonGroup {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RadioButtonGroup_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_e925499cf9eb6c5a6d862d0d0e1f36e1_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._RadioButtonGroup_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._RadioButtonGroup_clearEventListeners(this.nativePtr);
	}

	getSelectedButtonIndex() {
		var __result = Module._RadioButtonGroup_getSelectedButtonIndex(this.nativePtr);
		return __result;
	}

	setSelectedButton(index) {
		Module._RadioButtonGroup_setSelectedButton(this.nativePtr, index);
	}

	setSelectedButtonWithoutEvent(index) {
		Module._RadioButtonGroup_setSelectedButtonWithoutEvent(this.nativePtr, index);
	}

	addRadioButton(radioButton) {
		Module._RadioButtonGroup_addRadioButton(this.nativePtr, radioButton.nativePtr);
	}

	removeRadioButton(radioButton) {
		Module._RadioButtonGroup_removeRadioButton(this.nativePtr, radioButton.nativePtr);
	}

	removeAllRadioButtons() {
		Module._RadioButtonGroup_removeAllRadioButtons(this.nativePtr);
	}

	getNumberOfRadioButtons() {
		var __result = Module._RadioButtonGroup_getNumberOfRadioButtons(this.nativePtr);
		return __result;
	}

	getRadioButtonByIndex(index) {
		var __result = Module._RadioButtonGroup_getRadioButtonByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RadioButton(__result);
		}
	}

	setAllowedNoSelection(allowedNoSelection) {
		Module._RadioButtonGroup_setAllowedNoSelection(this.nativePtr, allowedNoSelection);
	}

	isAllowedNoSelection() {
		var __result = Module._RadioButtonGroup_isAllowedNoSelection(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._RadioButtonGroup_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._RadioButtonGroup_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._RadioButtonGroup_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._RadioButtonGroup_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._RadioButtonGroup_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._RadioButtonGroup_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._RadioButtonGroup_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._RadioButtonGroup_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._RadioButtonGroup_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._RadioButtonGroup_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._RadioButtonGroup_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._RadioButtonGroup_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._RadioButtonGroup_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._RadioButtonGroup_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._RadioButtonGroup_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RadioButtonGroup_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._RadioButtonGroup_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._RadioButtonGroup_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._RadioButtonGroup_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._RadioButtonGroup_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._RadioButtonGroup_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._RadioButtonGroup_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._RadioButtonGroup_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._RadioButtonGroup_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._RadioButtonGroup_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._RadioButtonGroup_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RadioButtonGroup_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._RadioButtonGroup_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._RadioButtonGroup_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._RadioButtonGroup_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._RadioButtonGroup_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._RadioButtonGroup_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._RadioButtonGroup_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._RadioButtonGroup_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._RadioButtonGroup_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._RadioButtonGroup_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._RadioButtonGroup_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._RadioButtonGroup_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._RadioButtonGroup_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._RadioButtonGroup_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._RadioButtonGroup_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._RadioButtonGroup_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._RadioButtonGroup_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._RadioButtonGroup_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._RadioButtonGroup_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._RadioButtonGroup_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._RadioButtonGroup_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._RadioButtonGroup_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._RadioButtonGroup_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RadioButtonGroup_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RadioButtonGroup_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RadioButtonGroup_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RadioButtonGroup_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RadioButtonGroup_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RadioButtonGroup_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RadioButtonGroup_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RadioButtonGroup_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RadioButtonGroup_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RadioButtonGroup_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RadioButtonGroup_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RadioButtonGroup_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RadioButtonGroup_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RadioButtonGroup_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RadioButtonGroup_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RadioButtonGroup_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RadioButtonGroup_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RadioButtonGroup_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RadioButtonGroup_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RadioButtonGroup_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RadioButtonGroup_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RadioButtonGroup_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RadioButtonGroup_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RadioButtonGroup_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RadioButtonGroup_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RadioButtonGroup_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RadioButtonGroup_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RadioButtonGroup_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RadioButtonGroup_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RadioButtonGroup_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RadioButtonGroup_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RadioButtonGroup_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RadioButtonGroup_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RadioButtonGroup_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RadioButtonGroup_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RadioButtonGroup_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RadioButtonGroup_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RadioButtonGroup_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RadioButtonGroup_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RadioButtonGroup_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RadioButtonGroup_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RadioButtonGroup_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RadioButtonGroup_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RadioButtonGroup_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RadioButtonGroup_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RadioButtonGroup_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RadioButtonGroup_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RadioButtonGroup_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RadioButtonGroup_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RadioButtonGroup_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RadioButtonGroup_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RadioButtonGroup_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RadioButtonGroup_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RadioButtonGroup_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RadioButtonGroup_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RadioButtonGroup_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RadioButtonGroup_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RadioButtonGroup_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RadioButtonGroup_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RadioButtonGroup_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RadioButtonGroup_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RadioButtonGroup_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RadioButtonGroup_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RadioButtonGroup_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RadioButtonGroup_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RadioButtonGroup_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RadioButtonGroup_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RadioButtonGroup_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RadioButtonGroup_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RadioButtonGroup_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RadioButtonGroup_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RadioButtonGroup_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RadioButtonGroup_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RadioButtonGroup_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RadioButtonGroup_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RadioButtonGroup_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RadioButtonGroup_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RadioButtonGroup_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RadioButtonGroup_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RadioButtonGroup_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RadioButtonGroup_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RadioButtonGroup_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RadioButtonGroup_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RadioButtonGroup_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RadioButtonGroup_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RadioButtonGroup_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RadioButtonGroup_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RadioButtonGroup_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RadioButtonGroup_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RadioButtonGroup_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RadioButtonGroup_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RadioButtonGroup_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RadioButtonGroup_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RadioButtonGroup_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RadioButtonGroup_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RadioButtonGroup_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RadioButtonGroup_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RadioButtonGroup_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RadioButtonGroup_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RadioButtonGroup_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RadioButtonGroup_activate(this.nativePtr);
	}

	deactivate() {
		Module._RadioButtonGroup_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RadioButtonGroup_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RecyclerView {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RecyclerView_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._RecyclerView_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RecyclerView(__result);
		}
	}

	setGravity(gravity) {
		Module._RecyclerView_setGravity(this.nativePtr, gravity);
	}

	setDataSource(dataSource) {
		Module._RecyclerView_setDataSource(this.nativePtr, dataSource.nativePtr);
	}

	reloadData() {
		Module._RecyclerView_reloadData(this.nativePtr);
	}

	updateCellAtIndex(index) {
		Module._RecyclerView_updateCellAtIndex(this.nativePtr, index);
	}

	insertCellAtIndex(index) {
		Module._RecyclerView_insertCellAtIndex(this.nativePtr, index);
	}

	removeCellAtIndex(index) {
		Module._RecyclerView_removeCellAtIndex(this.nativePtr, index);
	}

	registerCellModel(type, cellModel) {
		Module._RecyclerView_registerCellModel(this.nativePtr, type, cellModel.nativePtr);
	}

	dequeueCel(type) {
		var __result = Module._RecyclerView_dequeueCel(this.nativePtr, type);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RecyclerViewCell(__result);
		}
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_8364b577fc9cbf6a85be4cfa0effd4fb_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vii);
		Module._RecyclerView_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._RecyclerView_clearEventListeners(this.nativePtr);
	}

	setDirection(dir) {
		Module._RecyclerView_setDirection(this.nativePtr, dir);
	}

	getDirection() {
		var __result = Module._RecyclerView_getDirection(this.nativePtr);
		return __result;
	}

	stopScroll() {
		Module._RecyclerView_stopScroll(this.nativePtr);
	}

	stopAutoScroll() {
		Module._RecyclerView_stopAutoScroll(this.nativePtr);
	}

	stopOverallScroll() {
		Module._RecyclerView_stopOverallScroll(this.nativePtr);
	}

	scrollToBottom(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToBottom(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTop(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToTop(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToLeft(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToRight(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopLeft(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToTopLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToTopRight(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToTopRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomLeft(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToBottomLeft(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToBottomRight(timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToBottomRight(this.nativePtr, timeInMicroSec, attenuated);
	}

	scrollToPercentVertical(percent, timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToPercentVertical(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentHorizontal(percent, timeInMicroSec, attenuated) {
		Module._RecyclerView_scrollToPercentHorizontal(this.nativePtr, percent, timeInMicroSec, attenuated);
	}

	scrollToPercentBothDirection(percent, timeInMicroSec, attenuated) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerView_scrollToPercentBothDirection(this.nativePtr, percentBuffer, timeInMicroSec, attenuated);
		PBVector2.freeBuffer(percentBuffer);
	}

	getScrolledPercentVertical() {
		var __result = Module._RecyclerView_getScrolledPercentVertical(this.nativePtr);
		return __result;
	}

	getScrolledPercentHorizontal() {
		var __result = Module._RecyclerView_getScrolledPercentHorizontal(this.nativePtr);
		return __result;
	}

	getScrolledPercentBothDirection() {
		Module._RecyclerView_getScrolledPercentBothDirection(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	jumpToBottom() {
		Module._RecyclerView_jumpToBottom(this.nativePtr);
	}

	jumpToTop() {
		Module._RecyclerView_jumpToTop(this.nativePtr);
	}

	jumpToLeft() {
		Module._RecyclerView_jumpToLeft(this.nativePtr);
	}

	jumpToRight() {
		Module._RecyclerView_jumpToRight(this.nativePtr);
	}

	jumpToTopLeft() {
		Module._RecyclerView_jumpToTopLeft(this.nativePtr);
	}

	jumpToTopRight() {
		Module._RecyclerView_jumpToTopRight(this.nativePtr);
	}

	jumpToBottomLeft() {
		Module._RecyclerView_jumpToBottomLeft(this.nativePtr);
	}

	jumpToBottomRight() {
		Module._RecyclerView_jumpToBottomRight(this.nativePtr);
	}

	jumpToPercentVertical(percent) {
		Module._RecyclerView_jumpToPercentVertical(this.nativePtr, percent);
	}

	jumpToPercentHorizontal(percent) {
		Module._RecyclerView_jumpToPercentHorizontal(this.nativePtr, percent);
	}

	jumpToPercentBothDirection(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerView_jumpToPercentBothDirection(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setInnerContainerSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._RecyclerView_setInnerContainerSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getInnerContainerSize() {
		Module._RecyclerView_getInnerContainerSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setInnerContainerPosition(pos) {
		var pbpos = PBVector2.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		const posBuffer = PBVector2.buffer(pbpos);
		Module._RecyclerView_setInnerContainerPosition(this.nativePtr, posBuffer);
		PBVector2.freeBuffer(posBuffer);
	}

	getInnerContainerPosition() {
		Module._RecyclerView_getInnerContainerPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getContentOffset() {
		Module._RecyclerView_getContentOffset(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setBounceEnabled(enabled) {
		Module._RecyclerView_setBounceEnabled(this.nativePtr, enabled);
	}

	isBounceEnabled() {
		var __result = Module._RecyclerView_isBounceEnabled(this.nativePtr);
		return __result;
	}

	setInertiaScrollEnabled(enabled) {
		Module._RecyclerView_setInertiaScrollEnabled(this.nativePtr, enabled);
	}

	isInertiaScrollEnabled() {
		var __result = Module._RecyclerView_isInertiaScrollEnabled(this.nativePtr);
		return __result;
	}

	setTouchTotalTimeThreshold(touchTotalTimeThreshold) {
		Module._RecyclerView_setTouchTotalTimeThreshold(this.nativePtr, touchTotalTimeThreshold);
	}

	getTouchTotalTimeThreshold() {
		var __result = Module._RecyclerView_getTouchTotalTimeThreshold(this.nativePtr);
		return __result;
	}

	isScrolling() {
		var __result = Module._RecyclerView_isScrolling(this.nativePtr);
		return __result;
	}

	isAutoScrolling() {
		var __result = Module._RecyclerView_isAutoScrolling(this.nativePtr);
		return __result;
	}

	updateContentSizeToFitChildren() {
		Module._RecyclerView_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._RecyclerView_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RecyclerView_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._RecyclerView_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._RecyclerView_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._RecyclerView_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._RecyclerView_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._RecyclerView_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._RecyclerView_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._RecyclerView_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._RecyclerView_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._RecyclerView_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RecyclerView_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._RecyclerView_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._RecyclerView_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._RecyclerView_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._RecyclerView_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._RecyclerView_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._RecyclerView_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._RecyclerView_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._RecyclerView_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._RecyclerView_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._RecyclerView_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._RecyclerView_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._RecyclerView_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._RecyclerView_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._RecyclerView_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._RecyclerView_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._RecyclerView_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._RecyclerView_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._RecyclerView_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._RecyclerView_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._RecyclerView_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._RecyclerView_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._RecyclerView_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._RecyclerView_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._RecyclerView_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._RecyclerView_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._RecyclerView_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._RecyclerView_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._RecyclerView_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._RecyclerView_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._RecyclerView_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._RecyclerView_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._RecyclerView_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._RecyclerView_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._RecyclerView_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._RecyclerView_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._RecyclerView_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._RecyclerView_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._RecyclerView_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._RecyclerView_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._RecyclerView_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._RecyclerView_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._RecyclerView_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerView_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._RecyclerView_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._RecyclerView_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._RecyclerView_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._RecyclerView_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._RecyclerView_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._RecyclerView_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._RecyclerView_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._RecyclerView_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._RecyclerView_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._RecyclerView_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerView_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._RecyclerView_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._RecyclerView_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._RecyclerView_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._RecyclerView_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._RecyclerView_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._RecyclerView_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._RecyclerView_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._RecyclerView_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._RecyclerView_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._RecyclerView_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._RecyclerView_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._RecyclerView_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._RecyclerView_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._RecyclerView_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._RecyclerView_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._RecyclerView_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._RecyclerView_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._RecyclerView_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._RecyclerView_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._RecyclerView_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._RecyclerView_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._RecyclerView_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RecyclerView_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RecyclerView_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RecyclerView_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RecyclerView_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RecyclerView_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RecyclerView_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RecyclerView_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RecyclerView_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RecyclerView_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RecyclerView_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RecyclerView_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RecyclerView_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RecyclerView_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RecyclerView_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RecyclerView_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RecyclerView_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RecyclerView_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RecyclerView_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RecyclerView_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RecyclerView_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RecyclerView_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RecyclerView_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RecyclerView_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RecyclerView_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RecyclerView_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RecyclerView_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RecyclerView_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RecyclerView_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RecyclerView_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RecyclerView_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RecyclerView_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RecyclerView_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RecyclerView_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RecyclerView_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RecyclerView_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RecyclerView_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RecyclerView_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RecyclerView_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RecyclerView_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RecyclerView_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RecyclerView_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RecyclerView_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RecyclerView_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RecyclerView_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RecyclerView_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RecyclerView_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RecyclerView_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RecyclerView_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RecyclerView_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RecyclerView_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RecyclerView_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RecyclerView_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RecyclerView_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RecyclerView_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RecyclerView_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RecyclerView_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RecyclerView_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RecyclerView_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RecyclerView_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RecyclerView_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RecyclerView_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RecyclerView_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RecyclerView_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RecyclerView_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RecyclerView_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RecyclerView_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RecyclerView_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RecyclerView_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RecyclerView_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RecyclerView_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RecyclerView_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RecyclerView_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RecyclerView_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RecyclerView_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RecyclerView_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RecyclerView_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RecyclerView_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RecyclerView_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RecyclerView_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RecyclerView_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RecyclerView_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RecyclerView_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RecyclerView_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RecyclerView_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RecyclerView_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RecyclerView_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RecyclerView_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RecyclerView_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RecyclerView_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RecyclerView_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RecyclerView_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RecyclerView_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RecyclerView_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RecyclerView_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RecyclerView_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RecyclerView_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RecyclerView_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RecyclerView_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RecyclerView_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RecyclerView_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RecyclerView_activate(this.nativePtr);
	}

	deactivate() {
		Module._RecyclerView_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RecyclerView_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RecyclerViewCell {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RecyclerViewCell_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	getIdx() {
		var __result = Module._RecyclerViewCell_getIdx(this.nativePtr);
		return __result;
	}

	getType() {
		var __result = Module._RecyclerViewCell_getType(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._RecyclerViewCell_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._RecyclerViewCell_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._RecyclerViewCell_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._RecyclerViewCell_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._RecyclerViewCell_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._RecyclerViewCell_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._RecyclerViewCell_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._RecyclerViewCell_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._RecyclerViewCell_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._RecyclerViewCell_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._RecyclerViewCell_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._RecyclerViewCell_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._RecyclerViewCell_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._RecyclerViewCell_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._RecyclerViewCell_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerViewCell_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._RecyclerViewCell_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._RecyclerViewCell_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._RecyclerViewCell_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._RecyclerViewCell_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._RecyclerViewCell_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._RecyclerViewCell_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._RecyclerViewCell_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._RecyclerViewCell_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._RecyclerViewCell_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._RecyclerViewCell_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RecyclerViewCell_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._RecyclerViewCell_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._RecyclerViewCell_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._RecyclerViewCell_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._RecyclerViewCell_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._RecyclerViewCell_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._RecyclerViewCell_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._RecyclerViewCell_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._RecyclerViewCell_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._RecyclerViewCell_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._RecyclerViewCell_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._RecyclerViewCell_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._RecyclerViewCell_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._RecyclerViewCell_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._RecyclerViewCell_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._RecyclerViewCell_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._RecyclerViewCell_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._RecyclerViewCell_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._RecyclerViewCell_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._RecyclerViewCell_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._RecyclerViewCell_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._RecyclerViewCell_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._RecyclerViewCell_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RecyclerViewCell_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RecyclerViewCell_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RecyclerViewCell_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RecyclerViewCell_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RecyclerViewCell_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RecyclerViewCell_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RecyclerViewCell_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RecyclerViewCell_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RecyclerViewCell_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RecyclerViewCell_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RecyclerViewCell_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RecyclerViewCell_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RecyclerViewCell_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RecyclerViewCell_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RecyclerViewCell_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RecyclerViewCell_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RecyclerViewCell_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RecyclerViewCell_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RecyclerViewCell_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RecyclerViewCell_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RecyclerViewCell_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RecyclerViewCell_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RecyclerViewCell_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RecyclerViewCell_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RecyclerViewCell_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RecyclerViewCell_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RecyclerViewCell_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RecyclerViewCell_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RecyclerViewCell_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RecyclerViewCell_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RecyclerViewCell_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RecyclerViewCell_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RecyclerViewCell_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RecyclerViewCell_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RecyclerViewCell_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RecyclerViewCell_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RecyclerViewCell_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RecyclerViewCell_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RecyclerViewCell_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RecyclerViewCell_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RecyclerViewCell_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RecyclerViewCell_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RecyclerViewCell_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RecyclerViewCell_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RecyclerViewCell_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RecyclerViewCell_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RecyclerViewCell_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RecyclerViewCell_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RecyclerViewCell_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RecyclerViewCell_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RecyclerViewCell_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RecyclerViewCell_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RecyclerViewCell_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RecyclerViewCell_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RecyclerViewCell_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RecyclerViewCell_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RecyclerViewCell_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RecyclerViewCell_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RecyclerViewCell_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RecyclerViewCell_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RecyclerViewCell_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RecyclerViewCell_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RecyclerViewCell_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RecyclerViewCell_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RecyclerViewCell_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RecyclerViewCell_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RecyclerViewCell_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RecyclerViewCell_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RecyclerViewCell_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RecyclerViewCell_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RecyclerViewCell_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RecyclerViewCell_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RecyclerViewCell_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RecyclerViewCell_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RecyclerViewCell_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RecyclerViewCell_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RecyclerViewCell_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RecyclerViewCell_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RecyclerViewCell_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RecyclerViewCell_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RecyclerViewCell_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RecyclerViewCell_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RecyclerViewCell_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RecyclerViewCell_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RecyclerViewCell_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RecyclerViewCell_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RecyclerViewCell_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RecyclerViewCell_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RecyclerViewCell_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RecyclerViewCell_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RecyclerViewCell_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RecyclerViewCell_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RecyclerViewCell_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RecyclerViewCell_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RecyclerViewCell_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RecyclerViewCell_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RecyclerViewCell_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RecyclerViewCell_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RecyclerViewCell_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RecyclerViewCell_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RecyclerViewCell_activate(this.nativePtr);
	}

	deactivate() {
		Module._RecyclerViewCell_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RecyclerViewCell_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RecyclerViewDataSource {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RecyclerViewDataSource_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RecyclerViewDataSource_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RecyclerViewDataSource_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RecyclerViewDataSource_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RecyclerViewDataSource_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RecyclerViewDataSource_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RecyclerViewDataSource_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RecyclerViewDataSource_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RecyclerViewDataSource_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RecyclerViewDataSource_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RecyclerViewDataSource_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RecyclerViewDataSource_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RecyclerViewDataSource_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RecyclerViewDataSource_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RecyclerViewDataSource_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RecyclerViewDataSource_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RecyclerViewDataSource_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RecyclerViewDataSource_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RecyclerViewDataSource_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RecyclerViewDataSource_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RecyclerViewDataSource_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RecyclerViewDataSource_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RecyclerViewDataSource_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RecyclerViewDataSource_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RecyclerViewDataSource_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RecyclerViewDataSource_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RecyclerViewDataSource_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RecyclerViewDataSource_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RecyclerViewDataSource_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RecyclerViewDataSource_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RecyclerViewDataSource_activate(this.nativePtr);
	}

	deactivate() {
		Module._RecyclerViewDataSource_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RecyclerViewDataSource_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RelativeBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RelativeBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._RelativeBox_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RelativeBox(__result);
		}
	}

	updateContentSizeToFitChildren() {
		Module._RelativeBox_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._RelativeBox_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RelativeBox_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._RelativeBox_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._RelativeBox_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._RelativeBox_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._RelativeBox_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._RelativeBox_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._RelativeBox_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._RelativeBox_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._RelativeBox_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._RelativeBox_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RelativeBox_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._RelativeBox_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._RelativeBox_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._RelativeBox_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._RelativeBox_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._RelativeBox_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._RelativeBox_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._RelativeBox_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._RelativeBox_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._RelativeBox_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._RelativeBox_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._RelativeBox_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._RelativeBox_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._RelativeBox_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._RelativeBox_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._RelativeBox_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._RelativeBox_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._RelativeBox_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._RelativeBox_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._RelativeBox_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._RelativeBox_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._RelativeBox_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._RelativeBox_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._RelativeBox_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._RelativeBox_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._RelativeBox_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._RelativeBox_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._RelativeBox_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._RelativeBox_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._RelativeBox_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._RelativeBox_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._RelativeBox_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._RelativeBox_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._RelativeBox_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._RelativeBox_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._RelativeBox_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._RelativeBox_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._RelativeBox_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._RelativeBox_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._RelativeBox_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._RelativeBox_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._RelativeBox_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._RelativeBox_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RelativeBox_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._RelativeBox_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._RelativeBox_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._RelativeBox_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._RelativeBox_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._RelativeBox_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._RelativeBox_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._RelativeBox_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._RelativeBox_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._RelativeBox_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._RelativeBox_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._RelativeBox_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._RelativeBox_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._RelativeBox_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._RelativeBox_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._RelativeBox_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._RelativeBox_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._RelativeBox_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._RelativeBox_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._RelativeBox_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._RelativeBox_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._RelativeBox_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._RelativeBox_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._RelativeBox_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._RelativeBox_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._RelativeBox_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._RelativeBox_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._RelativeBox_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._RelativeBox_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._RelativeBox_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._RelativeBox_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._RelativeBox_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._RelativeBox_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._RelativeBox_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RelativeBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RelativeBox_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RelativeBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RelativeBox_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RelativeBox_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RelativeBox_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RelativeBox_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RelativeBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RelativeBox_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RelativeBox_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RelativeBox_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RelativeBox_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RelativeBox_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RelativeBox_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RelativeBox_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RelativeBox_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RelativeBox_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RelativeBox_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RelativeBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RelativeBox_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RelativeBox_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RelativeBox_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RelativeBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RelativeBox_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RelativeBox_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RelativeBox_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RelativeBox_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RelativeBox_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RelativeBox_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RelativeBox_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RelativeBox_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RelativeBox_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RelativeBox_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RelativeBox_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RelativeBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RelativeBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RelativeBox_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RelativeBox_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RelativeBox_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RelativeBox_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RelativeBox_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RelativeBox_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RelativeBox_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RelativeBox_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RelativeBox_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RelativeBox_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RelativeBox_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RelativeBox_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RelativeBox_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RelativeBox_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RelativeBox_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RelativeBox_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RelativeBox_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RelativeBox_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RelativeBox_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RelativeBox_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RelativeBox_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RelativeBox_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RelativeBox_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RelativeBox_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RelativeBox_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RelativeBox_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RelativeBox_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RelativeBox_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RelativeBox_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RelativeBox_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RelativeBox_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RelativeBox_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RelativeBox_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RelativeBox_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RelativeBox_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RelativeBox_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RelativeBox_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RelativeBox_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RelativeBox_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RelativeBox_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RelativeBox_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RelativeBox_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RelativeBox_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RelativeBox_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RelativeBox_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RelativeBox_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RelativeBox_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RelativeBox_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RelativeBox_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RelativeBox_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RelativeBox_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RelativeBox_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RelativeBox_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RelativeBox_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RelativeBox_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RelativeBox_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RelativeBox_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RelativeBox_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RelativeBox_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RelativeBox_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RelativeBox_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RelativeBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RelativeBox_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RelativeBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RelativeBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._RelativeBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RelativeBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class RichText {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._RichText_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._RichText_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichText(__result);
		}
	}

	static createWithXML(xml) {
		const xmlBuffer = Module._malloc(xml.length+1);
		Module.stringToUTF8(xml, xmlBuffer, xml.length+1);
		var __result = Module._RichText_createWithXML(xmlBuffer);
		Module._free(xmlBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichText(__result);
		}
	}

	setText(xmlText) {
		const xmlTextBuffer = Module._malloc(xmlText.length+1);
		Module.stringToUTF8(xmlText, xmlTextBuffer, xmlText.length+1);
		Module._RichText_setText(this.nativePtr, xmlTextBuffer);
		Module._free(xmlTextBuffer);
	}

	addAttributeString(text, fontName, fontSize, color, bold, italics) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var __result = Module._RichText_addAttributeString(this.nativePtr, textBuffer, fontNameBuffer, fontSize, colorBuffer, bold, italics);
		Module._free(textBuffer);
		Module._free(fontNameBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementText(__result);
		}
	}

	addAttributeStringWithEmoji(text, fontName, emojiTTF, fontSize, color, bold, italics) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		const emojiTTFBuffer = Module._malloc(emojiTTF.length+1);
		Module.stringToUTF8(emojiTTF, emojiTTFBuffer, emojiTTF.length+1);
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var __result = Module._RichText_addAttributeStringWithEmoji(this.nativePtr, textBuffer, fontNameBuffer, emojiTTFBuffer, fontSize, colorBuffer, bold, italics);
		Module._free(textBuffer);
		Module._free(fontNameBuffer);
		Module._free(emojiTTFBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementText(__result);
		}
	}

	addImage(filePath, width, height) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		var __result = Module._RichText_addImage(this.nativePtr, filePathBuffer, width, height);
		Module._free(filePathBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	addTexture(texture, width, height) {
		var __result = Module._RichText_addTexture(this.nativePtr, texture.nativePtr, width, height);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	addSpriteFrame(spriteFrame, width, height) {
		var __result = Module._RichText_addSpriteFrame(this.nativePtr, spriteFrame.nativePtr, width, height);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	addImageWithData(data, dataSize, format, width, height) {
		const dataBuffer = Module._malloc(data.length);
		Module.writeArrayToMemory(data, dataBuffer);
		var __result = Module._RichText_addImageWithData(this.nativePtr, dataBuffer, dataSize, format, width, height);
		Module._free(dataBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	addNewLine() {
		var __result = Module._RichText_addNewLine(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementNewLine(__result);
		}
	}

	addCustomNode(customNode) {
		var __result = Module._RichText_addCustomNode(this.nativePtr, customNode.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementCustomNode(__result);
		}
	}

	insertAttributeString(index, text, fontName, fontSize, color, bold, italics) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var __result = Module._RichText_insertAttributeString(this.nativePtr, index, textBuffer, fontNameBuffer, fontSize, colorBuffer, bold, italics);
		Module._free(textBuffer);
		Module._free(fontNameBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementText(__result);
		}
	}

	insertAttributeStringWithEmoji(index, text, fontName, emojiTTF, fontSize, color, bold, italics) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		const fontNameBuffer = Module._malloc(fontName.length+1);
		Module.stringToUTF8(fontName, fontNameBuffer, fontName.length+1);
		const emojiTTFBuffer = Module._malloc(emojiTTF.length+1);
		Module.stringToUTF8(emojiTTF, emojiTTFBuffer, emojiTTF.length+1);
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		var __result = Module._RichText_insertAttributeStringWithEmoji(this.nativePtr, index, textBuffer, fontNameBuffer, emojiTTFBuffer, fontSize, colorBuffer, bold, italics);
		Module._free(textBuffer);
		Module._free(fontNameBuffer);
		Module._free(emojiTTFBuffer);
		PBColor4B.freeBuffer(colorBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementText(__result);
		}
	}

	insertImage(index, filePath, width, height) {
		const filePathBuffer = Module._malloc(filePath.length+1);
		Module.stringToUTF8(filePath, filePathBuffer, filePath.length+1);
		var __result = Module._RichText_insertImage(this.nativePtr, index, filePathBuffer, width, height);
		Module._free(filePathBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	insertTexture(index, texture, width, height) {
		var __result = Module._RichText_insertTexture(this.nativePtr, index, texture.nativePtr, width, height);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	insertSpriteFrame(index, spriteFrame, width, height) {
		var __result = Module._RichText_insertSpriteFrame(this.nativePtr, index, spriteFrame.nativePtr, width, height);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	insertImageWithData(index, data, dataSize, format, width, height) {
		const dataBuffer = Module._malloc(data.length);
		Module.writeArrayToMemory(data, dataBuffer);
		var __result = Module._RichText_insertImageWithData(this.nativePtr, index, dataBuffer, dataSize, format, width, height);
		Module._free(dataBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementImage(__result);
		}
	}

	insertNewLine(index) {
		var __result = Module._RichText_insertNewLine(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementNewLine(__result);
		}
	}

	insertCustomNode(index, customNode) {
		var __result = Module._RichText_insertCustomNode(this.nativePtr, index, customNode.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new RichElementCustomNode(__result);
		}
	}

	removeElementByIndex(index) {
		Module._RichText_removeElementByIndex(this.nativePtr, index);
	}

	removeElement(element) {
		Module._RichText_removeElement(this.nativePtr, element.nativePtr);
	}

	getElementCount() {
		var __result = Module._RichText_getElementCount(this.nativePtr);
		return __result;
	}

	clearAllElement() {
		Module._RichText_clearAllElement(this.nativePtr);
	}

	setVerticalSpace(space) {
		Module._RichText_setVerticalSpace(this.nativePtr, space);
	}

	getVerticalSpace() {
		var __result = Module._RichText_getVerticalSpace(this.nativePtr);
		return __result;
	}

	enableEllipsis(ellipsis) {
		Module._RichText_enableEllipsis(this.nativePtr, ellipsis);
	}

	isElllipsisEnabled() {
		var __result = Module._RichText_isElllipsisEnabled(this.nativePtr);
		return __result;
	}

	setTextVerticalAlign(a) {
		Module._RichText_setTextVerticalAlign(this.nativePtr, a);
	}

	setTextHorizontalAlign(a) {
		Module._RichText_setTextHorizontalAlign(this.nativePtr, a);
	}

	setPadding(l, t, r, b) {
		Module._RichText_setPadding(this.nativePtr, l, t, r, b);
	}

	setLeftPadding(leftPadding) {
		Module._RichText_setLeftPadding(this.nativePtr, leftPadding);
	}

	setTopPadding(topPadding) {
		Module._RichText_setTopPadding(this.nativePtr, topPadding);
	}

	setRightPadding(rightPadding) {
		Module._RichText_setRightPadding(this.nativePtr, rightPadding);
	}

	setBottomPadding(bottomPadding) {
		Module._RichText_setBottomPadding(this.nativePtr, bottomPadding);
	}

	getLeftPadding() {
		var __result = Module._RichText_getLeftPadding(this.nativePtr);
		return __result;
	}

	getTopPadding() {
		var __result = Module._RichText_getTopPadding(this.nativePtr);
		return __result;
	}

	getRightPadding() {
		var __result = Module._RichText_getRightPadding(this.nativePtr);
		return __result;
	}

	getBottomPadding() {
		var __result = Module._RichText_getBottomPadding(this.nativePtr);
		return __result;
	}

	setMaxLineWidth(maxLineWidth) {
		Module._RichText_setMaxLineWidth(this.nativePtr, maxLineWidth);
	}

	getMaxLineWidth() {
		var __result = Module._RichText_getMaxLineWidth(this.nativePtr);
		return __result;
	}

	setBackGroundImage(image) {
		const imageBuffer = Module._malloc(image.length+1);
		Module.stringToUTF8(image, imageBuffer, image.length+1);
		Module._RichText_setBackGroundImage(this.nativePtr, imageBuffer);
		Module._free(imageBuffer);
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._RichText_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	setScaleX(scaleX) {
		Module._RichText_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._RichText_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._RichText_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._RichText_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._RichText_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._RichText_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._RichText_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._RichText_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._RichText_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._RichText_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._RichText_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._RichText_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._RichText_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._RichText_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._RichText_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._RichText_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._RichText_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._RichText_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._RichText_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._RichText_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._RichText_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._RichText_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._RichText_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._RichText_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._RichText_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._RichText_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._RichText_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._RichText_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._RichText_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._RichText_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._RichText_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._RichText_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._RichText_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._RichText_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._RichText_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._RichText_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._RichText_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._RichText_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._RichText_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._RichText_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._RichText_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._RichText_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._RichText_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._RichText_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._RichText_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._RichText_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._RichText_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._RichText_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._RichText_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._RichText_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._RichText_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._RichText_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._RichText_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._RichText_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._RichText_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._RichText_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._RichText_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._RichText_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._RichText_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._RichText_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._RichText_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._RichText_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._RichText_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._RichText_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._RichText_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._RichText_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._RichText_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._RichText_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._RichText_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._RichText_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._RichText_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._RichText_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._RichText_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._RichText_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._RichText_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._RichText_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._RichText_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._RichText_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._RichText_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._RichText_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._RichText_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._RichText_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._RichText_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._RichText_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._RichText_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._RichText_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._RichText_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._RichText_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._RichText_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._RichText_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._RichText_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._RichText_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._RichText_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._RichText_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._RichText_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._RichText_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._RichText_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._RichText_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._RichText_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._RichText_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._RichText_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._RichText_activate(this.nativePtr);
	}

	deactivate() {
		Module._RichText_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._RichText_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class ScrollViewBar {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._ScrollViewBar_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setScaleX(scaleX) {
		Module._ScrollViewBar_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._ScrollViewBar_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._ScrollViewBar_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._ScrollViewBar_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._ScrollViewBar_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._ScrollViewBar_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._ScrollViewBar_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._ScrollViewBar_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._ScrollViewBar_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._ScrollViewBar_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._ScrollViewBar_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._ScrollViewBar_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._ScrollViewBar_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._ScrollViewBar_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._ScrollViewBar_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._ScrollViewBar_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._ScrollViewBar_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._ScrollViewBar_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._ScrollViewBar_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._ScrollViewBar_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._ScrollViewBar_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._ScrollViewBar_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._ScrollViewBar_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._ScrollViewBar_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._ScrollViewBar_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._ScrollViewBar_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._ScrollViewBar_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._ScrollViewBar_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._ScrollViewBar_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._ScrollViewBar_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._ScrollViewBar_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._ScrollViewBar_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._ScrollViewBar_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._ScrollViewBar_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._ScrollViewBar_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._ScrollViewBar_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._ScrollViewBar_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._ScrollViewBar_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._ScrollViewBar_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._ScrollViewBar_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._ScrollViewBar_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._ScrollViewBar_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._ScrollViewBar_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._ScrollViewBar_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._ScrollViewBar_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._ScrollViewBar_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._ScrollViewBar_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._ScrollViewBar_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._ScrollViewBar_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._ScrollViewBar_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._ScrollViewBar_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._ScrollViewBar_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._ScrollViewBar_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._ScrollViewBar_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._ScrollViewBar_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._ScrollViewBar_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._ScrollViewBar_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._ScrollViewBar_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._ScrollViewBar_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._ScrollViewBar_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._ScrollViewBar_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._ScrollViewBar_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._ScrollViewBar_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._ScrollViewBar_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._ScrollViewBar_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._ScrollViewBar_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._ScrollViewBar_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._ScrollViewBar_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._ScrollViewBar_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._ScrollViewBar_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._ScrollViewBar_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._ScrollViewBar_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._ScrollViewBar_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._ScrollViewBar_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._ScrollViewBar_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._ScrollViewBar_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._ScrollViewBar_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._ScrollViewBar_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._ScrollViewBar_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._ScrollViewBar_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._ScrollViewBar_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._ScrollViewBar_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._ScrollViewBar_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._ScrollViewBar_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._ScrollViewBar_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._ScrollViewBar_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._ScrollViewBar_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._ScrollViewBar_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._ScrollViewBar_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._ScrollViewBar_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._ScrollViewBar_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._ScrollViewBar_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._ScrollViewBar_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._ScrollViewBar_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._ScrollViewBar_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._ScrollViewBar_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._ScrollViewBar_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._ScrollViewBar_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._ScrollViewBar_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._ScrollViewBar_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._ScrollViewBar_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._ScrollViewBar_activate(this.nativePtr);
	}

	deactivate() {
		Module._ScrollViewBar_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._ScrollViewBar_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Slider {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Slider_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create(barTextureName, normalBallTextureName) {
		const barTextureNameBuffer = Module._malloc(barTextureName.length+1);
		Module.stringToUTF8(barTextureName, barTextureNameBuffer, barTextureName.length+1);
		const normalBallTextureNameBuffer = Module._malloc(normalBallTextureName.length+1);
		Module.stringToUTF8(normalBallTextureName, normalBallTextureNameBuffer, normalBallTextureName.length+1);
		var __result = Module._Slider_create(barTextureNameBuffer, normalBallTextureNameBuffer);
		Module._free(barTextureNameBuffer);
		Module._free(normalBallTextureNameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Slider(__result);
		}
	}

	loadBarTexture(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._Slider_loadBarTexture(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setScale9Enabled(able) {
		Module._Slider_setScale9Enabled(this.nativePtr, able);
	}

	isScale9Enabled() {
		var __result = Module._Slider_isScale9Enabled(this.nativePtr);
		return __result;
	}

	setCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._Slider_setCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	setCapInsetsBarRenderer(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._Slider_setCapInsetsBarRenderer(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getCapInsetsBarRenderer() {
		Module._Slider_getCapInsetsBarRenderer(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setCapInsetProgressBarRenderer(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._Slider_setCapInsetProgressBarRenderer(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getCapInsetsProgressBarRenderer() {
		Module._Slider_getCapInsetsProgressBarRenderer(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	loadSlidBallTextures(normal, pressed, disabled) {
		const normalBuffer = Module._malloc(normal.length+1);
		Module.stringToUTF8(normal, normalBuffer, normal.length+1);
		const pressedBuffer = Module._malloc(pressed.length+1);
		Module.stringToUTF8(pressed, pressedBuffer, pressed.length+1);
		const disabledBuffer = Module._malloc(disabled.length+1);
		Module.stringToUTF8(disabled, disabledBuffer, disabled.length+1);
		Module._Slider_loadSlidBallTextures(this.nativePtr, normalBuffer, pressedBuffer, disabledBuffer);
		Module._free(normalBuffer);
		Module._free(pressedBuffer);
		Module._free(disabledBuffer);
	}

	loadSlidBallTextureNormal(normal) {
		const normalBuffer = Module._malloc(normal.length+1);
		Module.stringToUTF8(normal, normalBuffer, normal.length+1);
		Module._Slider_loadSlidBallTextureNormal(this.nativePtr, normalBuffer);
		Module._free(normalBuffer);
	}

	loadSlidBallTexturePressed(pressed) {
		const pressedBuffer = Module._malloc(pressed.length+1);
		Module.stringToUTF8(pressed, pressedBuffer, pressed.length+1);
		Module._Slider_loadSlidBallTexturePressed(this.nativePtr, pressedBuffer);
		Module._free(pressedBuffer);
	}

	loadSlidBallTextureDisabled(disabled) {
		const disabledBuffer = Module._malloc(disabled.length+1);
		Module.stringToUTF8(disabled, disabledBuffer, disabled.length+1);
		Module._Slider_loadSlidBallTextureDisabled(this.nativePtr, disabledBuffer);
		Module._free(disabledBuffer);
	}

	loadProgressBarTexture(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._Slider_loadProgressBarTexture(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setPercent(percent) {
		Module._Slider_setPercent(this.nativePtr, percent);
	}

	getPercent() {
		var __result = Module._Slider_getPercent(this.nativePtr);
		return __result;
	}

	setMaxPercent(percent) {
		Module._Slider_setMaxPercent(this.nativePtr, percent);
	}

	getMaxPercent() {
		var __result = Module._Slider_getMaxPercent(this.nativePtr);
		return __result;
	}

	addEventListener(listener) {
		let listenerFunc = CustomCallback_3f7c6c81aeb512b7a4d0d1f6099537a3_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viii);
		Module._Slider_addEventListener(this.nativePtr, listenerPtr);
	}

	clearEventListeners() {
		Module._Slider_clearEventListeners(this.nativePtr);
	}

	setZoomScale(scale) {
		Module._Slider_setZoomScale(this.nativePtr, scale);
	}

	getZoomScale() {
		var __result = Module._Slider_getZoomScale(this.nativePtr);
		return __result;
	}

	getSlidBallNormalRenderer() {
		var __result = Module._Slider_getSlidBallNormalRenderer(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getSlidBallPressedRenderer() {
		var __result = Module._Slider_getSlidBallPressedRenderer(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	getSlidBallDisabledRenderer() {
		var __result = Module._Slider_getSlidBallDisabledRenderer(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setEnabled(enabled) {
		Module._Slider_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._Slider_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._Slider_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._Slider_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._Slider_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._Slider_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._Slider_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._Slider_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._Slider_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._Slider_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._Slider_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._Slider_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._Slider_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._Slider_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._Slider_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Slider_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._Slider_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._Slider_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._Slider_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Slider_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._Slider_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Slider_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._Slider_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._Slider_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._Slider_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._Slider_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Slider_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._Slider_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._Slider_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._Slider_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._Slider_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._Slider_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._Slider_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._Slider_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._Slider_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._Slider_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._Slider_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._Slider_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._Slider_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._Slider_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._Slider_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._Slider_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._Slider_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._Slider_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._Slider_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._Slider_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._Slider_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._Slider_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._Slider_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Slider_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Slider_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Slider_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Slider_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Slider_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Slider_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Slider_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Slider_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Slider_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Slider_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Slider_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Slider_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Slider_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Slider_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Slider_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Slider_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Slider_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Slider_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Slider_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Slider_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Slider_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Slider_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Slider_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Slider_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Slider_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Slider_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Slider_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Slider_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Slider_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Slider_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Slider_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Slider_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Slider_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Slider_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Slider_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Slider_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Slider_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Slider_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Slider_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Slider_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Slider_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Slider_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Slider_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Slider_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Slider_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Slider_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Slider_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Slider_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Slider_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Slider_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Slider_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Slider_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Slider_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Slider_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Slider_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Slider_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Slider_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Slider_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Slider_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Slider_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Slider_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Slider_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Slider_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Slider_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Slider_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Slider_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Slider_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Slider_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Slider_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Slider_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Slider_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Slider_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Slider_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Slider_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Slider_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Slider_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Slider_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Slider_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Slider_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Slider_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Slider_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Slider_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Slider_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Slider_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Slider_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Slider_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Slider_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Slider_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Slider_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Slider_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Slider_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Slider_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Slider_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Slider_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Slider_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Slider_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Slider_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Slider_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Slider_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Slider_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Slider_activate(this.nativePtr);
	}

	deactivate() {
		Module._Slider_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Slider_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class BKText {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Text_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Text_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new BKText(__result);
		}
	}

	setString(text) {
		const textBuffer = Module._malloc(text.length+1);
		Module.stringToUTF8(text, textBuffer, text.length+1);
		Module._Text_setString(this.nativePtr, textBuffer);
		Module._free(textBuffer);
	}

	getString() {
		var __result = Module._Text_getString(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	getStringLength() {
		var __result = Module._Text_getStringLength(this.nativePtr);
		return __result;
	}

	setFontSize(size) {
		Module._Text_setFontSize(this.nativePtr, size);
	}

	getFontSize() {
		var __result = Module._Text_getFontSize(this.nativePtr);
		return __result;
	}

	setFontName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Text_setFontName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	getFontName() {
		var __result = Module._Text_getFontName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setTouchScaleChangeEnabled(enabled) {
		Module._Text_setTouchScaleChangeEnabled(this.nativePtr, enabled);
	}

	isTouchScaleChangeEnabled() {
		var __result = Module._Text_isTouchScaleChangeEnabled(this.nativePtr);
		return __result;
	}

	setTextAreaSize(size) {
		var pbsize = PBBKSizeF.create();
		pbsize.width = size.width;
		pbsize.height = size.height;
		const sizeBuffer = PBBKSizeF.buffer(pbsize);
		Module._Text_setTextAreaSize(this.nativePtr, sizeBuffer);
		PBBKSizeF.freeBuffer(sizeBuffer);
	}

	getTextAreaSize() {
		Module._Text_getTextAreaSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setTextHorizontalAlignment(alignment) {
		Module._Text_setTextHorizontalAlignment(this.nativePtr, alignment);
	}

	getTextHorizontalAlignment() {
		var __result = Module._Text_getTextHorizontalAlignment(this.nativePtr);
		return __result;
	}

	setTextVerticalAlignment(alignment) {
		Module._Text_setTextVerticalAlignment(this.nativePtr, alignment);
	}

	getTextVerticalAlignment() {
		var __result = Module._Text_getTextVerticalAlignment(this.nativePtr);
		return __result;
	}

	setTextColor(color) {
		var pbcolor = PBColor4B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4B.buffer(pbcolor);
		Module._Text_setTextColor(this.nativePtr, colorBuffer);
		PBColor4B.freeBuffer(colorBuffer);
	}

	getTextColor() {
		Module._Text_getTextColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	enableShadow(shadowColor, offset, blurRadius) {
		var pbshadowColor = PBColor4B.create();
		pbshadowColor.r = shadowColor.r;
		pbshadowColor.g = shadowColor.g;
		pbshadowColor.b = shadowColor.b;
		pbshadowColor.a = shadowColor.a;
		const shadowColorBuffer = PBColor4B.buffer(pbshadowColor);
		var pboffset = PBBKSizeF.create();
		pboffset.width = offset.width;
		pboffset.height = offset.height;
		const offsetBuffer = PBBKSizeF.buffer(pboffset);
		Module._Text_enableShadow(this.nativePtr, shadowColorBuffer, offsetBuffer, blurRadius);
		PBColor4B.freeBuffer(shadowColorBuffer);
		PBBKSizeF.freeBuffer(offsetBuffer);
	}

	enableOutline(outlineColor, outlineSize) {
		var pboutlineColor = PBColor4B.create();
		pboutlineColor.r = outlineColor.r;
		pboutlineColor.g = outlineColor.g;
		pboutlineColor.b = outlineColor.b;
		pboutlineColor.a = outlineColor.a;
		const outlineColorBuffer = PBColor4B.buffer(pboutlineColor);
		Module._Text_enableOutline(this.nativePtr, outlineColorBuffer, outlineSize);
		PBColor4B.freeBuffer(outlineColorBuffer);
	}

	enableGlow(glowColor) {
		var pbglowColor = PBColor4B.create();
		pbglowColor.r = glowColor.r;
		pbglowColor.g = glowColor.g;
		pbglowColor.b = glowColor.b;
		pbglowColor.a = glowColor.a;
		const glowColorBuffer = PBColor4B.buffer(pbglowColor);
		Module._Text_enableGlow(this.nativePtr, glowColorBuffer);
		PBColor4B.freeBuffer(glowColorBuffer);
	}

	disableEffect(effect) {
		Module._Text_disableEffect(this.nativePtr, effect);
	}

	isShadowEnabled() {
		var __result = Module._Text_isShadowEnabled(this.nativePtr);
		return __result;
	}

	getShadowOffset() {
		Module._Text_getShadowOffset(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	getShadowBlurRadius() {
		var __result = Module._Text_getShadowBlurRadius(this.nativePtr);
		return __result;
	}

	getShadowColor() {
		Module._Text_getShadowColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getOutlineSize() {
		var __result = Module._Text_getOutlineSize(this.nativePtr);
		return __result;
	}

	getLabelEffectType() {
		var __result = Module._Text_getLabelEffectType(this.nativePtr);
		return __result;
	}

	getEffectColor() {
		Module._Text_getEffectColor(this.nativePtr, PBColor4B.nativeBuffer);
		return new Color4B(PBColor4B.decode(PBColor4B.nativeBuffer));
	}

	getLetter(lettetIndex) {
		var __result = Module._Text_getLetter(this.nativePtr, lettetIndex);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Sprite(__result);
		}
	}

	setEnabled(enabled) {
		Module._Text_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._Text_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._Text_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._Text_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._Text_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._Text_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._Text_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._Text_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._Text_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._Text_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._Text_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._Text_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._Text_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._Text_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._Text_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Text_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._Text_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._Text_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._Text_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Text_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._Text_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Text_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._Text_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._Text_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._Text_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._Text_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Text_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._Text_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._Text_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._Text_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._Text_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._Text_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._Text_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._Text_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._Text_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._Text_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._Text_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._Text_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._Text_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._Text_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._Text_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._Text_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._Text_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._Text_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._Text_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._Text_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._Text_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._Text_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._Text_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Text_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Text_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Text_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Text_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Text_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Text_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Text_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Text_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Text_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Text_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Text_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Text_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Text_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Text_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Text_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Text_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Text_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Text_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Text_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Text_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Text_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Text_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Text_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Text_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Text_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Text_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Text_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Text_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Text_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Text_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Text_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Text_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Text_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Text_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Text_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Text_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Text_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Text_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Text_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Text_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Text_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Text_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Text_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Text_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Text_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Text_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Text_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Text_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Text_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Text_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Text_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Text_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Text_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Text_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Text_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Text_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Text_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Text_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Text_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Text_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Text_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Text_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Text_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Text_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Text_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Text_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Text_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Text_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Text_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Text_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Text_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Text_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Text_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Text_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Text_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Text_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Text_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Text_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Text_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Text_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Text_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Text_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Text_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Text_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Text_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Text_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Text_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Text_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Text_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Text_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Text_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Text_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Text_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Text_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Text_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Text_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Text_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Text_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Text_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Text_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Text_activate(this.nativePtr);
	}

	deactivate() {
		Module._Text_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Text_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class VBox {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._VBox_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._VBox_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new VBox(__result);
		}
	}

	updateContentSizeToFitChildren() {
		Module._VBox_updateContentSizeToFitChildren(this.nativePtr);
	}

	setBackGroundImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._VBox_setBackGroundImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setBackGroundImageColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._VBox_setBackGroundImageColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundImageColor() {
		Module._VBox_getBackGroundImageColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundImageOpacity(opacity) {
		Module._VBox_setBackGroundImageOpacity(this.nativePtr, opacity);
	}

	getBackGroundImageOpacity() {
		var __result = Module._VBox_getBackGroundImageOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._VBox_setBackGroundImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getBackGroundImageCapInsets() {
		Module._VBox_getBackGroundImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setBackGroundColorType(type) {
		Module._VBox_setBackGroundColorType(this.nativePtr, type);
	}

	getBackGroundColorType() {
		var __result = Module._VBox_getBackGroundColorType(this.nativePtr);
		return __result;
	}

	setBackGroundImageScale9Enabled(enabled) {
		Module._VBox_setBackGroundImageScale9Enabled(this.nativePtr, enabled);
	}

	isBackGroundImageScale9Enabled() {
		var __result = Module._VBox_isBackGroundImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setBackGroundColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._VBox_setBackGroundColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getBackGroundColor() {
		Module._VBox_getBackGroundColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundGradientColor(startColor, endColor) {
		var pbstartColor = PBColor3B.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		const startColorBuffer = PBColor3B.buffer(pbstartColor);
		var pbendColor = PBColor3B.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		const endColorBuffer = PBColor3B.buffer(pbendColor);
		Module._VBox_setBackGroundGradientColor(this.nativePtr, startColorBuffer, endColorBuffer);
		PBColor3B.freeBuffer(startColorBuffer);
		PBColor3B.freeBuffer(endColorBuffer);
	}

	getBackGroundStartColor() {
		Module._VBox_getBackGroundStartColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	getBackGroundEndColor() {
		Module._VBox_getBackGroundEndColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setBackGroundColorOpacity(opacity) {
		Module._VBox_setBackGroundColorOpacity(this.nativePtr, opacity);
	}

	getBackGroundColorOpacity() {
		var __result = Module._VBox_getBackGroundColorOpacity(this.nativePtr);
		return __result;
	}

	setBackGroundColorVector(vector) {
		var pbvector = PBVector2.create();
		pbvector.x = vector.x;
		pbvector.y = vector.y;
		const vectorBuffer = PBVector2.buffer(pbvector);
		Module._VBox_setBackGroundColorVector(this.nativePtr, vectorBuffer);
		PBVector2.freeBuffer(vectorBuffer);
	}

	getBackGroundColorVector() {
		Module._VBox_getBackGroundColorVector(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	removeBackGroundImage() {
		Module._VBox_removeBackGroundImage(this.nativePtr);
	}

	getBackGroundImageTextureSize() {
		Module._VBox_getBackGroundImageTextureSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setClippingEnabled(enabled) {
		Module._VBox_setClippingEnabled(this.nativePtr, enabled);
	}

	isClippingEnabled() {
		var __result = Module._VBox_isClippingEnabled(this.nativePtr);
		return __result;
	}

	setClippingType(type) {
		Module._VBox_setClippingType(this.nativePtr, type);
	}

	customlizeStencilDrawNode() {
		var __result = Module._VBox_customlizeStencilDrawNode(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new DrawNode(__result);
		}
	}

	getClippingType() {
		var __result = Module._VBox_getClippingType(this.nativePtr);
		return __result;
	}

	setMaskImage(fileName) {
		const fileNameBuffer = Module._malloc(fileName.length+1);
		Module.stringToUTF8(fileName, fileNameBuffer, fileName.length+1);
		Module._VBox_setMaskImage(this.nativePtr, fileNameBuffer);
		Module._free(fileNameBuffer);
	}

	setMaskTexture(texture) {
		Module._VBox_setMaskTexture(this.nativePtr, texture.nativePtr);
	}

	setMaskImageScale9Enabled(enabled) {
		Module._VBox_setMaskImageScale9Enabled(this.nativePtr, enabled);
	}

	isMaskImageScale9Enabled() {
		var __result = Module._VBox_isMaskImageScale9Enabled(this.nativePtr);
		return __result;
	}

	setMaskImageCapInsets(capInsets) {
		var pbcapInsets = PBBKRectF.create();
		pbcapInsets.left = capInsets.left;
		pbcapInsets.top = capInsets.top;
		pbcapInsets.width = capInsets.width;
		pbcapInsets.height = capInsets.height;
		const capInsetsBuffer = PBBKRectF.buffer(pbcapInsets);
		Module._VBox_setMaskImageCapInsets(this.nativePtr, capInsetsBuffer);
		PBBKRectF.freeBuffer(capInsetsBuffer);
	}

	getMaskImageCapInsets() {
		Module._VBox_getMaskImageCapInsets(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	setLayoutType(type) {
		Module._VBox_setLayoutType(this.nativePtr, type);
	}

	getLayoutType() {
		var __result = Module._VBox_getLayoutType(this.nativePtr);
		return __result;
	}

	setLoopFocus(loop) {
		Module._VBox_setLoopFocus(this.nativePtr, loop);
	}

	isLoopFocus() {
		var __result = Module._VBox_isLoopFocus(this.nativePtr);
		return __result;
	}

	setPassFocusToChild(pass) {
		Module._VBox_setPassFocusToChild(this.nativePtr, pass);
	}

	isPassFocusToChild() {
		var __result = Module._VBox_isPassFocusToChild(this.nativePtr);
		return __result;
	}

	setEnabled(enabled) {
		Module._VBox_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._VBox_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._VBox_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._VBox_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._VBox_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._VBox_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._VBox_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._VBox_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._VBox_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._VBox_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._VBox_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._VBox_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._VBox_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._VBox_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._VBox_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._VBox_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._VBox_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._VBox_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._VBox_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._VBox_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._VBox_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._VBox_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._VBox_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._VBox_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._VBox_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._VBox_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._VBox_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._VBox_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._VBox_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._VBox_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._VBox_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._VBox_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._VBox_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._VBox_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._VBox_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._VBox_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._VBox_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._VBox_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._VBox_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._VBox_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._VBox_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._VBox_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._VBox_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._VBox_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._VBox_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._VBox_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._VBox_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._VBox_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._VBox_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._VBox_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._VBox_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._VBox_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._VBox_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._VBox_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._VBox_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._VBox_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._VBox_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._VBox_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._VBox_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._VBox_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._VBox_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._VBox_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._VBox_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._VBox_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._VBox_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._VBox_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._VBox_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._VBox_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._VBox_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._VBox_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._VBox_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._VBox_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._VBox_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._VBox_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._VBox_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._VBox_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._VBox_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._VBox_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._VBox_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._VBox_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._VBox_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._VBox_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._VBox_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._VBox_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._VBox_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._VBox_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._VBox_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._VBox_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._VBox_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._VBox_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._VBox_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._VBox_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._VBox_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._VBox_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._VBox_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._VBox_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._VBox_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._VBox_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._VBox_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._VBox_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._VBox_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._VBox_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._VBox_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._VBox_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._VBox_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._VBox_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._VBox_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._VBox_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._VBox_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._VBox_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._VBox_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._VBox_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._VBox_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._VBox_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._VBox_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._VBox_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._VBox_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._VBox_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._VBox_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._VBox_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._VBox_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._VBox_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._VBox_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._VBox_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._VBox_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._VBox_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._VBox_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._VBox_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._VBox_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._VBox_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._VBox_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._VBox_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._VBox_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._VBox_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._VBox_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._VBox_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._VBox_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._VBox_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._VBox_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._VBox_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._VBox_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._VBox_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._VBox_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._VBox_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._VBox_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._VBox_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._VBox_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._VBox_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._VBox_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._VBox_activate(this.nativePtr);
	}

	deactivate() {
		Module._VBox_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._VBox_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Widget {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Widget_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static create() {
		var __result = Module._Widget_create();
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setEnabled(enabled) {
		Module._Widget_setEnabled(this.nativePtr, enabled);
	}

	isEnabled() {
		var __result = Module._Widget_isEnabled(this.nativePtr);
		return __result;
	}

	setBright(bright) {
		Module._Widget_setBright(this.nativePtr, bright);
	}

	isBright() {
		var __result = Module._Widget_isBright(this.nativePtr);
		return __result;
	}

	setTouchEnabled(enabled) {
		Module._Widget_setTouchEnabled(this.nativePtr, enabled);
	}

	isTouchEnabled() {
		var __result = Module._Widget_isTouchEnabled(this.nativePtr);
		return __result;
	}

	setBrightStyle(style) {
		Module._Widget_setBrightStyle(this.nativePtr, style);
	}

	setHighlighted(highlight) {
		Module._Widget_setHighlighted(this.nativePtr, highlight);
	}

	isHighlighted() {
		var __result = Module._Widget_isHighlighted(this.nativePtr);
		return __result;
	}

	getLeftBoundary() {
		var __result = Module._Widget_getLeftBoundary(this.nativePtr);
		return __result;
	}

	getBottomBoundary() {
		var __result = Module._Widget_getBottomBoundary(this.nativePtr);
		return __result;
	}

	getRightBoundary() {
		var __result = Module._Widget_getRightBoundary(this.nativePtr);
		return __result;
	}

	getTopBoundary() {
		var __result = Module._Widget_getTopBoundary(this.nativePtr);
		return __result;
	}

	addTouchEventListener(listener) {
		let listenerFunc = CustomCallback_3cd5058e0fcc86b6e27e3cb9ce69eb9a_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, viiff);
		Module._Widget_addTouchEventListener(this.nativePtr, listenerPtr);
	}

	addClickEventListener(listener) {
		let listenerFunc = CustomCallback_afb5be18f8a14720242a3cde42954352_wasm_Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, vi);
		Module._Widget_addClickEventListener(this.nativePtr, listenerPtr);
	}

	setPositionPercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Widget_setPositionPercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	getPositionPercent() {
		Module._Widget_getPositionPercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setPositionType(type) {
		Module._Widget_setPositionType(this.nativePtr, type);
	}

	getPositionType() {
		var __result = Module._Widget_getPositionType(this.nativePtr);
		return __result;
	}

	setFlippedX(flippedX) {
		Module._Widget_setFlippedX(this.nativePtr, flippedX);
	}

	isFlippedX() {
		var __result = Module._Widget_isFlippedX(this.nativePtr);
		return __result;
	}

	setFlippedY(flippedY) {
		Module._Widget_setFlippedY(this.nativePtr, flippedY);
	}

	isFlippedY() {
		var __result = Module._Widget_isFlippedY(this.nativePtr);
		return __result;
	}

	getTouchBeganPosition() {
		Module._Widget_getTouchBeganPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchMovePosition() {
		Module._Widget_getTouchMovePosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getTouchEndPosition() {
		Module._Widget_getTouchEndPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setSizePercent(percent) {
		var pbpercent = PBVector2.create();
		pbpercent.x = percent.x;
		pbpercent.y = percent.y;
		const percentBuffer = PBVector2.buffer(pbpercent);
		Module._Widget_setSizePercent(this.nativePtr, percentBuffer);
		PBVector2.freeBuffer(percentBuffer);
	}

	setSizeType(type) {
		Module._Widget_setSizeType(this.nativePtr, type);
	}

	getSizeType() {
		var __result = Module._Widget_getSizeType(this.nativePtr);
		return __result;
	}

	getSizePercent() {
		Module._Widget_getSizePercent(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	hitTest(pt, camera) {
		var pbpt = PBVector2.create();
		pbpt.x = pt.x;
		pbpt.y = pt.y;
		const ptBuffer = PBVector2.buffer(pbpt);
		var __result = Module._Widget_hitTest(this.nativePtr, ptBuffer, camera.nativePtr);
		PBVector2.freeBuffer(ptBuffer);
		return __result;
	}

	setLayoutParameter(parameter) {
		Module._Widget_setLayoutParameter(this.nativePtr, parameter.nativePtr);
	}

	getLayoutParameter() {
		var __result = Module._Widget_getLayoutParameter(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new LayoutParameter(__result);
		}
	}

	ignoreContentAdaptWithSize(ignore) {
		Module._Widget_ignoreContentAdaptWithSize(this.nativePtr, ignore);
	}

	isIgnoreContentAdaptWithSize() {
		var __result = Module._Widget_isIgnoreContentAdaptWithSize(this.nativePtr);
		return __result;
	}

	getWorldPosition() {
		Module._Widget_getWorldPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getVirtualRendererSize() {
		Module._Widget_getVirtualRendererSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	clone() {
		var __result = Module._Widget_clone(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Widget(__result);
		}
	}

	setPropagateTouchEvents(isPropagate) {
		Module._Widget_setPropagateTouchEvents(this.nativePtr, isPropagate);
	}

	isPropagateTouchEvents() {
		var __result = Module._Widget_isPropagateTouchEvents(this.nativePtr);
		return __result;
	}

	setSwallowTouches(swallow) {
		Module._Widget_setSwallowTouches(this.nativePtr, swallow);
	}

	isSwallowTouches() {
		var __result = Module._Widget_isSwallowTouches(this.nativePtr);
		return __result;
	}

	isFocusEnabled() {
		var __result = Module._Widget_isFocusEnabled(this.nativePtr);
		return __result;
	}

	setFocusEnabled(enable) {
		Module._Widget_setFocusEnabled(this.nativePtr, enable);
	}

	requestFocus() {
		Module._Widget_requestFocus(this.nativePtr);
	}

	setUnifySizeEnabled(enable) {
		Module._Widget_setUnifySizeEnabled(this.nativePtr, enable);
	}

	isUnifySizeEnabled() {
		var __result = Module._Widget_isUnifySizeEnabled(this.nativePtr);
		return __result;
	}

	setSkipSelfDraw(flag) {
		Module._Widget_setSkipSelfDraw(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._Widget_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._Widget_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._Widget_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._Widget_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._Widget_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._Widget_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._Widget_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._Widget_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._Widget_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._Widget_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._Widget_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._Widget_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._Widget_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._Widget_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._Widget_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._Widget_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._Widget_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._Widget_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._Widget_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._Widget_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._Widget_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._Widget_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._Widget_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._Widget_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._Widget_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._Widget_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._Widget_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._Widget_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._Widget_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._Widget_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._Widget_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._Widget_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._Widget_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._Widget_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._Widget_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._Widget_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._Widget_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._Widget_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._Widget_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._Widget_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._Widget_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._Widget_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._Widget_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._Widget_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._Widget_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._Widget_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._Widget_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._Widget_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._Widget_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._Widget_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._Widget_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._Widget_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._Widget_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._Widget_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._Widget_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._Widget_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._Widget_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._Widget_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._Widget_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._Widget_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._Widget_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._Widget_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._Widget_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._Widget_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._Widget_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._Widget_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._Widget_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._Widget_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._Widget_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._Widget_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._Widget_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._Widget_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Widget_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Widget_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Widget_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Widget_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Widget_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Widget_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Widget_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Widget_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Widget_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Widget_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Widget_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Widget_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Widget_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Widget_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Widget_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Widget_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Widget_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Widget_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Widget_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Widget_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Widget_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Widget_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Widget_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Widget_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Widget_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Widget_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Widget_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Widget_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Widget_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Widget_activate(this.nativePtr);
	}

	deactivate() {
		Module._Widget_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Widget_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class BKCanvasEffect {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._BKCanvasEffect_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	static createAsOffscreenTexture(name, width, height) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		var __result = Module._BKCanvasEffect_createAsOffscreenTexture(nameBuffer, width, height);
		Module._free(nameBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new BKCanvasEffect(__result);
		}
	}

	static createWithFile(imageFile) {
		const imageFileBuffer = Module._malloc(imageFile.length+1);
		Module.stringToUTF8(imageFile, imageFileBuffer, imageFile.length+1);
		var __result = Module._BKCanvasEffect_createWithFile(imageFileBuffer);
		Module._free(imageFileBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new BKCanvasEffect(__result);
		}
	}

	getTexture() {
		var __result = Module._BKCanvasEffect_getTexture(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Texture2D(__result);
		}
	}

	enableDirtyRectDraw(flag) {
		Module._BKCanvasEffect_enableDirtyRectDraw(this.nativePtr, flag);
	}

	setSize(width, height) {
		Module._BKCanvasEffect_setSize(this.nativePtr, width, height);
	}

	setRenderTarget(name, x, y, width, height) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._BKCanvasEffect_setRenderTarget(this.nativePtr, nameBuffer, x, y, width, height);
		Module._free(nameBuffer);
	}

	save() {
		Module._BKCanvasEffect_save(this.nativePtr);
	}

	restore() {
		Module._BKCanvasEffect_restore(this.nativePtr);
	}

	setFillStyle(r, g, b, a) {
		Module._BKCanvasEffect_setFillStyle(this.nativePtr, r, g, b, a);
	}

	setFillStyleWithColor(color) {
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._BKCanvasEffect_setFillStyleWithColor(this.nativePtr, colorBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	setFillStyleWithGradient(startColor, endColor, along) {
		var pbstartColor = PBColor4F.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		pbstartColor.a = startColor.a;
		const startColorBuffer = PBColor4F.buffer(pbstartColor);
		var pbendColor = PBColor4F.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		pbendColor.a = endColor.a;
		const endColorBuffer = PBColor4F.buffer(pbendColor);
		var pbalong = PBVector2.create();
		pbalong.x = along.x;
		pbalong.y = along.y;
		const alongBuffer = PBVector2.buffer(pbalong);
		Module._BKCanvasEffect_setFillStyleWithGradient(this.nativePtr, startColorBuffer, endColorBuffer, alongBuffer);
		PBColor4F.freeBuffer(startColorBuffer);
		PBColor4F.freeBuffer(endColorBuffer);
		PBVector2.freeBuffer(alongBuffer);
	}

	setFillStyleWithImage(image) {
		const imageBuffer = Module._malloc(image.length+1);
		Module.stringToUTF8(image, imageBuffer, image.length+1);
		Module._BKCanvasEffect_setFillStyleWithImage(this.nativePtr, imageBuffer);
		Module._free(imageBuffer);
	}

	setStrokeStyle(r, g, b, a) {
		Module._BKCanvasEffect_setStrokeStyle(this.nativePtr, r, g, b, a);
	}

	setStrokeStyleWithColor(color) {
		var pbcolor = PBColor4F.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		pbcolor.a = color.a;
		const colorBuffer = PBColor4F.buffer(pbcolor);
		Module._BKCanvasEffect_setStrokeStyleWithColor(this.nativePtr, colorBuffer);
		PBColor4F.freeBuffer(colorBuffer);
	}

	setStrokeStyleWithGradient(startColor, endColor, along) {
		var pbstartColor = PBColor4F.create();
		pbstartColor.r = startColor.r;
		pbstartColor.g = startColor.g;
		pbstartColor.b = startColor.b;
		pbstartColor.a = startColor.a;
		const startColorBuffer = PBColor4F.buffer(pbstartColor);
		var pbendColor = PBColor4F.create();
		pbendColor.r = endColor.r;
		pbendColor.g = endColor.g;
		pbendColor.b = endColor.b;
		pbendColor.a = endColor.a;
		const endColorBuffer = PBColor4F.buffer(pbendColor);
		var pbalong = PBVector2.create();
		pbalong.x = along.x;
		pbalong.y = along.y;
		const alongBuffer = PBVector2.buffer(pbalong);
		Module._BKCanvasEffect_setStrokeStyleWithGradient(this.nativePtr, startColorBuffer, endColorBuffer, alongBuffer);
		PBColor4F.freeBuffer(startColorBuffer);
		PBColor4F.freeBuffer(endColorBuffer);
		PBVector2.freeBuffer(alongBuffer);
	}

	setShadowColor(r, g, b, a) {
		Module._BKCanvasEffect_setShadowColor(this.nativePtr, r, g, b, a);
	}

	setShadowBlur(level) {
		Module._BKCanvasEffect_setShadowBlur(this.nativePtr, level);
	}

	setShadowOffsetX(val) {
		Module._BKCanvasEffect_setShadowOffsetX(this.nativePtr, val);
	}

	setShadowOffsetY(val) {
		Module._BKCanvasEffect_setShadowOffsetY(this.nativePtr, val);
	}

	setLineCap(e) {
		Module._BKCanvasEffect_setLineCap(this.nativePtr, e);
	}

	setLineJoin(e) {
		Module._BKCanvasEffect_setLineJoin(this.nativePtr, e);
	}

	setLineWidth(val) {
		Module._BKCanvasEffect_setLineWidth(this.nativePtr, val);
	}

	getLineWidth() {
		var __result = Module._BKCanvasEffect_getLineWidth(this.nativePtr);
		return __result;
	}

	setLineLimit(val) {
		Module._BKCanvasEffect_setLineLimit(this.nativePtr, val);
	}

	getLineLimit() {
		var __result = Module._BKCanvasEffect_getLineLimit(this.nativePtr);
		return __result;
	}

	beginPath() {
		Module._BKCanvasEffect_beginPath(this.nativePtr);
	}

	closePath() {
		Module._BKCanvasEffect_closePath(this.nativePtr);
	}

	moveTo(x, y) {
		Module._BKCanvasEffect_moveTo(this.nativePtr, x, y);
	}

	lineTo(x, y) {
		Module._BKCanvasEffect_lineTo(this.nativePtr, x, y);
	}

	quadraticCurveTo(cpx, cpy, x, y) {
		Module._BKCanvasEffect_quadraticCurveTo(this.nativePtr, cpx, cpy, x, y);
	}

	bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
		Module._BKCanvasEffect_bezierCurveTo(this.nativePtr, cp1x, cp1y, cp2x, cp2y, x, y);
	}

	arc(x, y, r, sAngle, eAngle, counterclockwise) {
		Module._BKCanvasEffect_arc(this.nativePtr, x, y, r, sAngle, eAngle, counterclockwise);
	}

	arcTo(rx, ry, angle, large_arc_flag, sweep_flag, x, y) {
		Module._BKCanvasEffect_arcTo(this.nativePtr, rx, ry, angle, large_arc_flag, sweep_flag, x, y);
	}

	circle(cx, cy, r) {
		Module._BKCanvasEffect_circle(this.nativePtr, cx, cy, r);
	}

	roundedRect(x, y, width, height, r) {
		Module._BKCanvasEffect_roundedRect(this.nativePtr, x, y, width, height, r);
	}

	fillRoundedRect(x, y, width, height, r) {
		Module._BKCanvasEffect_fillRoundedRect(this.nativePtr, x, y, width, height, r);
	}

	strokeRoundedRect(x, y, width, height, r) {
		Module._BKCanvasEffect_strokeRoundedRect(this.nativePtr, x, y, width, height, r);
	}

	rect(x, y, width, height) {
		Module._BKCanvasEffect_rect(this.nativePtr, x, y, width, height);
	}

	fillRect(x, y, width, height) {
		Module._BKCanvasEffect_fillRect(this.nativePtr, x, y, width, height);
	}

	strokeRect(x, y, width, height) {
		Module._BKCanvasEffect_strokeRect(this.nativePtr, x, y, width, height);
	}

	clearRect(x, y, width, height) {
		Module._BKCanvasEffect_clearRect(this.nativePtr, x, y, width, height);
	}

	scale(x, y) {
		Module._BKCanvasEffect_scale(this.nativePtr, x, y);
	}

	rotate(rad) {
		Module._BKCanvasEffect_rotate(this.nativePtr, rad);
	}

	translate(dx, dy) {
		Module._BKCanvasEffect_translate(this.nativePtr, dx, dy);
	}

	transform(hscale, hskewing, vskewing, vscale, tx, ty) {
		Module._BKCanvasEffect_transform(this.nativePtr, hscale, hskewing, vskewing, vscale, tx, ty);
	}

	setTransform(hscale, hskewing, vskewing, vscale, tx, ty) {
		Module._BKCanvasEffect_setTransform(this.nativePtr, hscale, hskewing, vskewing, vscale, tx, ty);
	}

	setFont(fontProperties) {
		const fontPropertiesBuffer = Module._malloc(fontProperties.length+1);
		Module.stringToUTF8(fontProperties, fontPropertiesBuffer, fontProperties.length+1);
		Module._BKCanvasEffect_setFont(this.nativePtr, fontPropertiesBuffer);
		Module._free(fontPropertiesBuffer);
	}

	setTextAlign(val) {
		Module._BKCanvasEffect_setTextAlign(this.nativePtr, val);
	}

	setTextBaseline(val) {
		Module._BKCanvasEffect_setTextBaseline(this.nativePtr, val);
	}

	fillText(str, basex, basey) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		Module._BKCanvasEffect_fillText(this.nativePtr, strBuffer, basex, basey);
		Module._free(strBuffer);
	}

	strokeText(str, basex, basey) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		Module._BKCanvasEffect_strokeText(this.nativePtr, strBuffer, basex, basey);
		Module._free(strBuffer);
	}

	blur(x1, y1, x2, y2) {
		Module._BKCanvasEffect_blur(this.nativePtr, x1, y1, x2, y2);
	}

	measureText(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._BKCanvasEffect_measureText(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		return __result;
	}

	fill() {
		Module._BKCanvasEffect_fill(this.nativePtr);
	}

	stroke() {
		Module._BKCanvasEffect_stroke(this.nativePtr);
	}

	release() {
		Module._BKCanvasEffect_release(this.nativePtr);
	}

	retain() {
		Module._BKCanvasEffect_retain(this.nativePtr);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._BKCanvasEffect_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._BKCanvasEffect_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._BKCanvasEffect_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._BKCanvasEffect_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._BKCanvasEffect_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._BKCanvasEffect_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._BKCanvasEffect_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._BKCanvasEffect_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._BKCanvasEffect_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._BKCanvasEffect_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._BKCanvasEffect_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._BKCanvasEffect_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._BKCanvasEffect_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._BKCanvasEffect_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._BKCanvasEffect_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._BKCanvasEffect_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._BKCanvasEffect_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._BKCanvasEffect_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._BKCanvasEffect_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._BKCanvasEffect_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._BKCanvasEffect_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._BKCanvasEffect_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._BKCanvasEffect_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._BKCanvasEffect_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._BKCanvasEffect_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._BKCanvasEffect_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._BKCanvasEffect_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._BKCanvasEffect_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._BKCanvasEffect_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._BKCanvasEffect_activate(this.nativePtr);
	}

	deactivate() {
		Module._BKCanvasEffect_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._BKCanvasEffect_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class BKCustomCollectionEffect {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._BKCustomCollectionEffect_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setViewport(x, y, width, height) {
		Module._BKCustomCollectionEffect_setViewport(this.nativePtr, x, y, width, height);
	}

	setRenderTargetName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._BKCustomCollectionEffect_setRenderTargetName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	resetRenderTarget() {
		Module._BKCustomCollectionEffect_resetRenderTarget(this.nativePtr);
	}

	resetViewport() {
		Module._BKCustomCollectionEffect_resetViewport(this.nativePtr);
	}

	setScaleType(type) {
		Module._BKCustomCollectionEffect_setScaleType(this.nativePtr, type);
	}

	setFrameSizeByScale(val) {
		Module._BKCustomCollectionEffect_setFrameSizeByScale(this.nativePtr, val);
	}

	setFrameSize(width, height) {
		Module._BKCustomCollectionEffect_setFrameSize(this.nativePtr, width, height);
	}

	setOffScreenLoadActionType(t) {
		Module._BKCustomCollectionEffect_setOffScreenLoadActionType(this.nativePtr, t);
	}

	setOffScreenBlendMode(m) {
		Module._BKCustomCollectionEffect_setOffScreenBlendMode(this.nativePtr, m);
	}

	addEffect(obj) {
		Module._BKCustomCollectionEffect_addEffect(this.nativePtr, obj.nativePtr);
	}

	clearEffects() {
		Module._BKCustomCollectionEffect_clearEffects(this.nativePtr);
	}

	clearGeneratorsGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._BKCustomCollectionEffect_clearGeneratorsGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	setBaseSize(size) {
		Module._BKCustomCollectionEffect_setBaseSize(this.nativePtr, size);
	}

	setNeedFace(flag) {
		Module._BKCustomCollectionEffect_setNeedFace(this.nativePtr, flag);
	}

	setNeedFaceExtraPoints(flag) {
		Module._BKCustomCollectionEffect_setNeedFaceExtraPoints(this.nativePtr, flag);
	}

	setNeedHand(flag) {
		Module._BKCustomCollectionEffect_setNeedHand(this.nativePtr, flag);
	}

	setNeedBody(flag) {
		Module._BKCustomCollectionEffect_setNeedBody(this.nativePtr, flag);
	}

	setNeedBackgroundSegment(flag) {
		Module._BKCustomCollectionEffect_setNeedBackgroundSegment(this.nativePtr, flag);
	}

	setNeedBlendShape(flag) {
		Module._BKCustomCollectionEffect_setNeedBlendShape(this.nativePtr, flag);
	}

	setSupportVerticel(flag) {
		Module._BKCustomCollectionEffect_setSupportVerticel(this.nativePtr, flag);
	}

	setSupportHorizontal(flag) {
		Module._BKCustomCollectionEffect_setSupportHorizontal(this.nativePtr, flag);
	}

	runScript(scriptFilePath) {
		const scriptFilePathBuffer = Module._malloc(scriptFilePath.length+1);
		Module.stringToUTF8(scriptFilePath, scriptFilePathBuffer, scriptFilePath.length+1);
		Module._BKCustomCollectionEffect_runScript(this.nativePtr, scriptFilePathBuffer);
		Module._free(scriptFilePathBuffer);
	}

	forceInitScript() {
		Module._BKCustomCollectionEffect_forceInitScript(this.nativePtr);
	}

	setResourceRootPath(resourceRootPath) {
		const resourceRootPathBuffer = Module._malloc(resourceRootPath.length+1);
		Module.stringToUTF8(resourceRootPath, resourceRootPathBuffer, resourceRootPath.length+1);
		Module._BKCustomCollectionEffect_setResourceRootPath(this.nativePtr, resourceRootPathBuffer);
		Module._free(resourceRootPathBuffer);
	}

	setScriptInitialStringParam(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		const valueBuffer = Module._malloc(value.length+1);
		Module.stringToUTF8(value, valueBuffer, value.length+1);
		Module._BKCustomCollectionEffect_setScriptInitialStringParam(this.nativePtr, keyBuffer, valueBuffer);
		Module._free(keyBuffer);
		Module._free(valueBuffer);
	}

	setScriptInitialFloatParam(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptInitialFloatParam(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	setScriptInitialIntParam(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptInitialIntParam(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	setScriptInitialBoolParam(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptInitialBoolParam(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	clearScriptParams() {
		Module._BKCustomCollectionEffect_clearScriptParams(this.nativePtr);
	}

	removeScriptCustomAttribute(key) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_removeScriptCustomAttribute(this.nativePtr, keyBuffer);
		Module._free(keyBuffer);
	}

	setScriptCustomFloatAttribute(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptCustomFloatAttribute(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	setScriptCustomIntAttribute(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptCustomIntAttribute(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	setScriptCustomStringAttribute(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		const valueBuffer = Module._malloc(value.length+1);
		Module.stringToUTF8(value, valueBuffer, value.length+1);
		Module._BKCustomCollectionEffect_setScriptCustomStringAttribute(this.nativePtr, keyBuffer, valueBuffer);
		Module._free(keyBuffer);
		Module._free(valueBuffer);
	}

	setScriptCustomBoolAttribute(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		Module._BKCustomCollectionEffect_setScriptCustomBoolAttribute(this.nativePtr, keyBuffer, value);
		Module._free(keyBuffer);
	}

	addString2ScriptCustomArray(key, value) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		const valueBuffer = Module._malloc(value.length+1);
		Module.stringToUTF8(value, valueBuffer, value.length+1);
		Module._BKCustomCollectionEffect_addString2ScriptCustomArray(this.nativePtr, keyBuffer, valueBuffer);
		Module._free(keyBuffer);
		Module._free(valueBuffer);
	}

	getScriptCustomFloatAttribute(key, defaultValue) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		var __result = Module._BKCustomCollectionEffect_getScriptCustomFloatAttribute(this.nativePtr, keyBuffer, defaultValue);
		Module._free(keyBuffer);
		return __result;
	}

	getScriptCustomIntAttribute(key, defaultValue) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		var __result = Module._BKCustomCollectionEffect_getScriptCustomIntAttribute(this.nativePtr, keyBuffer, defaultValue);
		Module._free(keyBuffer);
		return __result;
	}

	getScriptCustomBoolAttribute(key, defaultValue) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		var __result = Module._BKCustomCollectionEffect_getScriptCustomBoolAttribute(this.nativePtr, keyBuffer, defaultValue);
		Module._free(keyBuffer);
		return __result;
	}

	setEventListener(key, listener) {
		const keyBuffer = Module._malloc(key.length+1);
		Module.stringToUTF8(key, keyBuffer, key.length+1);
		let listenerFunc = Callback2Generator(listener);
		let listenerPtr = Module.addFunction(listenerFunc, "viii");
		Module._BKCustomCollectionEffect_setEventListener(this.nativePtr, keyBuffer, listenerPtr);
		Module._free(keyBuffer);
	}

	setScriptLogCallback(callback) {
		let callbackFunc = Callback1Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vii");
		Module._BKCustomCollectionEffect_setScriptLogCallback(this.nativePtr, callbackPtr);
	}

	logWithLevel(msg, level) {
		const msgBuffer = Module._malloc(msg.length+1);
		Module.stringToUTF8(msg, msgBuffer, msg.length+1);
		Module._BKCustomCollectionEffect_logWithLevel(this.nativePtr, msgBuffer, level);
		Module._free(msgBuffer);
	}

	log(msg) {
		const msgBuffer = Module._malloc(msg.length+1);
		Module.stringToUTF8(msg, msgBuffer, msg.length+1);
		Module._BKCustomCollectionEffect_log(this.nativePtr, msgBuffer);
		Module._free(msgBuffer);
	}

	notifyEvent(eventName, val) {
		const eventNameBuffer = Module._malloc(eventName.length+1);
		Module.stringToUTF8(eventName, eventNameBuffer, eventName.length+1);
		Module._BKCustomCollectionEffect_notifyEvent(this.nativePtr, eventNameBuffer, val);
		Module._free(eventNameBuffer);
	}

	pushCommand(command) {
		const commandBuffer = Module._malloc(command.length+1);
		Module.stringToUTF8(command, commandBuffer, command.length+1);
		Module._BKCustomCollectionEffect_pushCommand(this.nativePtr, commandBuffer);
		Module._free(commandBuffer);
	}

	callScriptFunction(funcName, params) {
		const funcNameBuffer = Module._malloc(funcName.length+1);
		Module.stringToUTF8(funcName, funcNameBuffer, funcName.length+1);
		const paramsBuffer = Module._malloc(params.length+1);
		Module.stringToUTF8(params, paramsBuffer, params.length+1);
		var __result = Module._BKCustomCollectionEffect_callScriptFunction(this.nativePtr, funcNameBuffer, paramsBuffer);
		Module._free(funcNameBuffer);
		Module._free(paramsBuffer);
		return Module.UTF8ToString(__result);
	}

	setLuaDebuggerStartCmd(startLuaDebugCmd) {
		const startLuaDebugCmdBuffer = Module._malloc(startLuaDebugCmd.length+1);
		Module.stringToUTF8(startLuaDebugCmd, startLuaDebugCmdBuffer, startLuaDebugCmd.length+1);
		Module._BKCustomCollectionEffect_setLuaDebuggerStartCmd(this.nativePtr, startLuaDebugCmdBuffer);
		Module._free(startLuaDebugCmdBuffer);
	}

	setLuaDebuggerServerInfo(debuggerDir, port) {
		const debuggerDirBuffer = Module._malloc(debuggerDir.length+1);
		Module.stringToUTF8(debuggerDir, debuggerDirBuffer, debuggerDir.length+1);
		Module._BKCustomCollectionEffect_setLuaDebuggerServerInfo(this.nativePtr, debuggerDirBuffer, port);
		Module._free(debuggerDirBuffer);
	}

	setLuaDebuggerEnable(enable) {
		Module._BKCustomCollectionEffect_setLuaDebuggerEnable(this.nativePtr, enable);
	}

	getTextureCache() {
		var __result = Module._BKCustomCollectionEffect_getTextureCache(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new TextureCache(__result);
		}
	}

	waitRemoteEffectFileSync(targetPath, port) {
		const targetPathBuffer = Module._malloc(targetPath.length+1);
		Module.stringToUTF8(targetPath, targetPathBuffer, targetPath.length+1);
		var __result = Module._BKCustomCollectionEffect_waitRemoteEffectFileSync(this.nativePtr, targetPathBuffer, port);
		Module._free(targetPathBuffer);
		return __result;
	}

	waitRemoteEffectFileAsync(targetPath, port, callback) {
		const targetPathBuffer = Module._malloc(targetPath.length+1);
		Module.stringToUTF8(targetPath, targetPathBuffer, targetPath.length+1);
		let callbackFunc = Callback1Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, "vii");
		var __result = Module._BKCustomCollectionEffect_waitRemoteEffectFileAsync(this.nativePtr, targetPathBuffer, port, callbackPtr);
		Module._free(targetPathBuffer);
		return __result;
	}

	getToken(appId, secret, extId, profileId, startTimeInSeconds, expireTimeInSeconds) {
		const appIdBuffer = Module._malloc(appId.length+1);
		Module.stringToUTF8(appId, appIdBuffer, appId.length+1);
		const secretBuffer = Module._malloc(secret.length+1);
		Module.stringToUTF8(secret, secretBuffer, secret.length+1);
		const extIdBuffer = Module._malloc(extId.length+1);
		Module.stringToUTF8(extId, extIdBuffer, extId.length+1);
		const profileIdBuffer = Module._malloc(profileId.length+1);
		Module.stringToUTF8(profileId, profileIdBuffer, profileId.length+1);
		var __result = Module._BKCustomCollectionEffect_getToken(this.nativePtr, appIdBuffer, secretBuffer, extIdBuffer, profileIdBuffer, startTimeInSeconds, expireTimeInSeconds);
		Module._free(appIdBuffer);
		Module._free(secretBuffer);
		Module._free(extIdBuffer);
		Module._free(profileIdBuffer);
		return Module.UTF8ToString(__result);
	}

	getCurrentTimestamp() {
		var __result = Module._BKCustomCollectionEffect_getCurrentTimestamp(this.nativePtr);
		return __result;
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._BKCustomCollectionEffect_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._BKCustomCollectionEffect_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._BKCustomCollectionEffect_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._BKCustomCollectionEffect_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._BKCustomCollectionEffect_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._BKCustomCollectionEffect_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._BKCustomCollectionEffect_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._BKCustomCollectionEffect_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._BKCustomCollectionEffect_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._BKCustomCollectionEffect_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._BKCustomCollectionEffect_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._BKCustomCollectionEffect_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._BKCustomCollectionEffect_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._BKCustomCollectionEffect_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._BKCustomCollectionEffect_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._BKCustomCollectionEffect_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._BKCustomCollectionEffect_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._BKCustomCollectionEffect_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._BKCustomCollectionEffect_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._BKCustomCollectionEffect_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._BKCustomCollectionEffect_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._BKCustomCollectionEffect_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._BKCustomCollectionEffect_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._BKCustomCollectionEffect_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._BKCustomCollectionEffect_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._BKCustomCollectionEffect_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._BKCustomCollectionEffect_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._BKCustomCollectionEffect_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._BKCustomCollectionEffect_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._BKCustomCollectionEffect_activate(this.nativePtr);
	}

	deactivate() {
		Module._BKCustomCollectionEffect_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._BKCustomCollectionEffect_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class AutoMemoryObject {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._AutoMemoryObject_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	getClassName() {
		var __result = Module._AutoMemoryObject_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._AutoMemoryObject_activate(this.nativePtr);
	}

	deactivate() {
		Module._AutoMemoryObject_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._AutoMemoryObject_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class NodeCanvas {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._NodeCanvas_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	setAlpha(alpha) {
		Module._NodeCanvas_setAlpha(this.nativePtr, alpha);
	}

	setBasePosition(x, y) {
		Module._NodeCanvas_setBasePosition(this.nativePtr, x, y);
	}

	setMinSize(w, h) {
		Module._NodeCanvas_setMinSize(this.nativePtr, w, h);
	}

	setFixedSize(w, h) {
		Module._NodeCanvas_setFixedSize(this.nativePtr, w, h);
	}

	setFixedPosition(x, y) {
		Module._NodeCanvas_setFixedPosition(this.nativePtr, x, y);
	}

	setAnchor(left, top, right, bottom) {
		Module._NodeCanvas_setAnchor(this.nativePtr, left, top, right, bottom);
	}

	setAnchorLeft(val) {
		Module._NodeCanvas_setAnchorLeft(this.nativePtr, val);
	}

	setAnchorTop(val) {
		Module._NodeCanvas_setAnchorTop(this.nativePtr, val);
	}

	setAnchorRight(val) {
		Module._NodeCanvas_setAnchorRight(this.nativePtr, val);
	}

	setAnchorBottom(val) {
		Module._NodeCanvas_setAnchorBottom(this.nativePtr, val);
	}

	setMargin(left, top, right, bottom) {
		Module._NodeCanvas_setMargin(this.nativePtr, left, top, right, bottom);
	}

	setMarginLeft(val) {
		Module._NodeCanvas_setMarginLeft(this.nativePtr, val);
	}

	setMarginRight(val) {
		Module._NodeCanvas_setMarginRight(this.nativePtr, val);
	}

	setMarginTop(val) {
		Module._NodeCanvas_setMarginTop(this.nativePtr, val);
	}

	setMarginBottom(val) {
		Module._NodeCanvas_setMarginBottom(this.nativePtr, val);
	}

	resetTransform() {
		Module._NodeCanvas_resetTransform(this.nativePtr);
	}

	setTranslation(x, y) {
		Module._NodeCanvas_setTranslation(this.nativePtr, x, y);
	}

	translate(x, y) {
		Module._NodeCanvas_translate(this.nativePtr, x, y);
	}

	setScale(w, h) {
		Module._NodeCanvas_setScale(this.nativePtr, w, h);
	}

	scale(w, h) {
		Module._NodeCanvas_scale(this.nativePtr, w, h);
	}

	setRotation(rad) {
		Module._NodeCanvas_setRotation(this.nativePtr, rad);
	}

	rotate(rad) {
		Module._NodeCanvas_rotate(this.nativePtr, rad);
	}

	setRotationByDegree(deg) {
		Module._NodeCanvas_setRotationByDegree(this.nativePtr, deg);
	}

	rotateByDegree(deg) {
		Module._NodeCanvas_rotateByDegree(this.nativePtr, deg);
	}

	resetGeometry() {
		Module._NodeCanvas_resetGeometry(this.nativePtr);
	}

	getLayout() {
		Module._NodeCanvas_getLayout(this.nativePtr, PBVector4.nativeBuffer);
		return new Vector4(PBVector4.decode(PBVector4.nativeBuffer));
	}

	getTransform() {
		Module._NodeCanvas_getTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	hitTest(x, y) {
		var __result = Module._NodeCanvas_hitTest(this.nativePtr, x, y);
		return __result;
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._NodeCanvas_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._NodeCanvas_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._NodeCanvas_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._NodeCanvas_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._NodeCanvas_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._NodeCanvas_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._NodeCanvas_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._NodeCanvas_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._NodeCanvas_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._NodeCanvas_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._NodeCanvas_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._NodeCanvas_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._NodeCanvas_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._NodeCanvas_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._NodeCanvas_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._NodeCanvas_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._NodeCanvas_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._NodeCanvas_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._NodeCanvas_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._NodeCanvas_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._NodeCanvas_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._NodeCanvas_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._NodeCanvas_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._NodeCanvas_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._NodeCanvas_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._NodeCanvas_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._NodeCanvas_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._NodeCanvas_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._NodeCanvas_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._NodeCanvas_activate(this.nativePtr);
	}

	deactivate() {
		Module._NodeCanvas_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._NodeCanvas_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class Timer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._Timer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	start() {
		Module._Timer_start(this.nativePtr);
	}

	startWithDelay(delay) {
		Module._Timer_startWithDelay(this.nativePtr, delay);
	}

	stop() {
		Module._Timer_stop(this.nativePtr);
	}

	schedule(interval, cb) {
		let cbFunc = Callback1Generator(cb);
		let cbPtr = Module.addFunction(cbFunc, "vii");
		Module._Timer_schedule(this.nativePtr, interval, cbPtr);
	}

	oneShot(cb) {
		let cbFunc = Callback1Generator(cb);
		let cbPtr = Module.addFunction(cbFunc, "vii");
		Module._Timer_oneShot(this.nativePtr, cbPtr);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._Timer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._Timer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._Timer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._Timer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._Timer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._Timer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._Timer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._Timer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._Timer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._Timer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._Timer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._Timer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._Timer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._Timer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._Timer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._Timer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._Timer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._Timer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._Timer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._Timer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._Timer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._Timer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._Timer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._Timer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._Timer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._Timer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._Timer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._Timer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._Timer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._Timer_activate(this.nativePtr);
	}

	deactivate() {
		Module._Timer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._Timer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}


class MediaStreamPlayer {
	constructor(nativePtr) {
		this.nativePtr = nativePtr;
		if (!nativeObjectsInTableMap) {
			nativeObjectsInTableMap = new Map();
		}
		nativeObjectsInTableMap.set(nativePtr, this);
		Module._MediaStreamPlayer_setReleaseCallBack(nativePtr, autoObjReleasePtr);
	}

	play(mediaFile) {
		const mediaFileBuffer = Module._malloc(mediaFile.length+1);
		Module.stringToUTF8(mediaFile, mediaFileBuffer, mediaFile.length+1);
		Module._MediaStreamPlayer_play(this.nativePtr, mediaFileBuffer);
		Module._free(mediaFileBuffer);
	}

	stop() {
		Module._MediaStreamPlayer_stop(this.nativePtr);
	}

	resume() {
		Module._MediaStreamPlayer_resume(this.nativePtr);
	}

	pause() {
		Module._MediaStreamPlayer_pause(this.nativePtr);
	}

	setMediaEventCallback(callback) {
		let callbackFunc = CustomCallback_7b3c9760e9ab300756dafecf08e97995_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._MediaStreamPlayer_setMediaEventCallback(this.nativePtr, callbackPtr);
	}

	enableSpectrumDetect(fftSize, bandCount) {
		Module._MediaStreamPlayer_enableSpectrumDetect(this.nativePtr, fftSize, bandCount);
	}

	setAutoReplay(flag) {
		Module._MediaStreamPlayer_setAutoReplay(this.nativePtr, flag);
	}

	enableBeatDetect() {
		Module._MediaStreamPlayer_enableBeatDetect(this.nativePtr);
	}

	disableDetectFeature(f) {
		Module._MediaStreamPlayer_disableDetectFeature(this.nativePtr, f);
	}

	setShowMp3Cover(flag) {
		Module._MediaStreamPlayer_setShowMp3Cover(this.nativePtr, flag);
	}

	setScaleX(scaleX) {
		Module._MediaStreamPlayer_setScaleX(this.nativePtr, scaleX);
	}

	getScaleX() {
		var __result = Module._MediaStreamPlayer_getScaleX(this.nativePtr);
		return __result;
	}

	setScaleY(scaleY) {
		Module._MediaStreamPlayer_setScaleY(this.nativePtr, scaleY);
	}

	getScaleY() {
		var __result = Module._MediaStreamPlayer_getScaleY(this.nativePtr);
		return __result;
	}

	setScale(scale) {
		Module._MediaStreamPlayer_setScale(this.nativePtr, scale);
	}

	getScale() {
		var __result = Module._MediaStreamPlayer_getScale(this.nativePtr);
		return __result;
	}

	setPosition(position) {
		var pbposition = PBVector2.create();
		pbposition.x = position.x;
		pbposition.y = position.y;
		const positionBuffer = PBVector2.buffer(pbposition);
		Module._MediaStreamPlayer_setPosition(this.nativePtr, positionBuffer);
		PBVector2.freeBuffer(positionBuffer);
	}

	setPositionNormalized(positionNormalized) {
		var pbpositionNormalized = PBVector2.create();
		pbpositionNormalized.x = positionNormalized.x;
		pbpositionNormalized.y = positionNormalized.y;
		const positionNormalizedBuffer = PBVector2.buffer(pbpositionNormalized);
		Module._MediaStreamPlayer_setPositionNormalized(this.nativePtr, positionNormalizedBuffer);
		PBVector2.freeBuffer(positionNormalizedBuffer);
	}

	getPosition() {
		Module._MediaStreamPlayer_getPosition(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPositionNormalized() {
		Module._MediaStreamPlayer_getPositionNormalized(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getPosition3D() {
		Module._MediaStreamPlayer_getPosition3D(this.nativePtr, PBVector3.nativeBuffer);
		return new Vector3(PBVector3.decode(PBVector3.nativeBuffer));
	}

	setPosition3D(pos) {
		var pbpos = PBVector3.create();
		pbpos.x = pos.x;
		pbpos.y = pos.y;
		pbpos.z = pos.z;
		const posBuffer = PBVector3.buffer(pbpos);
		Module._MediaStreamPlayer_setPosition3D(this.nativePtr, posBuffer);
		PBVector3.freeBuffer(posBuffer);
	}

	setPositionX(x) {
		Module._MediaStreamPlayer_setPositionX(this.nativePtr, x);
	}

	getPositionX() {
		var __result = Module._MediaStreamPlayer_getPositionX(this.nativePtr);
		return __result;
	}

	setPositionY(y) {
		Module._MediaStreamPlayer_setPositionY(this.nativePtr, y);
	}

	getPositionY() {
		var __result = Module._MediaStreamPlayer_getPositionY(this.nativePtr);
		return __result;
	}

	setPositionZ(z) {
		Module._MediaStreamPlayer_setPositionZ(this.nativePtr, z);
	}

	getPositionZ() {
		var __result = Module._MediaStreamPlayer_getPositionZ(this.nativePtr);
		return __result;
	}

	setSkewX(skewX) {
		Module._MediaStreamPlayer_setSkewX(this.nativePtr, skewX);
	}

	getSkewX() {
		var __result = Module._MediaStreamPlayer_getSkewX(this.nativePtr);
		return __result;
	}

	setSkewY(skewY) {
		Module._MediaStreamPlayer_setSkewY(this.nativePtr, skewY);
	}

	getSkewY() {
		var __result = Module._MediaStreamPlayer_getSkewY(this.nativePtr);
		return __result;
	}

	setRotation(rotation) {
		Module._MediaStreamPlayer_setRotation(this.nativePtr, rotation);
	}

	getRotation() {
		var __result = Module._MediaStreamPlayer_getRotation(this.nativePtr);
		return __result;
	}

	setRotationQuat(quat) {
		var pbquat = PBQuaternion.create();
		pbquat.x = quat.x;
		pbquat.y = quat.y;
		pbquat.z = quat.z;
		pbquat.w = quat.w;
		const quatBuffer = PBQuaternion.buffer(pbquat);
		Module._MediaStreamPlayer_setRotationQuat(this.nativePtr, quatBuffer);
		PBQuaternion.freeBuffer(quatBuffer);
	}

	getRotationQuat() {
		Module._MediaStreamPlayer_getRotationQuat(this.nativePtr, PBQuaternion.nativeBuffer);
		return new Quaternion(PBQuaternion.decode(PBQuaternion.nativeBuffer));
	}

	setRotationSkewX(rotationX) {
		Module._MediaStreamPlayer_setRotationSkewX(this.nativePtr, rotationX);
	}

	getRotationSkewX() {
		var __result = Module._MediaStreamPlayer_getRotationSkewX(this.nativePtr);
		return __result;
	}

	setRotationSkewY(rotationY) {
		Module._MediaStreamPlayer_setRotationSkewY(this.nativePtr, rotationY);
	}

	getRotationSkewY() {
		var __result = Module._MediaStreamPlayer_getRotationSkewY(this.nativePtr);
		return __result;
	}

	setIgnoreAnchorPointForPosition(ignore) {
		Module._MediaStreamPlayer_setIgnoreAnchorPointForPosition(this.nativePtr, ignore);
	}

	isIgnoreAnchorPointForPosition() {
		var __result = Module._MediaStreamPlayer_isIgnoreAnchorPointForPosition(this.nativePtr);
		return __result;
	}

	setAnchorPoint(anchorPoint) {
		var pbanchorPoint = PBVector2.create();
		pbanchorPoint.x = anchorPoint.x;
		pbanchorPoint.y = anchorPoint.y;
		const anchorPointBuffer = PBVector2.buffer(pbanchorPoint);
		Module._MediaStreamPlayer_setAnchorPoint(this.nativePtr, anchorPointBuffer);
		PBVector2.freeBuffer(anchorPointBuffer);
	}

	getAnchorPoint() {
		Module._MediaStreamPlayer_getAnchorPoint(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	getAnchorPointInPoints() {
		Module._MediaStreamPlayer_getAnchorPointInPoints(this.nativePtr, PBVector2.nativeBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setContentSize(contentSize) {
		var pbcontentSize = PBBKSizeF.create();
		pbcontentSize.width = contentSize.width;
		pbcontentSize.height = contentSize.height;
		const contentSizeBuffer = PBBKSizeF.buffer(pbcontentSize);
		Module._MediaStreamPlayer_setContentSize(this.nativePtr, contentSizeBuffer);
		PBBKSizeF.freeBuffer(contentSizeBuffer);
	}

	getContentSize() {
		Module._MediaStreamPlayer_getContentSize(this.nativePtr, PBBKSizeF.nativeBuffer);
		return new BKSizeF(PBBKSizeF.decode(PBBKSizeF.nativeBuffer));
	}

	setVisible(visible) {
		Module._MediaStreamPlayer_setVisible(this.nativePtr, visible);
	}

	isVisible() {
		var __result = Module._MediaStreamPlayer_isVisible(this.nativePtr);
		return __result;
	}

	getAttachedCamera() {
		var __result = Module._MediaStreamPlayer_getAttachedCamera(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Camera(__result);
		}
	}

	setCameraMask(mask) {
		Module._MediaStreamPlayer_setCameraMask(this.nativePtr, mask);
	}

	getCameraMask() {
		var __result = Module._MediaStreamPlayer_getCameraMask(this.nativePtr);
		return __result;
	}

	setBlendMethod(func) {
		Module._MediaStreamPlayer_setBlendMethod(this.nativePtr, func);
	}

	cleanup() {
		Module._MediaStreamPlayer_cleanup(this.nativePtr);
	}

	getBoundingBoxInScreen() {
		Module._MediaStreamPlayer_getBoundingBoxInScreen(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	getBoundingBox() {
		Module._MediaStreamPlayer_getBoundingBox(this.nativePtr, PBBKRectF.nativeBuffer);
		return new BKRectF(PBBKRectF.decode(PBBKRectF.nativeBuffer));
	}

	runAction(action) {
		Module._MediaStreamPlayer_runAction(this.nativePtr, action.nativePtr);
	}

	stopAllActions() {
		Module._MediaStreamPlayer_stopAllActions(this.nativePtr);
	}

	stopAction(action) {
		Module._MediaStreamPlayer_stopAction(this.nativePtr, action.nativePtr);
	}

	stopActionByTag(tag) {
		Module._MediaStreamPlayer_stopActionByTag(this.nativePtr, tag);
	}

	stopAllActionsByTag(tag) {
		Module._MediaStreamPlayer_stopAllActionsByTag(this.nativePtr, tag);
	}

	stopActionsByFlags(flags) {
		Module._MediaStreamPlayer_stopActionsByFlags(this.nativePtr, flags);
	}

	getActionByTag(tag) {
		var __result = Module._MediaStreamPlayer_getActionByTag(this.nativePtr, tag);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Action(__result);
		}
	}

	getNumberOfRunningActions() {
		var __result = Module._MediaStreamPlayer_getNumberOfRunningActions(this.nativePtr);
		return __result;
	}

	getNumberOfRunningActionsByTag(tag) {
		var __result = Module._MediaStreamPlayer_getNumberOfRunningActionsByTag(this.nativePtr, tag);
		return __result;
	}

	getNodeToParentTransform() {
		Module._MediaStreamPlayer_getNodeToParentTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getParentToNodeTransform() {
		Module._MediaStreamPlayer_getParentToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getNodeToWorldTransform() {
		Module._MediaStreamPlayer_getNodeToWorldTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	getWorldToNodeTransform() {
		Module._MediaStreamPlayer_getWorldToNodeTransform(this.nativePtr, PBMatrix.nativeBuffer);
		return new Matrix(PBMatrix.decode(PBMatrix.nativeBuffer));
	}

	convertToNodeSpace(worldPoint) {
		var pbworldPoint = PBVector2.create();
		pbworldPoint.x = worldPoint.x;
		pbworldPoint.y = worldPoint.y;
		const worldPointBuffer = PBVector2.buffer(pbworldPoint);
		Module._MediaStreamPlayer_convertToNodeSpace(this.nativePtr, worldPointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(worldPointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	convertToWorldSpace(nodePoint) {
		var pbnodePoint = PBVector2.create();
		pbnodePoint.x = nodePoint.x;
		pbnodePoint.y = nodePoint.y;
		const nodePointBuffer = PBVector2.buffer(pbnodePoint);
		Module._MediaStreamPlayer_convertToWorldSpace(this.nativePtr, nodePointBuffer, PBVector2.nativeBuffer);
		PBVector2.freeBuffer(nodePointBuffer);
		return new Vector2(PBVector2.decode(PBVector2.nativeBuffer));
	}

	setAdditionalTransform(additionalTransform) {
		var pbadditionalTransform = PBMatrix.create();
		pbadditionalTransform.m00 = additionalTransform.m00;
		pbadditionalTransform.m01 = additionalTransform.m01;
		pbadditionalTransform.m02 = additionalTransform.m02;
		pbadditionalTransform.m03 = additionalTransform.m03;
		pbadditionalTransform.m10 = additionalTransform.m10;
		pbadditionalTransform.m11 = additionalTransform.m11;
		pbadditionalTransform.m12 = additionalTransform.m12;
		pbadditionalTransform.m13 = additionalTransform.m13;
		pbadditionalTransform.m20 = additionalTransform.m20;
		pbadditionalTransform.m21 = additionalTransform.m21;
		pbadditionalTransform.m22 = additionalTransform.m22;
		pbadditionalTransform.m23 = additionalTransform.m23;
		pbadditionalTransform.m30 = additionalTransform.m30;
		pbadditionalTransform.m31 = additionalTransform.m31;
		pbadditionalTransform.m32 = additionalTransform.m32;
		pbadditionalTransform.m33 = additionalTransform.m33;
		const additionalTransformBuffer = PBMatrix.buffer(pbadditionalTransform);
		Module._MediaStreamPlayer_setAdditionalTransform(this.nativePtr, additionalTransformBuffer);
		PBMatrix.freeBuffer(additionalTransformBuffer);
	}

	getOpacity() {
		var __result = Module._MediaStreamPlayer_getOpacity(this.nativePtr);
		return __result;
	}

	setOpacity(opacity) {
		Module._MediaStreamPlayer_setOpacity(this.nativePtr, opacity);
	}

	isCascadeOpacityEnabled() {
		var __result = Module._MediaStreamPlayer_isCascadeOpacityEnabled(this.nativePtr);
		return __result;
	}

	setCascadeOpacityEnabled(cascadeOpacityEnabled) {
		Module._MediaStreamPlayer_setCascadeOpacityEnabled(this.nativePtr, cascadeOpacityEnabled);
	}

	isCascadeColorEnabled() {
		var __result = Module._MediaStreamPlayer_isCascadeColorEnabled(this.nativePtr);
		return __result;
	}

	setCascadeColorEnabled(cascadeColorEnabled) {
		Module._MediaStreamPlayer_setCascadeColorEnabled(this.nativePtr, cascadeColorEnabled);
	}

	getColor() {
		Module._MediaStreamPlayer_getColor(this.nativePtr, PBColor3B.nativeBuffer);
		return new Color3B(PBColor3B.decode(PBColor3B.nativeBuffer));
	}

	setColor(color) {
		var pbcolor = PBColor3B.create();
		pbcolor.r = color.r;
		pbcolor.g = color.g;
		pbcolor.b = color.b;
		const colorBuffer = PBColor3B.buffer(pbcolor);
		Module._MediaStreamPlayer_setColor(this.nativePtr, colorBuffer);
		PBColor3B.freeBuffer(colorBuffer);
	}

	getLight2DShadowCasterMask() {
		var __result = Module._MediaStreamPlayer_getLight2DShadowCasterMask(this.nativePtr);
		return __result;
	}

	setLight2DShadowCasterMask(i) {
		Module._MediaStreamPlayer_setLight2DShadowCasterMask(this.nativePtr, i);
	}

	scheduleUpdate(callback) {
		let callbackFunc = CustomCallback_ea2873eb930c49463212e55d093084a3_wasm_Generator(callback);
		let callbackPtr = Module.addFunction(callbackFunc, vi);
		Module._MediaStreamPlayer_scheduleUpdate(this.nativePtr, callbackPtr);
	}

	destroy() {
		Module._MediaStreamPlayer_destroy(this.nativePtr);
	}

	delayDestroy() {
		Module._MediaStreamPlayer_delayDestroy(this.nativePtr);
	}

	getName() {
		var __result = Module._MediaStreamPlayer_getName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	setName(name) {
		const nameBuffer = Module._malloc(name.length+1);
		Module.stringToUTF8(name, nameBuffer, name.length+1);
		Module._MediaStreamPlayer_setName(this.nativePtr, nameBuffer);
		Module._free(nameBuffer);
	}

	reset() {
		Module._MediaStreamPlayer_reset(this.nativePtr);
	}

	setOrder(val) {
		Module._MediaStreamPlayer_setOrder(this.nativePtr, val);
	}

	setAutoBatchLayer(layer) {
		Module._MediaStreamPlayer_setAutoBatchLayer(this.nativePtr, layer);
	}

	getAutoBatchLayer() {
		var __result = Module._MediaStreamPlayer_getAutoBatchLayer(this.nativePtr);
		return __result;
	}

	getOrder() {
		var __result = Module._MediaStreamPlayer_getOrder(this.nativePtr);
		return __result;
	}

	isActivated() {
		var __result = Module._MediaStreamPlayer_isActivated(this.nativePtr);
		return __result;
	}

	setRenderGroup(renderGroup) {
		Module._MediaStreamPlayer_setRenderGroup(this.nativePtr, renderGroup);
	}

	loadEffectConfig(path) {
		const pathBuffer = Module._malloc(path.length+1);
		Module.stringToUTF8(path, pathBuffer, path.length+1);
		Module._MediaStreamPlayer_loadEffectConfig(this.nativePtr, pathBuffer);
		Module._free(pathBuffer);
	}

	setUpdateBeforeParent(enable) {
		Module._MediaStreamPlayer_setUpdateBeforeParent(this.nativePtr, enable);
	}

	addChild(child) {
		var __result = Module._MediaStreamPlayer_addChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	addChildrenWithConfigPackage(configPackage) {
		const configPackageBuffer = Module._malloc(configPackage.length+1);
		Module.stringToUTF8(configPackage, configPackageBuffer, configPackage.length+1);
		var __result = Module._MediaStreamPlayer_addChildrenWithConfigPackage(this.nativePtr, configPackageBuffer);
		Module._free(configPackageBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	getChildrenCount() {
		var __result = Module._MediaStreamPlayer_getChildrenCount(this.nativePtr);
		return __result;
	}

	getChildByIndex(index) {
		var __result = Module._MediaStreamPlayer_getChildByIndex(this.nativePtr, index);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	removeChild(child) {
		var __result = Module._MediaStreamPlayer_removeChild(this.nativePtr, child.nativePtr);
		return __result;
	}

	findNodeByPath(str) {
		const strBuffer = Module._malloc(str.length+1);
		Module.stringToUTF8(str, strBuffer, str.length+1);
		var __result = Module._MediaStreamPlayer_findNodeByPath(this.nativePtr, strBuffer);
		Module._free(strBuffer);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	appendChildToGroup(child, groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		var __result = Module._MediaStreamPlayer_appendChildToGroup(this.nativePtr, child.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
		return __result;
	}

	clearChildrenInGroup(groupName) {
		const groupNameBuffer = Module._malloc(groupName.length+1);
		Module.stringToUTF8(groupName, groupNameBuffer, groupName.length+1);
		Module._MediaStreamPlayer_clearChildrenInGroup(this.nativePtr, groupNameBuffer);
		Module._free(groupNameBuffer);
	}

	clearAllChildren() {
		Module._MediaStreamPlayer_clearAllChildren(this.nativePtr);
	}

	destroyChild(child) {
		Module._MediaStreamPlayer_destroyChild(this.nativePtr, child.nativePtr);
	}

	deattachFromParent() {
		var __result = Module._MediaStreamPlayer_deattachFromParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	delayDeattachFromParent() {
		Module._MediaStreamPlayer_delayDeattachFromParent(this.nativePtr);
	}

	getParent() {
		var __result = Module._MediaStreamPlayer_getParent(this.nativePtr);
		if (nativeObjectsInTableMap && nativeObjectsInTableMap.has(__result)) {
			return nativeObjectsInTableMap.get(__result);
		}
		else {
			return new Node(__result);
		}
	}

	isMarkDestroyed() {
		var __result = Module._MediaStreamPlayer_isMarkDestroyed(this.nativePtr);
		return __result;
	}

	getClassName() {
		var __result = Module._MediaStreamPlayer_getClassName(this.nativePtr);
		return Module.UTF8ToString(__result);
	}

	activate() {
		Module._MediaStreamPlayer_activate(this.nativePtr);
	}

	deactivate() {
		Module._MediaStreamPlayer_deactivate(this.nativePtr);
	}

	enableLifeCircleCallback(flag) {
		Module._MediaStreamPlayer_enableLifeCircleCallback(this.nativePtr, flag);
	}

}

